diff --git i/public/abusing-ruby-19-and-json-for-fun/index.html w/public/abusing-ruby-19-and-json-for-fun/index.html
index 6dc304b..b44cb50 100644
--- i/public/abusing-ruby-19-and-json-for-fun/index.html
+++ w/public/abusing-ruby-19-and-json-for-fun/index.html
@@ -23,23 +23,17 @@
   </header><p>Ever since I found out about the new hash syntax you can use in ruby 1.9, and how similar that syntax is to JSON, I've been waiting for someone to realise you can just abuse <code>eval()</code> for parsing (some) JSON now.</p>
 
 <p>For example, lets say we have the following ruby hash, which could be generated by a RESTful api:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="n">thing</span> <span class="o">=</span> <span class="p">{</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">thing</span> <span class="o">=</span> <span class="p">{</span>
     <span class="ss">:person</span> <span class="o">=&gt;</span> <span class="p">{</span>
-        <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;caius&quot;</span>
+        <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&#34;caius&#34;</span>
     <span class="p">}</span>
-<span class="p">}</span>
-</code></pre></div>
-
+<span class="p">}</span></code></pre></div>
 <p>If we pull in the JSON gem and dump that out as a string, we get the following:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="n">jsonstr</span> <span class="o">=</span> <span class="n">thing</span><span class="o">.</span><span class="n">to_json</span>
-<span class="c1"># =&gt; &#39;{&quot;person&quot;:{&quot;name&quot;:&quot;caius&quot;}}&#39;</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">jsonstr</span> <span class="o">=</span> <span class="n">thing</span><span class="o">.</span><span class="n">to_json</span>
+<span class="c1"># =&gt; &#39;{&#34;person&#34;:{&#34;name&#34;:&#34;caius&#34;}}&#39;</span></code></pre></div>
 <p>That's&hellip; not quite what we wanted. It's not going to turn back into valid ruby as it is. Luckily javascript will parse objects without requiring the attributes to be wrapped in quotes, eg: <code>{some: &quot;attribute&quot;}</code>. We could build a JSON emitter that does it properly, or we could just run it through a regular expression instead. <em>(Lets also add a space after the colon to aid readability.)</em></p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="n">jsonstr</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/&quot;([^&quot;]+)&quot;: /</span><span class="p">,</span> <span class="s1">&#39;\1: &#39;</span><span class="p">)</span>
-<span class="c1"># =&gt; &#39;{person: {name: &quot;caius&quot;}}&#39;</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">jsonstr</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/&#34;([^&#34;]+)&#34;: /</span><span class="p">,</span> <span class="s1">&#39;\1: &#39;</span><span class="p">)</span>
+<span class="c1"># =&gt; &#39;{person: {name: &#34;caius&#34;}}&#39;</span></code></pre></div>
 <p>Okay, so now we've turned a ruby hash into a JSON hash, that can still be parsed by the browser. Here's a screenshot to prove that:</p>
 
 <p><img src="http://farm6.static.flickr.com/5300/5425314597_43be5824cf_o.jpg" alt="Valid JSON 'thing'" /></p>
@@ -49,12 +43,10 @@
 <p>Now then, we've proved that is successfully parsed into javascript objects by the browser, generated from a ruby hash. No great shakes there, that's fairly simple and has worked for ages. Now for my next trick, I'm going to turn that string of JSON back into a ruby hash, all without going anywhere near the JSON gem.</p>
 
 <p>Some of you might have guessed what I'm about to do and have started hoping you've guessed wrongly â€” just for the record I don't condone doing this except for fun and games. The JSON gem is there for a reason ;) With that little disclaimer out the way, here we go!</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="n">thing2</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="n">jsonstr</span><span class="p">)</span>
-<span class="c1"># =&gt; {:person=&gt;{:name=&gt;&quot;caius&quot;}}</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">thing2</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="n">jsonstr</span><span class="p">)</span>
+<span class="c1"># =&gt; {:person=&gt;{:name=&gt;&#34;caius&#34;}}</span>
 <span class="n">thing2</span> <span class="o">==</span> <span class="n">thing</span>
-<span class="c1"># =&gt; true</span>
-</code></pre></div>
-
+<span class="c1"># =&gt; true</span></code></pre></div>
 <p>Oh snap! We just turned javascript objects back into valid ruby objects, in one simple method call. And we'd be able to access the &quot;caius&quot; value by calling <code>thing2[:person][:name]</code>, or creating OpenStructs from the hashes and calling <code>thing2.person.name</code>. Which is uncannily like the JS!</p>
 
 <p><strong>Updated 2011-02-07</strong>: <a href="http://jens.ayton.se/">Jens Ayton</a> pointed out unquoted keys aren't strictly valid JSON, which is correct. Amended to say they're parsed as javascript objects instead, with no mention of it being valid JSON.</p>
diff --git i/public/add-to-icloud-reading-list-programmatically/index.html w/public/add-to-icloud-reading-list-programmatically/index.html
index 2a2d8c1..d61c8ca 100644
--- i/public/add-to-icloud-reading-list-programmatically/index.html
+++ w/public/add-to-icloud-reading-list-programmatically/index.html
@@ -27,15 +27,13 @@
 <p>One quick stop in &quot;Script Editor.app&quot; later, and I had the Applescript dictionary open for Safari.app. Lo and behold, there is rather handily an Applescript command called &quot;add reading list item&quot;, which does <strong>exactly</strong> what I want. It has a few different options you can call it with, depending on whether you want Safari to go populate the title &amp; preview text, or if you want to specify it yourself at save-time.</p>
 
 <p>As I want to be able to call this from multiple runtimes, I've chosen to save it as an executable, which leans on <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/osascript.1.html"><code>osascript</code></a> to run the actual Applescript. And here it is:</p>
-<div class="highlight"><pre><code class="language-applescript" data-lang="applescript"><span></span><span class="c">#!/usr/bin/env osascript</span>
+<div class="highlight"><pre class="chroma"><code class="language-applescript" data-lang="applescript"><span class="c">#!/usr/bin/env osascript</span>
 
 <span class="k">on</span> <span class="nb">run</span> <span class="nv">argv</span>
     <span class="k">if</span> <span class="p">(</span><span class="nb">count</span> <span class="k">of</span> <span class="nv">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span>
-        <span class="k">tell</span> <span class="nv">app</span> <span class="s2">&quot;Safari&quot;</span> <span class="k">to</span> <span class="nv">add</span> <span class="nv">reading</span> <span class="nv">list</span> <span class="nb">item</span> <span class="p">(</span><span class="nb">item</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">argv</span> <span class="k">as </span><span class="nc">text</span><span class="p">)</span>
+        <span class="k">tell</span> <span class="nv">app</span> <span class="s2">&#34;Safari&#34;</span> <span class="k">to</span> <span class="nv">add</span> <span class="nv">reading</span> <span class="nv">list</span> <span class="nb">item</span> <span class="p">(</span><span class="nb">item</span> <span class="mi">1</span> <span class="k">of</span> <span class="nv">argv</span> <span class="k">as </span><span class="nc">text</span><span class="p">)</span>
     <span class="k">end</span> <span class="k">if</span>
-<span class="k">end</span> <span class="nb">run</span>
-</code></pre></div>
-
+<span class="k">end</span> <span class="nb">run</span></code></pre></div>
 <p>Save it as whatever you want (eg. <code>add_to_reading_list</code>), make it executable (<code>chmod +x add_to_reading_list</code>), and then run it with the URL you want saving as the first argument.</p>
 
 <pre><code>$ add_to_reading_list &quot;http://caius.name/&quot;
diff --git i/public/adding-a-remote-to-existing-git-repo/index.html w/public/adding-a-remote-to-existing-git-repo/index.html
index d6d3438..6033e7c 100644
--- i/public/adding-a-remote-to-existing-git-repo/index.html
+++ w/public/adding-a-remote-to-existing-git-repo/index.html
@@ -52,11 +52,9 @@
 </code></pre>
 
 <p>The answer is to do what it says funnily enough, and add the remote refs tracking to the config file. The easiest way I've found of doing this is to edit <code>.git/config</code> and add the following at the bottom of it.</p>
-<div class="highlight"><pre><code class="language-ini" data-lang="ini"><span></span><span class="k">[branch &quot;master&quot;]</span>
-    <span class="na">remote</span> <span class="o">=</span> <span class="s">origin</span>
-<span class="s">    merge = refs/heads/master</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ini" data-lang="ini"><span class="k">[branch &#34;master&#34;]</span>
+    <span class="na">remote</span> <span class="o">=</span> <span class="s">origin
+</span><span class="s">    merge = refs/heads/master</span></code></pre></div>
 <p><em>Remember to change the branch or remote names if you need to.</em></p>
 
 <p>Once you've added that to the config you can run <code>git pull</code> on the master branch and it'll do the usual automagical thing and pull the remote master branch changes into the local one!</p>
diff --git i/public/adding-xhtml-output-validation-to-cucumber-stories/index.html w/public/adding-xhtml-output-validation-to-cucumber-stories/index.html
index c0c890b..e1ec79e 100644
--- i/public/adding-xhtml-output-validation-to-cucumber-stories/index.html
+++ w/public/adding-xhtml-output-validation-to-cucumber-stories/index.html
@@ -31,37 +31,31 @@
 <p>Currently I just do that by only validating if <code>ENV[&quot;VALIDATION&quot;]</code> is set to anything, so a normal run of my cucumber stories will just test the app does what its supposed to do. If I run them with <code>VALIDATION=true</code> then it will check my markup is valid as well.</p>
 
 <p><strong>features/support/env.rb</strong></p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="nb">require</span> <span class="s2">&quot;markup_validity&quot;</span> <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;VALIDATION&quot;</span><span class="o">]</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">&#34;markup_validity&#34;</span> <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;VALIDATION&#34;</span><span class="o">]</span></code></pre></div>
 <p><strong>features/step_definitions/general_steps.rb</strong></p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="no">Then</span> <span class="sr">%r/the page is valid XHTML/</span> <span class="k">do</span>
-  <span class="vg">$browser</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">should</span> <span class="n">be_xhtml_strict</span> <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;VALIDATION&quot;</span><span class="o">]</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="no">Then</span> <span class="s">%r/the page is valid XHTML/</span> <span class="k">do</span>
+  <span class="vg">$browser</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">should</span> <span class="n">be_xhtml_strict</span> <span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;VALIDATION&#34;</span><span class="o">]</span>
+<span class="k">end</span></code></pre></div>
 <p><strong>features/logging_in.feature</strong></p>
-<div class="highlight"><pre><code class="language-cucumber" data-lang="cucumber"><span></span><span class="k">Feature:</span><span class="nf"> Logging in</span>
-<span class="nf">  In order to do stuff</span>
-<span class="nf">  As a registered user</span>
-<span class="nf">  I want to login</span>
+<div class="highlight"><pre class="chroma"><code class="language-cucumber" data-lang="cucumber">Feature: Logging in
+  In order to do stuff
+  As a registered user
+  I want to login
 
-<span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Successful Login</span>
-<span class="k">    Given </span><span class="nf">there is a user called &quot;</span><span class="s">Caius</span><span class="nf">&quot;</span>
+  Scenario: Successful Login
+    Given there is a user called &#34;Caius&#34;
 
-<span class="nf">    </span><span class="k">When </span><span class="nf">I goto the homepage</span>
-<span class="nf">    </span><span class="k">Then </span><span class="nf">the page is valid XHTML</span>
+    When I goto the homepage
+    Then the page is valid XHTML
 
-<span class="nf">    </span><span class="k">When </span><span class="nf">I click on the &quot;</span><span class="s">Login</span><span class="nf">&quot; link</span>
-<span class="nf">    </span><span class="k">Then </span><span class="nf">I am redirected to the login page</span>
-<span class="nf">    </span><span class="k">And </span><span class="nf">the page is valid XHTML</span>
-
-<span class="nf">    </span><span class="k">When </span><span class="nf">I enter my login details</span>
-<span class="nf">    </span><span class="k">And </span><span class="nf">I click &quot;</span><span class="s">Login</span><span class="nf">&quot;</span>
-<span class="nf">    </span><span class="k">Then </span><span class="nf">I am redirected to my dashboard</span>
-<span class="nf">    </span><span class="k">And </span><span class="nf">the page is valid XHTML</span>
-</code></pre></div>
+    When I click on the &#34;Login&#34; link
+    Then I am redirected to the login page
+    And the page is valid XHTML
 
+    When I enter my login details
+    And I click &#34;Login&#34;
+    Then I am redirected to my dashboard
+    And the page is valid XHTML</code></pre></div>
 <p>Now when I run <code>cucumber features/logging_in.feature</code>, it doesn't validate the HTML, it just makes sure that I can login as my user and that I am redirected to the right places. But if I run <code>VALIDATION=true cucumber features/logging_in.feature</code>, then it <em>does</em> validate my XHTML on the homepage, the login page and on the user's dashboard. If it fails validation then it gives you a fairly helpful error message as to what it was expecting and what it found instead.</p>
 
 <p>From a quick run against a couple of stories in my app I discovered that I've not been wrapping form elements in an enclosing element, so they've been quickly fixed and now they validate. Now I realise this gem is only testing XHTML output, and doesn't include CSS or JS validation, but from a quick peek at the gem's source it should be fairly easy to add both of those in I think, although again they aren't major errors for me yet in this app.</p>
diff --git i/public/another-concise-code-example/index.html w/public/another-concise-code-example/index.html
index b78dcf9..0bbd1ef 100644
--- i/public/another-concise-code-example/index.html
+++ w/public/another-concise-code-example/index.html
@@ -21,10 +21,10 @@
     <h1><a href="/another-concise-code-example/">Another Concise Code Example</a></h1>
     <time datetime="2008-04-26 15:54:09 &#43;0000 &#43;0000">2008-04-26 15:54:09</time>
   </header><p>This is just another example showing how I refactor code down to its bare minimum. The reason why I do this so much (and indeed I think why ruby is so easy to read compared to other languages) is because it makes my code more readable and less of a bugger to pick up after a while.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">class</span> <span class="nc">Page</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Page</span>
   <span class="kp">attr_accessor</span> <span class="ss">:parent_id</span>
         
-  <span class="k">def</span> <span class="nf">old_parent</span>
+  <span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">old_parent</span>
     <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">parent?</span>
       <span class="no">Page</span><span class="o">.</span><span class="n">find</span><span class="p">(</span> <span class="nb">self</span><span class="o">.</span><span class="n">parent_id</span> <span class="p">)</span>
     <span class="k">else</span>
@@ -32,14 +32,12 @@
     <span class="k">end</span>
   <span class="k">end</span>
 
-  <span class="k">def</span> <span class="nf">parent</span>
+  <span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">parent</span>
     <span class="k">return</span> <span class="no">Page</span><span class="o">.</span><span class="n">find</span><span class="p">(</span> <span class="nb">self</span><span class="o">.</span><span class="n">parent_id</span> <span class="p">)</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">parent?</span>
     <span class="kp">false</span>
   <span class="k">end</span>
     
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p><code>old_parent</code> and <code>parent</code> return exactly the same, but one is 2 lines compared to 5 and easier to read.</p>
 
 <p><strong>Update:</strong> <a href="http://ciaranwal.sh/">Ciaran</a> pointed out that the Page.parent method would only ever return false. Added the return statement to it to fix the bug.</p>
diff --git i/public/app-store-hidden-preferences/index.html w/public/app-store-hidden-preferences/index.html
index 6e8d4a6..0b683ed 100644
--- i/public/app-store-hidden-preferences/index.html
+++ w/public/app-store-hidden-preferences/index.html
@@ -27,9 +27,7 @@
 <p>Had a quick look through <code>/Applications/App Store.app/Contents/MacOS/App Store</code> with <code>strings</code> (love that tool) and noted a few strings that looked interesting. (There's a full list <a href="https://gist.github.com/768442">in this gist</a>.) There wasn't anything that explicitly stated it stopped it putting anything in the dock, but I did notice an option that stopped it showing <strong>install progress</strong> in the dock.</p>
 
 <p>Yank up a terminal window, bash out the following...</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>defaults write com.apple.appstore FRDebugShowInstallProgress -bool NO
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">defaults write com.apple.appstore FRDebugShowInstallProgress -bool NO</code></pre></div>
 <p>...head back to the MAS and install another (free) app, and hey presto, it's leaving my dock alone! Hopefully that's all I needed to continue using my Dock as I like. (Hidden, and left alone.)</p>
 
 <p><strong>Update 2011-01-06:</strong></p>
diff --git i/public/at-1-on-os-x/index.html w/public/at-1-on-os-x/index.html
index 6c497de..483fc85 100644
--- i/public/at-1-on-os-x/index.html
+++ w/public/at-1-on-os-x/index.html
@@ -23,13 +23,9 @@
   </header><p>I recently came across the <a href="http://developer.apple.com/mac/library/DOCUMENTATION/Darwin/Reference/ManPages/man1/at.1.html"><code>at(1)</code></a> command, and wondered why it wasn't executing jobs I gave it on my machine. Had a poke around the man pages, and discovered in <a href="http://developer.apple.com/mac/library/documentation/Darwin/Reference/ManPages/man8/atrun.8.html"><code>atrun(8)</code></a> that by default <code>launchd(8)</code> has the <code>atrun</code> entry disabled.</p>
 
 <p>To enable it (and have <code>at</code> jobs fire) you simply need to run the following command once:</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.atrun.plist
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.atrun.plist</code></pre></div>
 <p>Personally I've taken to using this to sleep my machine after a custom amount of time, mainly because my alarm clock/sleep timer of choice (<a href="http://embraceware.com/awaken/">Awaken</a>) can't handle playing <a href="http://www.spotify.com/">Spotify</a> for x minutes and then sleeping the machine. The following command puts the machine to sleep, which (quite effectively) silences spotify.</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span><span class="nb">echo</span> <span class="s2">&quot;osascript -e &#39;tell app \&quot;Finder\&quot; to sleep&#39;&quot;</span> <span class="p">|</span> at <span class="m">1</span>:00am
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s2">&#34;osascript -e &#39;tell app \&#34;Finder\&#34; to sleep&#39;&#34;</span> <span class="p">|</span> at <span class="m">1</span>:00am</code></pre></div>
 <p>See the <a href="http://developer.apple.com/mac/library/DOCUMENTATION/Darwin/Reference/ManPages/man1/at.1.html"><code>at(1)</code></a> manpage for how to specify the time, but as I'm only ever scheduling it on the same day (usually 20 minutes or so in advance), just passing the time works fine.</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/bash">bash</a>, <a class="button is-link" href="/tag/cli">cli</a>, <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/mac">mac</a> and <a class="button is-link" href="/tag/tech">tech</a>
diff --git i/public/bash-script-setup/index.html w/public/bash-script-setup/index.html
index 6be5085..8803287 100644
--- i/public/bash-script-setup/index.html
+++ w/public/bash-script-setup/index.html
@@ -21,15 +21,13 @@
     <h1><a href="/bash-script-setup/">Bash script setup</a></h1>
     <time datetime="2017-05-09 18:23:58 &#43;0000 UTC">2017-05-09 18:23:58</time>
   </header><p>Recently I've been writing a bunch of bash scripts for various things. As some up-front safety checks I've taken to opening every script with the following:</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span><span class="ch">#!/usr/bin/env bash</span>
-
-<span class="o">[[</span> <span class="s2">&quot;</span><span class="nv">$TRACE</span><span class="s2">&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">set</span> -o xtrace
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="cp">#!/usr/bin/env bash
+</span><span class="cp"></span>
+<span class="o">[[</span> <span class="s2">&#34;</span><span class="nv">$TRACE</span><span class="s2">&#34;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">set</span> -o xtrace
 <span class="nb">set</span> -o errexit
 <span class="nb">set</span> -o nounset
 <span class="nb">set</span> -o pipefail
-<span class="nb">set</span> -o noclobber
-</code></pre></div>
-
+<span class="nb">set</span> -o noclobber</code></pre></div>
 <p>Other things I'm also trying to be good about doing:</p>
 
 <ul>
diff --git i/public/capitalise-ringer-on-the-iphone-volume-bezel/index.html w/public/capitalise-ringer-on-the-iphone-volume-bezel/index.html
index 24d57a6..50ad041 100644
--- i/public/capitalise-ringer-on-the-iphone-volume-bezel/index.html
+++ w/public/capitalise-ringer-on-the-iphone-volume-bezel/index.html
@@ -49,10 +49,8 @@
 </code></pre>
 
 <p>Then opening the file in TextMate was a bit more successful! I can actually understand what its defining now. Search through the file for &quot;ringer&quot; and I found the following lines:</p>
-<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span></span><span class="nt">&lt;key&gt;</span>RINGER_VOLUME<span class="nt">&lt;/key&gt;</span>
-<span class="nt">&lt;string&gt;</span>ringer<span class="nt">&lt;/string&gt;</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;key&gt;</span>RINGER_VOLUME<span class="nt">&lt;/key&gt;</span>
+<span class="nt">&lt;string&gt;</span>ringer<span class="nt">&lt;/string&gt;</span></code></pre></div>
 <p>Change the &quot;ringer&quot; to &quot;Ringer&quot; between the <code>&lt;string&gt;</code> and my editing work is complete! Yes, it really is that easy to edit an interface string that is defined in a <code>.string</code>. Now I just need to convert the file back to binary, and copy it back to the phone. Converting back to binary file is one line, just change the <code>xml1</code> in the previous command to <code>binary1</code>.</p>
 
 <pre><code># On the mac
diff --git i/public/changing-hostname-in-smartos-zone/index.html w/public/changing-hostname-in-smartos-zone/index.html
index 025cac8..f786b43 100644
--- i/public/changing-hostname-in-smartos-zone/index.html
+++ w/public/changing-hostname-in-smartos-zone/index.html
@@ -28,9 +28,7 @@
 </ul>
 
 <p>A quick way to do that is with <code>sed</code> <em>(renaming &quot;fred&quot; to &quot;beth&quot; here)</em>:</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>sed -e <span class="s1">&#39;s/fred/beth/g&#39;</span> -i /etc/hosts /etc/nodename
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">sed -e <span class="s1">&#39;s/fred/beth/g&#39;</span> -i /etc/hosts /etc/nodename</code></pre></div>
 <p>Then shutdown &amp; start the zone <em>(from my testing a restart doesn't apply it)</em>.</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/smartos">SmartOS</a>
diff --git i/public/command-line-tricks--scripting-languages/index.html w/public/command-line-tricks--scripting-languages/index.html
index b6c1248..57250e2 100644
--- i/public/command-line-tricks--scripting-languages/index.html
+++ w/public/command-line-tricks--scripting-languages/index.html
@@ -25,47 +25,35 @@
 <p>To search your php.ini file quickly and easily with the option to use regular expressions, I tend to drop back to the <acronym title="command line interface">cli</acronym>.  The reason for this is I can easily parse the output of <code>phpinfo()</code> with <code>grep</code>, and can do various things with the output, could even pass it to a script if I really wanted to.</p>
 
 <p>Here is the line I use to search <code>phpinfo()</code></p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span><span class="nb">echo</span> <span class="s2">&quot;&lt;?php phpinfo() ?&gt;&quot;</span> <span class="p">|</span> php <span class="p">|</span> grep -i <span class="nv">$search_string</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="s2">&#34;&lt;?php phpinfo() ?&gt;&#34;</span> <span class="p">|</span> php <span class="p">|</span> grep -i <span class="nv">$search_string</span></code></pre></div>
 <p>It passes the string through the php interpreter and then searches through it with grep.</p>
 
 <p>You can also do other nifty things with the shell &amp; php + ruby especially (though I imagine python &amp; perl work in the same way.) For instance I wanted to see if the following ruby would return the number of seconds since the <a href="http:/en.wikipedia.org/wiki/Unix_Time">epoch</a> till now.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_i</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_i</span></code></pre></div>
 <p>Now I could fire up a PHP page and do something like the following</p>
-<div class="highlight"><pre><code class="language-php" data-lang="php"><span></span><span class="cp">&lt;?php</span>
-  <span class="k">echo</span> <span class="s2">&quot;php: &quot;</span> <span class="o">.</span> <span class="nb">time</span><span class="p">()</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
-  <span class="k">echo</span> <span class="s2">&quot;ruby: &quot;</span> <span class="o">.</span> <span class="sb">`ruby -e &#39;print Time.now.to_i&#39;`</span> <span class="o">.</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
-<span class="cp">?&gt;</span><span class="x"></span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
+  <span class="k">echo</span> <span class="s2">&#34;php: &#34;</span> <span class="o">.</span> <span class="nx">time</span><span class="p">()</span> <span class="o">.</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
+  <span class="k">echo</span> <span class="s2">&#34;ruby: &#34;</span> <span class="o">.</span> <span class="sb">`ruby -e &#39;print Time.now.to_i&#39;`</span> <span class="o">.</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
+<span class="cp">?&gt;</span></code></pre></div>
 <p>But what if I've not got a web server with PHP running on the machine I'm using? Well then I could drop back to the shell and run it through <code>php</code> using <code>cat</code> as a way to insert multiple lines, and it would look like the following</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>cat <span class="s">&lt;&lt;PHP | php</span>
-<span class="s">&lt;?php</span>
-<span class="s">  echo &quot;php: &quot; . time() . &quot;\n&quot;;</span>
-<span class="s">  echo &quot;ruby: &quot; . `ruby -e &#39;print Time.now.to_i&#39;` . &quot;\n&quot;;</span>
-<span class="s">PHP</span>
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">cat <span class="s">&lt;&lt;PHP | php
+</span><span class="s">&lt;?php
+</span><span class="s">  echo &#34;php: &#34; . time() . &#34;\n&#34;;
+</span><span class="s">  echo &#34;ruby: &#34; . `ruby -e &#39;print Time.now.to_i&#39;` . &#34;\n&#34;;
+</span><span class="s">PHP</span>
 
 php: <span class="m">1203004463</span>
-ruby: <span class="m">1203004463</span>
-</code></pre></div>
-
+ruby: <span class="m">1203004463</span></code></pre></div>
 <p>Now this works, but why do I want to remember all that php, and seeing as I have to drop back to the shell to access the ruby statement, why not just let the shell do all the work? So after a few seconds thinking, I came up with this</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>ruby -e <span class="s1">&#39;puts &quot;ruby: #{Time.now.to_i}&quot;&#39;</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
-  <span class="nb">echo</span> <span class="s1">&#39;&lt;?php echo &quot;PHP: &quot; . time() . &quot;\n&quot; ?&gt;&#39;</span> <span class="p">|</span> php
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ruby -e <span class="s1">&#39;puts &#34;ruby: #{Time.now.to_i}&#34;&#39;</span> <span class="o">&amp;&amp;</span> <span class="se">\
+</span><span class="se"></span>  <span class="nb">echo</span> <span class="s1">&#39;&lt;?php echo &#34;PHP: &#34; . time() . &#34;\n&#34; ?&gt;&#39;</span> <span class="p">|</span> php</code></pre></div>
 <p>This runs the ruby code through <code>ruby</code> and the php code through <code>php</code> without dropping back to the shell from within a language interpreter :)</p>
 
 <h3 id="update">Update:</h3>
 
 <p>Fangel pointed out <code>php -r</code> is the equivilent of <code>ruby -e</code> so the final commands could just be:</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>ruby -e <span class="s1">&#39;puts &quot;ruby: #{Time.now.to_i}&quot;&#39;</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
-php -r <span class="s1">&#39;echo &quot;PHP: &quot;.time().&quot;\n&quot;;&#39;</span>
-</code></pre></div>
-<footer><p class="tags">
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ruby -e <span class="s1">&#39;puts &#34;ruby: #{Time.now.to_i}&#34;&#39;</span> <span class="o">&amp;&amp;</span> <span class="se">\
+</span><span class="se"></span>php -r <span class="s1">&#39;echo &#34;PHP: &#34;.time().&#34;\n&#34;;&#39;</span></code></pre></div><footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/bash">bash</a>, <a class="button is-link" href="/tag/cli">cli</a>, <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/php">php</a>, <a class="button is-link" href="/tag/programming">programming</a> and <a class="button is-link" href="/tag/ruby">ruby</a>
 </p>
 <p class="license">
diff --git i/public/defining-ruby-superclasses-on-the-fly/index.html w/public/defining-ruby-superclasses-on-the-fly/index.html
index e5e9e45..699ee8e 100644
--- i/public/defining-ruby-superclasses-on-the-fly/index.html
+++ w/public/defining-ruby-superclasses-on-the-fly/index.html
@@ -21,24 +21,18 @@
     <h1><a href="/defining-ruby-superclasses-on-the-fly/">Defining Ruby Superclasses On The Fly</a></h1>
     <time datetime="2011-12-18 01:13:14 &#43;0000 GMT">2011-12-18 01:13:14</time>
   </header><p>Any rubyist that's defined a class should understand the following class definition:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="no">Object</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="no">Object</span>
+<span class="k">end</span></code></pre></div>
 <p>It creates a new Constant (<code>Foo</code>) that is a subclass of <code>Object</code>. Pretty straightforward. But what you might not know is that ruby executes each line it reads in as it reads them. So we could do the following to show that:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="no">Object</span>
-  <span class="nb">puts</span> <span class="s2">&quot;we just defined object!&quot;</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Foo</span> <span class="o">&lt;</span> <span class="no">Object</span>
+  <span class="nb">puts</span> <span class="s2">&#34;we just defined object!&#34;</span>
+<span class="k">end</span></code></pre></div>
 <p>And get the following output when we run that file:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="c1"># &gt;&gt; we just defined object!</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="c1"># &gt;&gt; we just defined object!</span></code></pre></div>
 <p>So.. we know ruby is executing things on the fly whilst defining classes for us. How can we use this for profit and shenanigans?! (Err, use this for vanquishing evil and creating readable code I mean. Honest.)</p>
 
 <p>How about if we've got a couple of opinionated people who like to think they've got the biggest ego in the interpreter? The last one to be loaded likes to have any new people ushered into the interpreter to be a subclass of themselves. Lets abuse a global for storing it in, and use a method to choose that on the fly when creating a new class.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">current_awkward_bugger</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">current_awkward_bugger</span>
   <span class="vg">$awkward_bugger</span>
 <span class="k">end</span>
 
@@ -58,13 +52,11 @@
 <span class="k">end</span>
 <span class="no">John</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; Harold</span>
 
-<span class="no">Fred</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; Simon</span>
-</code></pre></div>
-
+<span class="no">Fred</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; Simon</span></code></pre></div>
 <p>Okay, so that looks a bit different to normally defined classes. We create <code>Simon</code>, assign him to the awkward bugger global then create <code>Fred</code>, who subclasses the return value of the <code>current_awkward_bugger</code> method which happens to be <code>Simon</code> currently. Then <code>Harold</code> muscles his way into the interpreter and decides he's going to be the current awkward bugger, so poor <code>John</code> gets to subclass <code>Harold</code> even though he's defined in the same way as <code>Fred</code>. (And as you can see on the last line, Fred's superclass is unchanged even though we changed the <code>awkward_bugger</code> global.)</p>
 
 <p>On a somewhat related note there's a lovely method called <code>const_missing</code> that gets invoked when you call a Constant in ruby that isn't defined. (Much like <code>method_missing</code> if you're familiar with that.) Means you can do even more shenanigans with non-existent superclasses for classes you're defining.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">class</span> <span class="nc">Simon</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Simon</span>
 <span class="k">end</span>
 <span class="k">class</span> <span class="nc">Harold</span>
 <span class="k">end</span>
@@ -81,9 +73,7 @@
 
 <span class="k">class</span> <span class="nc">Albert</span> <span class="o">&lt;</span> <span class="no">ArrogantBastard</span>
 <span class="k">end</span>
-<span class="no">Albert</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; Harold</span>
-</code></pre></div>
-
+<span class="no">Albert</span><span class="o">.</span><span class="n">superclass</span> <span class="c1"># =&gt; Harold</span></code></pre></div>
 <p>So here we're choosing from Simon and Harold on the fly each time a missing constant is referenced (in this case the aptly named <code>ArrogantBastard</code> constant.) If you run this code yourself you'll see the superclasses change on each run according to what your computer picks that time.</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/hack">hack</a>, <a class="button is-link" href="/tag/ruby">ruby</a> and <a class="button is-link" href="/tag/ruby1.9">ruby1.9</a>
diff --git i/public/evil-rb/index.html w/public/evil-rb/index.html
index bc9de14..0bbd7dc 100644
--- i/public/evil-rb/index.html
+++ w/public/evil-rb/index.html
@@ -29,54 +29,44 @@ <h2 id="reduce-local-variables-with-instance-eval">Reduce local variables with i
 <p>Sometimes (usually in a one-liner) I want to do some work with a value without assigning it to a variable. Chucking an <code>#instance_eval</code> call in there will set <code>self</code> to the value, which saves having to assign it to a local value. Pretty much only used by me in one-off scripts or cli commands.</p>
 
 <h4 id="good">Good</h4>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="n">start_date</span><span class="p">,</span> <span class="n">end_date</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;24 Dec 2011&quot;</span><span class="p">,</span> <span class="s2">&quot;23 Jan 2013&quot;</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">d</span><span class="o">|</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="p">}</span>
-<span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">start_date</span><span class="si">}</span><span class="s2"> to </span><span class="si">#{</span><span class="n">end_date</span><span class="si">}</span><span class="s2"> is </span><span class="si">#{</span><span class="p">(</span><span class="n">end_date</span> <span class="o">-</span> <span class="n">start_date</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="si">}</span><span class="s2"> days&quot;</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">start_date</span><span class="p">,</span> <span class="n">end_date</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;24 Dec 2011&#34;</span><span class="p">,</span> <span class="s2">&#34;23 Jan 2013&#34;</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">d</span><span class="o">|</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="p">}</span>
+<span class="nb">puts</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">start_date</span><span class="si">}</span><span class="s2"> to </span><span class="si">#{</span><span class="n">end_date</span><span class="si">}</span><span class="s2"> is </span><span class="si">#{</span><span class="p">(</span><span class="n">end_date</span> <span class="o">-</span> <span class="n">start_date</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="si">}</span><span class="s2"> days&#34;</span></code></pre></div>
 <h4 id="bad">Bad</h4>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="nb">puts</span> <span class="o">[</span><span class="s2">&quot;24 Dec 2011&quot;</span><span class="p">,</span> <span class="s2">&quot;23 Jan 2013&quot;</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">d</span><span class="o">|</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="p">}</span>
-  <span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first</span><span class="si">}</span><span class="s2"> to </span><span class="si">#{</span><span class="n">last</span><span class="si">}</span><span class="s2"> is </span><span class="si">#{</span><span class="p">(</span><span class="n">last</span> <span class="o">-</span> <span class="n">first</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="si">}</span><span class="s2"> days&quot;</span> <span class="p">}</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="o">[</span><span class="s2">&#34;24 Dec 2011&#34;</span><span class="p">,</span> <span class="s2">&#34;23 Jan 2013&#34;</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">d</span><span class="o">|</span> <span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="p">}</span>
+  <span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">first</span><span class="si">}</span><span class="s2"> to </span><span class="si">#{</span><span class="n">last</span><span class="si">}</span><span class="s2"> is </span><span class="si">#{</span><span class="p">(</span><span class="n">last</span> <span class="o">-</span> <span class="n">first</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="si">}</span><span class="s2"> days&#34;</span> <span class="p">}</span></code></pre></div>
 <p>See, way less code! <em>cough, cough</em></p>
 
 <h3 id="bonus-usage-misdirection">Bonus usage: Misdirection</h3>
 
 <p>I also dropped some instance_eval on our campfire bot at <a href="https://emberads.com/">EmberAds</a> to always blame one person, but without the code reading as such.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="sx">%w{Dom Mel Caius CBetta Baz}</span><span class="o">.</span><span class="n">sample</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
-  <span class="s2">&quot;(4V5A8F5T=&amp;$`&quot;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">&quot;u&quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="sx">%w{Dom Mel Caius CBetta Baz}</span><span class="o">.</span><span class="n">sample</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
+  <span class="s2">&#34;(4V5A8F5T=&amp;$`&#34;</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">&#34;u&#34;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
+<span class="k">end</span></code></pre></div>
 <p>That does not return one of the array elements as you might think it does from quickly scanning the codeâ€¦</p>
 
 <h2 id="set-method-local-variables-in-default-arguments">Set method-local variables in default arguments</h2>
 
 <p>You have a method and it takes one argument, which has a default value of <code>nil</code> specified. You then run into the situation where you need to know if <code>nil</code> was passed to the method, or if you're getting the default value of <code>nil</code>. You could change the default value to something you choose to be the &quot;default value&quot; and unlikely to be passed from elsewhere as the argument's value, and reset the parameter to <code>nil</code> after checking it, like this:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">output</span> <span class="nb">name</span><span class="o">=</span><span class="ss">:default_value</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">output</span> <span class="nb">name</span><span class="o">=</span><span class="ss">:default_value</span>
   <span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="ss">:default_value</span>
-    <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;caius&quot;</span>
+    <span class="nb">name</span> <span class="o">=</span> <span class="s2">&#34;caius&#34;</span>
     <span class="n">default</span> <span class="o">=</span> <span class="kp">true</span>
   <span class="k">end</span>
 
-  <span class="s2">&quot;name: </span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2"> -- default: </span><span class="si">#{</span><span class="n">default</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
+  <span class="s2">&#34;name: </span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2"> -- default: </span><span class="si">#{</span><span class="n">default</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&#34;</span>
 <span class="k">end</span>
 
-<span class="n">output</span><span class="p">()</span> <span class="c1"># =&gt; &quot;name: \&quot;caius\&quot; -- default: true&quot;</span>
-<span class="n">output</span><span class="p">(</span><span class="s2">&quot;fred&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;name: \&quot;fred\&quot; -- default: nil&quot;</span>
-</code></pre></div>
-
+<span class="n">output</span><span class="p">()</span> <span class="c1"># =&gt; &#34;name: \&#34;caius\&#34; -- default: true&#34;</span>
+<span class="n">output</span><span class="p">(</span><span class="s2">&#34;fred&#34;</span><span class="p">)</span> <span class="c1"># =&gt; &#34;name: \&#34;fred\&#34; -- default: nil&#34;</span></code></pre></div>
 <p>That's quite a lot of code added to the method just to find out if we passed a default value or not. And if we forget to reset the value when it's <code>:default_value</code> then we end up leaking that into whatever the method does with that value. We also have the problem that one day the program <em>could</em> possibly send that &quot;default value&quot; we've chosen as the actual parameter, and we'd blindly change it thinking it was set as the default value, not the passed argument.</p>
 
 <p>Instead we could (ab)use the power of ruby, and have ruby decide to set <code>default = true</code> for us when, and only when, the variable is set <em>to</em> the default value.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">output</span> <span class="nb">name</span><span class="o">=</span><span class="p">((</span><span class="n">default</span><span class="o">=</span><span class="kp">true</span><span class="p">);</span> <span class="s2">&quot;caius&quot;</span><span class="p">)</span>
-  <span class="s2">&quot;name: </span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2"> -- default: </span><span class="si">#{</span><span class="n">default</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">output</span> <span class="nb">name</span><span class="o">=</span><span class="p">((</span><span class="n">default</span><span class="o">=</span><span class="kp">true</span><span class="p">);</span> <span class="s2">&#34;caius&#34;</span><span class="p">)</span>
+  <span class="s2">&#34;name: </span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2"> -- default: </span><span class="si">#{</span><span class="n">default</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&#34;</span>
 <span class="k">end</span>
 
-<span class="n">output</span><span class="p">()</span> <span class="c1"># =&gt; &quot;name: \&quot;caius\&quot; -- default: true&quot;</span>
-<span class="n">output</span><span class="p">(</span><span class="s2">&quot;fred&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;name: \&quot;fred\&quot; -- default: nil&quot;</span>
-</code></pre></div>
-
+<span class="n">output</span><span class="p">()</span> <span class="c1"># =&gt; &#34;name: \&#34;caius\&#34; -- default: true&#34;</span>
+<span class="n">output</span><span class="p">(</span><span class="s2">&#34;fred&#34;</span><span class="p">)</span> <span class="c1"># =&gt; &#34;name: \&#34;fred\&#34; -- default: nil&#34;</span></code></pre></div>
 <p>As you can see, the output is identical. Yet we have no extra code <em>inside</em> the method to figure out if we were given the default value or not. And as a bonus to that, we no longer have to check for a specific value being passed and presume that is actually the default, and not one passed by the program elsewhere.</p>
 
 <p>I posted this one in <a href="https://gist.github.com/1528785">a gist</a> a while back (to show <a href="http://avdi.org/">Avdi</a> it looks like), and people came up with some more insane things to do with it, including <a href="https://gist.github.com/1528785#comment-71861">returning early</a>, <a href="https://gist.github.com/1528785#comment-71862">raising errors</a> or even <a href="https://gist.github.com/1528785#comment-71876">redefining the current method</a>, all from the argument list! I'd suggest going to read them, it's a mixture of OMG HAHA and OMFG NO WAY WHYY?!?!.</p>
diff --git i/public/exec-3-in-go/index.html w/public/exec-3-in-go/index.html
index 6490f2f..ab9430b 100644
--- i/public/exec-3-in-go/index.html
+++ w/public/exec-3-in-go/index.html
@@ -25,22 +25,18 @@
 <p>As a simple example, I'm going to exec <code>/bin/echo</code> with a hardcoded string from the go binary. <em>The program built here is in the <a href="https://github.com/caius/gecho">gecho</a> (Gecko, geddit?) git repo, which each stage as a commit.</em></p>
 
 <p>In our main function lets setup some variables we're going to need for arguments to <code>syscall.Exec</code>:</p>
-<div class="highlight"><pre><code class="language-go" data-lang="go"><span></span><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
-  <span class="nx">cmdPath</span> <span class="o">:=</span> <span class="s">&quot;/bin/echo&quot;</span>
-  <span class="nx">cmdArgs</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="s">&quot;World&quot;</span><span class="p">}</span>
+<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
+  <span class="nx">cmdPath</span> <span class="o">:=</span> <span class="s">&#34;/bin/echo&#34;</span>
+  <span class="nx">cmdArgs</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;Hello&#34;</span><span class="p">,</span> <span class="s">&#34;World&#34;</span><span class="p">}</span>
   <span class="nx">cmdEnv</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{}</span>    
-<span class="p">}</span>
-</code></pre></div>
-
+<span class="p">}</span></code></pre></div>
 <p><em>(We could use <code>os.Environ()</code> for <code>cmdEnv</code> to take the ENV from the go binary, but we don't require anything from the environmnt here so it doesn't matter that we aren't.)</em></p>
 
 <p>Now we have the arguments for <code>syscall.Exec</code>, lets add that in and see what happens:</p>
-<div class="highlight"><pre><code class="language-go" data-lang="go"><span></span><span class="nx">err</span> <span class="o">:=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="nx">cmdPath</span><span class="p">,</span> <span class="nx">cmdArgs</span><span class="p">,</span> <span class="nx">cmdEnv</span><span class="p">)</span>
+<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">err</span> <span class="o">:=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="nx">cmdPath</span><span class="p">,</span> <span class="nx">cmdArgs</span><span class="p">,</span> <span class="nx">cmdEnv</span><span class="p">)</span>
 <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
   <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
-<span class="p">}</span>
-</code></pre></div>
-
+<span class="p">}</span></code></pre></div>
 <p>And running the file (<code>go run gecho.go</code> compiles &amp; runs for us) gives the following output:</p>
 
 <pre><code>World
@@ -49,25 +45,21 @@
 <p>Err, say what now? Where's &quot;Hello&quot; gone?!</p>
 
 <p>Took me a while to figure this out when I originally ran into this. The answer is staring us right in the face if we go look at the <a href="http://golang.org/pkg/syscall/#Exec">syscall.Exec docs</a>. Lets have a look at the function signature, argument names and all:</p>
-<div class="highlight"><pre><code class="language-go" data-lang="go"><span></span><span class="kd">func</span> <span class="nx">Exec</span><span class="p">(</span><span class="nx">argv0</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">argv</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">envv</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nx">Exec</span><span class="p">(</span><span class="nx">argv0</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">argv</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">envv</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span></code></pre></div>
 <p>Hmm. The first argument is <code>argv0</code> (and a string), rather than <code>binaryPath</code> or something similar. The second argument is then <code>argv</code> and an array of strings.</p>
 
 <p><em>At this point I remember that the first element of <code>argv</code> in other runtimes is the name of the binary or command invoked - <code>$0</code> in a bash script is the name of the script for example.</em></p>
 
 <p>The answer is simple. <code>cmdArgs</code> in our script should have <code>/bin/echo</code> as the first element, and then we pass <code>cmdArgs[0], cmdArgs</code> as the first two arguments to <code>syscall.Exec</code>. Lets give that a go:</p>
-<div class="highlight"><pre><code class="language-go" data-lang="go"><span></span><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
-  <span class="nx">cmdArgs</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;/bin/echo&quot;</span><span class="p">,</span> <span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="s">&quot;World&quot;</span><span class="p">}</span>
+<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
+  <span class="nx">cmdArgs</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;/bin/echo&#34;</span><span class="p">,</span> <span class="s">&#34;Hello&#34;</span><span class="p">,</span> <span class="s">&#34;World&#34;</span><span class="p">}</span>
   <span class="nx">cmdEnv</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{}</span>
 
   <span class="nx">err</span> <span class="o">:=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="nx">cmdArgs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">cmdArgs</span><span class="p">,</span> <span class="nx">cmdEnv</span><span class="p">)</span>
   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
     <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
   <span class="p">}</span>
-<span class="p">}</span>
-</code></pre></div>
-
+<span class="p">}</span></code></pre></div>
 <p>And running it (<code>go run gecho.go</code> remember) gives the expected output:</p>
 
 <pre><code>Hello World
diff --git i/public/feed.json w/public/feed.json
index 2dce803..33e8b2c 100644
--- i/public/feed.json
+++ w/public/feed.json
@@ -17,7 +17,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eEver found you've accidentally entered too many \u003ccode\u003egit\u003c/code\u003es in your terminal and wondered if there's a solution to it? I quite often type \u003ccode\u003egit\u003c/code\u003e then go away and come back, then type a full \u003ccode\u003egit status\u003c/code\u003e after it. This leads to a lovely (annoying) error out the box:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003e$ git git status\ngit: \u003cspan class=\"s1\"\u003e\u0026#39;git\u0026#39;\u003c/span\u003e is not a git command. See \u003cspan class=\"s1\"\u003e\u0026#39;git --help\u0026#39;\u003c/span\u003e.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eWhat a git.\u003c/p\u003e\n\n\u003cp\u003eMy initial thought was overriding the \u003ccode\u003egit\u003c/code\u003e binary in my \u003ccode\u003e$PATH\u003c/code\u003e and having it strip any leading arguments that match \u003ccode\u003egit\u003c/code\u003e, so we end up running just the \u003ccode\u003egit status\u003c/code\u003e at the end of the arguments. An easier way is to just use \u003ca href=\"https://git-scm.com/docs/git-config\"\u003e\u003ccode\u003egit-config\u003c/code\u003e\u003c/a\u003e's \u003ccode\u003ealias.*\u003c/code\u003e functionality to expand the first argument being \u003ccode\u003egit\u003c/code\u003e to a shell command.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003egit config --global alias.git \u003cspan class=\"s1\"\u003e\u0026#39;!exec git\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eWhich adds the following git config to your \u003ccode\u003e.gitconfig\u003c/code\u003e file\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ini\" data-lang=\"ini\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003e[alias]\u003c/span\u003e\n  \u003cspan class=\"na\"\u003egit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e!exec git\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd then you'll find you can \u003ccode\u003egit git\u003c/code\u003e to your heart's content\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003e$ git sha\ncc9c642663c0b63fba3964297c13ce9b61209313\n\n$ git git sha\ncc9c642663c0b63fba3964297c13ce9b61209313\n\n$ git git git git git git git git git git git git git git git git git git git git git git git git git git sha\ncc9c642663c0b63fba3964297c13ce9b61209313\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e(\u003ccode\u003egit sha\u003c/code\u003e is an alias for \u003ccode\u003egit rev-parse HEAD\u003c/code\u003e.)\u003c/p\u003e\n\n\u003cp\u003eSee what other git alias' I have in my \u003ca href=\"https://github.com/caius/zshrc/blob/master/dotfiles/gitconfig\"\u003e\u003ccode\u003e~/.gitconfig\u003c/code\u003e\u003c/a\u003e, and laugh at all the typo corrections I have in there. (Yes, git provides autocorrection if you enable it, but I'm used to these typos working!)\u003c/p\u003e\n\n\u003cp\u003eNow \u003ccode\u003egit\u003c/code\u003e back to doing useful things!\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eEver found you've accidentally entered too many \u003ccode\u003egit\u003c/code\u003es in your terminal and wondered if there's a solution to it? I quite often type \u003ccode\u003egit\u003c/code\u003e then go away and come back, then type a full \u003ccode\u003egit status\u003c/code\u003e after it. This leads to a lovely (annoying) error out the box:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ git git status\ngit: \u003cspan class=\"s1\"\u003e\u0026#39;git\u0026#39;\u003c/span\u003e is not a git command. See \u003cspan class=\"s1\"\u003e\u0026#39;git --help\u0026#39;\u003c/span\u003e.\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat a git.\u003c/p\u003e\n\n\u003cp\u003eMy initial thought was overriding the \u003ccode\u003egit\u003c/code\u003e binary in my \u003ccode\u003e$PATH\u003c/code\u003e and having it strip any leading arguments that match \u003ccode\u003egit\u003c/code\u003e, so we end up running just the \u003ccode\u003egit status\u003c/code\u003e at the end of the arguments. An easier way is to just use \u003ca href=\"https://git-scm.com/docs/git-config\"\u003e\u003ccode\u003egit-config\u003c/code\u003e\u003c/a\u003e's \u003ccode\u003ealias.*\u003c/code\u003e functionality to expand the first argument being \u003ccode\u003egit\u003c/code\u003e to a shell command.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003egit config --global alias.git \u003cspan class=\"s1\"\u003e\u0026#39;!exec git\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhich adds the following git config to your \u003ccode\u003e.gitconfig\u003c/code\u003e file\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ini\" data-lang=\"ini\"\u003e\u003cspan class=\"k\"\u003e[alias]\u003c/span\u003e\n  \u003cspan class=\"na\"\u003egit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e!exec git\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd then you'll find you can \u003ccode\u003egit git\u003c/code\u003e to your heart's content\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e$ git sha\ncc9c642663c0b63fba3964297c13ce9b61209313\n\n$ git git sha\ncc9c642663c0b63fba3964297c13ce9b61209313\n\n$ git git git git git git git git git git git git git git git git git git git git git git git git git git sha\ncc9c642663c0b63fba3964297c13ce9b61209313\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e(\u003ccode\u003egit sha\u003c/code\u003e is an alias for \u003ccode\u003egit rev-parse HEAD\u003c/code\u003e.)\u003c/p\u003e\n\n\u003cp\u003eSee what other git alias' I have in my \u003ca href=\"https://github.com/caius/zshrc/blob/master/dotfiles/gitconfig\"\u003e\u003ccode\u003e~/.gitconfig\u003c/code\u003e\u003c/a\u003e, and laugh at all the typo corrections I have in there. (Yes, git provides autocorrection if you enable it, but I'm used to these typos working!)\u003c/p\u003e\n\n\u003cp\u003eNow \u003ccode\u003egit\u003c/code\u003e back to doing useful things!\u003c/p\u003e\n"
     },
     {
         "title" : "Upgrading Microserver G8 CPU",
@@ -47,7 +47,7 @@
         "date_modified" : "2017-05-09T20:55:00Z",
         "id" : "http://caiustheory.com/raspberry-pi-3-as-an-emergency-router/",
         "url" : "http://caiustheory.com/raspberry-pi-3-as-an-emergency-router/",
-        "content_html" : "\u003cp\u003eGiven a dead router, how do you get back online whilst you wait for the replacement part to arrive? Grab a Raspberry Pi 3 off the shelf, along with a USB to Ethernet adapter and hey presto the internet works again.\u003c/p\u003e\n\n\u003cp\u003eThis is with a fibre modem (FTTC), using PPPoE to connect out. Plug the modem (WAN) into the RPi's ethernet port, and plug the LAN switch into the USB adapter.\u003c/p\u003e\n\n\u003cp\u003eFirst thing is to get the WAN link working, get it talking PPPoE to the ISP. Usually this will be configured in \u003ccode\u003e/etc/ppp/pppoe.conf\u003c/code\u003e (depends on your linux distro). (That'll require your username/password for your ISP usually too.)\u003c/p\u003e\n\n\u003cp\u003eGet it up \u0026amp; connected, and make sure you can ping the internet from the RPi. Then it's time to get the LAN working. Give it a static IP in the range you want shared out.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e# /etc/network/interfaces\niface eth0 inet static\n  address 192.168.1.1\n  netmask 255.255.255.0\n  gateway 192.168.1.1\n\nauto eth1\niface eth1 inet dhcp\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eGet a dhcp server running on the LAN connection,\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e# /etc/dhcpcd.conf\ninterface eth0\nstatic ip_address=192.168.1.1\nstatic routers=192.168.1.1\nstatic domain_name_servers=8.8.8.8,8.8.4.4\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd then it's time to handle WAN -\u0026gt; LAN traffic and the reverse. Make sure you have packet forwarding enabled, and then setup the firewall to handle NAT and also keep out undesirable traffic.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003esysctl net.ipv4.ip_forward\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\niptables -F\niptables -X\niptables -t nat -F\niptables -t nat -X\niptables -A INPUT -i lo -j ACCEPT\niptables -A INPUT -i eth0 -j ACCEPT\niptables -A INPUT -p icmp --icmp-type any -j ACCEPT\niptables -A INPUT -p tcp ! --syn -m state --state NEW -j DROP\niptables -A INPUT -f -j DROP\niptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP\niptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP\niptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\niptables -t nat -A POSTROUTING -o ppp0 -j MASQUERADE\niptables -A INPUT -j DROP\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eHey presto, you have a working emergency router. In testing I found my fibre connection (80/20Mb) was slower than the traffic the RPi could push, so didn't notice any difference vs my normal router. (Although I did disable a bunch of automated stuff, so there was less contention on the WAN link.)\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eGiven a dead router, how do you get back online whilst you wait for the replacement part to arrive? Grab a Raspberry Pi 3 off the shelf, along with a USB to Ethernet adapter and hey presto the internet works again.\u003c/p\u003e\n\n\u003cp\u003eThis is with a fibre modem (FTTC), using PPPoE to connect out. Plug the modem (WAN) into the RPi's ethernet port, and plug the LAN switch into the USB adapter.\u003c/p\u003e\n\n\u003cp\u003eFirst thing is to get the WAN link working, get it talking PPPoE to the ISP. Usually this will be configured in \u003ccode\u003e/etc/ppp/pppoe.conf\u003c/code\u003e (depends on your linux distro). (That'll require your username/password for your ISP usually too.)\u003c/p\u003e\n\n\u003cp\u003eGet it up \u0026amp; connected, and make sure you can ping the internet from the RPi. Then it's time to get the LAN working. Give it a static IP in the range you want shared out.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e# /etc/network/interfaces\niface eth0 inet static\n  address 192.168.1.1\n  netmask 255.255.255.0\n  gateway 192.168.1.1\n\nauto eth1\niface eth1 inet dhcp\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eGet a dhcp server running on the LAN connection,\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e# /etc/dhcpcd.conf\ninterface eth0\nstatic ip_address=192.168.1.1\nstatic routers=192.168.1.1\nstatic domain_name_servers=8.8.8.8,8.8.4.4\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd then it's time to handle WAN -\u0026gt; LAN traffic and the reverse. Make sure you have packet forwarding enabled, and then setup the firewall to handle NAT and also keep out undesirable traffic.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003esysctl net.ipv4.ip_forward\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\niptables -F\niptables -X\niptables -t nat -F\niptables -t nat -X\niptables -A INPUT -i lo -j ACCEPT\niptables -A INPUT -i eth0 -j ACCEPT\niptables -A INPUT -p icmp --icmp-type any -j ACCEPT\niptables -A INPUT -p tcp ! --syn -m state --state NEW -j DROP\niptables -A INPUT -f -j DROP\niptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP\niptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP\niptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\niptables -t nat -A POSTROUTING -o ppp0 -j MASQUERADE\niptables -A INPUT -j DROP\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHey presto, you have a working emergency router. In testing I found my fibre connection (80/20Mb) was slower than the traffic the RPi could push, so didn't notice any difference vs my normal router. (Although I did disable a bunch of automated stuff, so there was less contention on the WAN link.)\u003c/p\u003e\n"
     },
     {
         "title" : "Finding cheap Microserver G8 memory",
@@ -63,7 +63,7 @@
         "date_modified" : "2017-05-09T18:23:58Z",
         "id" : "http://caiustheory.com/bash-script-setup/",
         "url" : "http://caiustheory.com/bash-script-setup/",
-        "content_html" : "\u003cp\u003eRecently I've been writing a bunch of bash scripts for various things. As some up-front safety checks I've taken to opening every script with the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"ch\"\u003e#!/usr/bin/env bash\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e[[\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$TRACE\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003eset\u003c/span\u003e -o xtrace\n\u003cspan class=\"nb\"\u003eset\u003c/span\u003e -o errexit\n\u003cspan class=\"nb\"\u003eset\u003c/span\u003e -o nounset\n\u003cspan class=\"nb\"\u003eset\u003c/span\u003e -o pipefail\n\u003cspan class=\"nb\"\u003eset\u003c/span\u003e -o noclobber\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOther things I'm also trying to be good about doing:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eusing \u003ccode\u003ereadonly\u003c/code\u003e when declaring variables which shouldn't be mutated\u003c/li\u003e\n\u003cli\u003eTrapping errors using an error function, and cleaning up anything temporary in there\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd some useful reading I ran across in my quest to level up bash-scripts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://redsymbol.net/articles/bash-exit-traps/\"\u003eBash Exit Traps\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://redsymbol.net/articles/unofficial-bash-strict-mode/\"\u003eUse the unofficial Bash Strict Mode\u003c/a\u003e (Yes, \u003cem\u003etwo\u003c/em\u003e posts from \u003ca href=\"http://redsymbol.net/\"\u003ehttp://redsymbol.net/\u003c/a\u003e. Well worth reading.)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://jvns.ca/blog/2017/03/26/bash-quirks/\"\u003eBash scripting quirks \u0026amp; safety tips\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://wiki.bash-hackers.org/\"\u003eBash hackers wiki\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"
+        "content_html" : "\u003cp\u003eRecently I've been writing a bunch of bash scripts for various things. As some up-front safety checks I've taken to opening every script with the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"cp\"\u003e#!/usr/bin/env bash\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[[\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$TRACE\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003eset\u003c/span\u003e -o xtrace\n\u003cspan class=\"nb\"\u003eset\u003c/span\u003e -o errexit\n\u003cspan class=\"nb\"\u003eset\u003c/span\u003e -o nounset\n\u003cspan class=\"nb\"\u003eset\u003c/span\u003e -o pipefail\n\u003cspan class=\"nb\"\u003eset\u003c/span\u003e -o noclobber\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOther things I'm also trying to be good about doing:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eusing \u003ccode\u003ereadonly\u003c/code\u003e when declaring variables which shouldn't be mutated\u003c/li\u003e\n\u003cli\u003eTrapping errors using an error function, and cleaning up anything temporary in there\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd some useful reading I ran across in my quest to level up bash-scripts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://redsymbol.net/articles/bash-exit-traps/\"\u003eBash Exit Traps\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://redsymbol.net/articles/unofficial-bash-strict-mode/\"\u003eUse the unofficial Bash Strict Mode\u003c/a\u003e (Yes, \u003cem\u003etwo\u003c/em\u003e posts from \u003ca href=\"http://redsymbol.net/\"\u003ehttp://redsymbol.net/\u003c/a\u003e. Well worth reading.)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://jvns.ca/blog/2017/03/26/bash-quirks/\"\u003eBash scripting quirks \u0026amp; safety tips\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://wiki.bash-hackers.org/\"\u003eBash hackers wiki\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"
     },
     {
         "title" : "BMW 328i crankshaft sensor issue",
@@ -98,7 +98,7 @@
         "date_modified" : "2016-08-10T11:39:00Z",
         "id" : "http://caiustheory.com/find-dependencies-blocking-rails-upgrades/",
         "url" : "http://caiustheory.com/find-dependencies-blocking-rails-upgrades/",
-        "content_html" : "\u003cp\u003eThe initial pain point when upgrading a rails app is figuring out which of your dependencies are blocking you upgrading the actual \u003ccode\u003erails\u003c/code\u003e gem (\u0026amp; immediate dependencies, actionpack, etc.). One way to start this is to update the rails dependency in your \u003ccode\u003eGemfile\u003c/code\u003e and run \u003ccode\u003ebundle update rails\u003c/code\u003e. Then check the error output \u003cem\u003e(it never works first timeâ€¦)\u003c/em\u003e to see which gems are blocking the upgrade. Repeat, rinse until it works.\u003c/p\u003e\n\n\u003cp\u003eI figured I'd cheat a little and eyeball the \u003ccode\u003eGemfile.lock\u003c/code\u003e to see which gems had an explicit dependency pinning rails (or actionpack, activejob, etc) to a version lower than I want to upgrade to, so I could get an idea of what needs to be upgraded without having to do them all one-by-one.\u003c/p\u003e\n\n\u003cp\u003eThen instead of eyeballing \u003ccode\u003eGemfile.lock\u003c/code\u003e, I wrote an awk script to pull out the interesting dependencies (ie, anything that depends on rails gems) so I just have to check which versions they depend on by hand.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-awk\" data-lang=\"awk\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e# Reads a Gemfile.lock and outputs all dependencies that depend on rails\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eBEGIN\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eparent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eparent_printed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003erails_gems\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;^(rail(s|ties)|action(mailer|pack|view)|active(job|model|record|support))$\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# We only want the specs from the GEM section\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eNR\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"sr\"\u003e/GEM/\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"kr\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003eexit\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# Skip parent gems we don\u0026#39;t care about (rails itselfâ€¦)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"sr\"\u003e/^ {4}[^ ]/\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"nx\"\u003erails_gems\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eparent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eparent_printed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"kr\"\u003enext\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# Parent gems that aren\u0026#39;t part of rails core\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# Store the name to be printed if we match below\u003c/span\u003e\n\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"sr\"\u003e/^ {4}[^ ]/\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eparent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eparent_printed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"kr\"\u003enext\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# If the nested gem (6 space prefix) matches rails-names and we have a parent value\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# set then we print them out - making sure to only print the parent once\u003c/span\u003e\n\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"sr\"\u003e/^ {6}[^ ]/\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"nx\"\u003erails_gems\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eparent\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eparent_printed\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eparent_printed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"kr\"\u003eprint\u003c/span\u003e \u003cspan class=\"nx\"\u003eparent\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kr\"\u003eprint\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eRun it against your \u003ccode\u003eGemfile.lock\u003c/code\u003e for the app you're upgrading:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003eawk -f rails5.awk Gemfile.lock\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd you'll get output like this, to run through and see if any of the dependencies are pinning to lower versions than you need.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e    coffee-rails (4.0.1)\n      railties (\u0026gt;= 4.0.0, \u0026lt; 5.0)\n    factory_girl (4.4.0)\n      activesupport (\u0026gt;= 3.0.0)\n    factory_girl_rails (4.4.1)\n      railties (\u0026gt;= 3.0.0)\n    globalid (0.3.7)\n      activesupport (\u0026gt;= 4.1.0)\n    google-api-client (0.8.6)\n      activesupport (\u0026gt;= 3.2)\n    jquery-rails (3.1.4)\n      railties (\u0026gt;= 3.0, \u0026lt; 5.0)\n    jquery-ui-rails (5.0.5)\n      railties (\u0026gt;= 3.2.16)\n    rails-deprecated_sanitizer (1.0.3)\n      activesupport (\u0026gt;= 4.2.0.alpha)\n    rails-dom-testing (1.0.7)\n      activesupport (\u0026gt;= 4.2.0.beta, \u0026lt; 5.0)\n    rspec-rails (3.4.2)\n      actionpack (\u0026gt;= 3.0, \u0026lt; 4.3)\n      activesupport (\u0026gt;= 3.0, \u0026lt; 4.3)\n      railties (\u0026gt;= 3.0, \u0026lt; 4.3)\n    sass-rails (4.0.5)\n      railties (\u0026gt;= 4.0.0, \u0026lt; 5.0)\n    sprockets-rails (2.3.3)\n      actionpack (\u0026gt;= 3.0)\n      activesupport (\u0026gt;= 3.0)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn this case, I'm trying to take this app to rails 5.0, so all the ones specifying \u003ccode\u003e\u0026lt; 5\u003c/code\u003e and \u003ccode\u003e\u0026lt; 4.3\u003c/code\u003e need upgrading beforehand.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eThe initial pain point when upgrading a rails app is figuring out which of your dependencies are blocking you upgrading the actual \u003ccode\u003erails\u003c/code\u003e gem (\u0026amp; immediate dependencies, actionpack, etc.). One way to start this is to update the rails dependency in your \u003ccode\u003eGemfile\u003c/code\u003e and run \u003ccode\u003ebundle update rails\u003c/code\u003e. Then check the error output \u003cem\u003e(it never works first timeâ€¦)\u003c/em\u003e to see which gems are blocking the upgrade. Repeat, rinse until it works.\u003c/p\u003e\n\n\u003cp\u003eI figured I'd cheat a little and eyeball the \u003ccode\u003eGemfile.lock\u003c/code\u003e to see which gems had an explicit dependency pinning rails (or actionpack, activejob, etc) to a version lower than I want to upgrade to, so I could get an idea of what needs to be upgraded without having to do them all one-by-one.\u003c/p\u003e\n\n\u003cp\u003eThen instead of eyeballing \u003ccode\u003eGemfile.lock\u003c/code\u003e, I wrote an awk script to pull out the interesting dependencies (ie, anything that depends on rails gems) so I just have to check which versions they depend on by hand.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-awk\" data-lang=\"awk\"\u003e\u003cspan class=\"c1\"\u003e# Reads a Gemfile.lock and outputs all dependencies that depend on rails\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eBEGIN\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eparent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eparent_printed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003erails_gems\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;^(rail(s|ties)|action(mailer|pack|view)|active(job|model|record|support))$\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# We only want the specs from the GEM section\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eNR\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"sr\"\u003e/GEM/\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"kr\"\u003enext\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003eexit\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# Skip parent gems we don\u0026#39;t care about (rails itselfâ€¦)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"sr\"\u003e/^ {4}[^ ]/\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"nx\"\u003erails_gems\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eparent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eparent_printed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"kr\"\u003enext\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# Parent gems that aren\u0026#39;t part of rails core\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# Store the name to be printed if we match below\u003c/span\u003e\n\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"sr\"\u003e/^ {4}[^ ]/\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eparent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eparent_printed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n  \u003cspan class=\"kr\"\u003enext\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# If the nested gem (6 space prefix) matches rails-names and we have a parent value\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# set then we print them out - making sure to only print the parent once\u003c/span\u003e\n\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"sr\"\u003e/^ {6}[^ ]/\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"nx\"\u003erails_gems\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eparent\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eparent_printed\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eparent_printed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"kr\"\u003eprint\u003c/span\u003e \u003cspan class=\"nx\"\u003eparent\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kr\"\u003eprint\u003c/span\u003e \u003cspan class=\"o\"\u003e$\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRun it against your \u003ccode\u003eGemfile.lock\u003c/code\u003e for the app you're upgrading:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eawk -f rails5.awk Gemfile.lock\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd you'll get output like this, to run through and see if any of the dependencies are pinning to lower versions than you need.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e    coffee-rails (4.0.1)\n      railties (\u0026gt;= 4.0.0, \u0026lt; 5.0)\n    factory_girl (4.4.0)\n      activesupport (\u0026gt;= 3.0.0)\n    factory_girl_rails (4.4.1)\n      railties (\u0026gt;= 3.0.0)\n    globalid (0.3.7)\n      activesupport (\u0026gt;= 4.1.0)\n    google-api-client (0.8.6)\n      activesupport (\u0026gt;= 3.2)\n    jquery-rails (3.1.4)\n      railties (\u0026gt;= 3.0, \u0026lt; 5.0)\n    jquery-ui-rails (5.0.5)\n      railties (\u0026gt;= 3.2.16)\n    rails-deprecated_sanitizer (1.0.3)\n      activesupport (\u0026gt;= 4.2.0.alpha)\n    rails-dom-testing (1.0.7)\n      activesupport (\u0026gt;= 4.2.0.beta, \u0026lt; 5.0)\n    rspec-rails (3.4.2)\n      actionpack (\u0026gt;= 3.0, \u0026lt; 4.3)\n      activesupport (\u0026gt;= 3.0, \u0026lt; 4.3)\n      railties (\u0026gt;= 3.0, \u0026lt; 4.3)\n    sass-rails (4.0.5)\n      railties (\u0026gt;= 4.0.0, \u0026lt; 5.0)\n    sprockets-rails (2.3.3)\n      actionpack (\u0026gt;= 3.0)\n      activesupport (\u0026gt;= 3.0)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn this case, I'm trying to take this app to rails 5.0, so all the ones specifying \u003ccode\u003e\u0026lt; 5\u003c/code\u003e and \u003ccode\u003e\u0026lt; 4.3\u003c/code\u003e need upgrading beforehand.\u003c/p\u003e\n"
     },
     {
         "title" : "SmartOS Recovery mount /usbkey",
@@ -106,7 +106,7 @@
         "date_modified" : "2016-07-25T17:59:00Z",
         "id" : "http://caiustheory.com/smartos-recovery-mount-usbkey/",
         "url" : "http://caiustheory.com/smartos-recovery-mount-usbkey/",
-        "content_html" : "\u003cp\u003eRecently I managed to hose a box in a perfectly self-inflicted storm of idiocy. Imagine a SmartOS server with the following issues:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRoot password not noted down anywhere\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e/usbkey/config\u003c/code\u003e edited badly, meaning the network settings are wrong\u003c/li\u003e\n\u003cli\u003eRebooting the server to apply some other settings\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNeedless to say, this caused a tiny issue in the server doing what it's supposed to. Luckily I had access to a KVM remote console for the box and the following worked.\u003c/p\u003e\n\n\u003cp\u003eI brought the machine up, choosing the second option for recovery at the grub menu. Waited for a login prompt, then logged in with \u003ccode\u003eroot\u003c/code\u003e/\u003ccode\u003eroot\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eRealised quite quickly that \u003ccode\u003e/usbkey\u003c/code\u003e must be persisted on the \u003ccode\u003ezones\u003c/code\u003e zfs pool otherwise the configuration would be lost after shutdown, so imported the correct pool, created a directory to mount into and then mounted the zfs share.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003ezpool import zones\nmkdir /usbkey\nmount -F zfs zones/usbkey /usbkey\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n"
+        "content_html" : "\u003cp\u003eRecently I managed to hose a box in a perfectly self-inflicted storm of idiocy. Imagine a SmartOS server with the following issues:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRoot password not noted down anywhere\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e/usbkey/config\u003c/code\u003e edited badly, meaning the network settings are wrong\u003c/li\u003e\n\u003cli\u003eRebooting the server to apply some other settings\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNeedless to say, this caused a tiny issue in the server doing what it's supposed to. Luckily I had access to a KVM remote console for the box and the following worked.\u003c/p\u003e\n\n\u003cp\u003eI brought the machine up, choosing the second option for recovery at the grub menu. Waited for a login prompt, then logged in with \u003ccode\u003eroot\u003c/code\u003e/\u003ccode\u003eroot\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eRealised quite quickly that \u003ccode\u003e/usbkey\u003c/code\u003e must be persisted on the \u003ccode\u003ezones\u003c/code\u003e zfs pool otherwise the configuration would be lost after shutdown, so imported the correct pool, created a directory to mount into and then mounted the zfs share.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ezpool import zones\nmkdir /usbkey\nmount -F zfs zones/usbkey /usbkey\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e"
     },
     {
         "title" : "Much Wenlock Triathlon 2016",
@@ -125,7 +125,7 @@
         "date_modified" : "2016-07-05T10:00:00Z",
         "id" : "http://caiustheory.com/setup-dhcp-interface-in-freebsd/",
         "url" : "http://caiustheory.com/setup-dhcp-interface-in-freebsd/",
-        "content_html" : "\u003cp\u003eGiven a FreeBSD instance without a configured network interface that you'd like to configure, first check what the name of the interface you want to configure is with \u003ccode\u003eifconfig\u003c/code\u003e. (Mine is \u003ccode\u003eem0\u003c/code\u003e in this instance.)\u003c/p\u003e\n\n\u003cp\u003eThen we need to add the configuration telling services that we want to use DHCP for this interface, and setting up our default router (use your IP, not mine!) too:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003ecat \u0026gt;\u0026gt; rc.conf \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;CONF\u003c/span\u003e\n\u003cspan class=\"s\"\u003eifconfig_em0=\u0026quot;DHCP\u0026quot;\u003c/span\u003e\n\u003cspan class=\"s\"\u003edefault_router=\u0026quot;192.168.1.1\u0026quot;\u003c/span\u003e\n\u003cspan class=\"s\"\u003eCONF\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd then we need to start \u003ccode\u003edhclient\u003c/code\u003e on the given interface:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003eservice dhclient start em0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eHey presto, you should see dhclient finding a DHCP server and being handed an IP address for \u003ccode\u003eem0\u003c/code\u003e.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eGiven a FreeBSD instance without a configured network interface that you'd like to configure, first check what the name of the interface you want to configure is with \u003ccode\u003eifconfig\u003c/code\u003e. (Mine is \u003ccode\u003eem0\u003c/code\u003e in this instance.)\u003c/p\u003e\n\n\u003cp\u003eThen we need to add the configuration telling services that we want to use DHCP for this interface, and setting up our default router (use your IP, not mine!) too:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ecat \u0026gt;\u0026gt; rc.conf \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;CONF\n\u003c/span\u003e\u003cspan class=\"s\"\u003eifconfig_em0=\u0026#34;DHCP\u0026#34;\n\u003c/span\u003e\u003cspan class=\"s\"\u003edefault_router=\u0026#34;192.168.1.1\u0026#34;\n\u003c/span\u003e\u003cspan class=\"s\"\u003eCONF\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd then we need to start \u003ccode\u003edhclient\u003c/code\u003e on the given interface:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eservice dhclient start em0\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHey presto, you should see dhclient finding a DHCP server and being handed an IP address for \u003ccode\u003eem0\u003c/code\u003e.\u003c/p\u003e\n"
     },
     {
         "title" : "SoundCloud RSS Feeds",
@@ -147,7 +147,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eUsing \u003ca href=\"http://man7.org/linux/man-pages/man3/exec.3.html\"\u003eexec(3)\u003c/a\u003e from Go is simple enough, once you figure out to look in the \u003ca href=\"http://golang.org/pkg/syscall/\"\u003esyscall\u003c/a\u003e package and how to pass arguments to the new command.\u003c/p\u003e\n\n\u003cp\u003eAs a simple example, I'm going to exec \u003ccode\u003e/bin/echo\u003c/code\u003e with a hardcoded string from the go binary. \u003cem\u003eThe program built here is in the \u003ca href=\"https://github.com/caius/gecho\"\u003egecho\u003c/a\u003e (Gecko, geddit?) git repo, which each stage as a commit.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eIn our main function lets setup some variables we're going to need for arguments to \u003ccode\u003esyscall.Exec\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecmdPath\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;/bin/echo\u0026quot;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecmdArgs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Hello\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;World\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecmdEnv\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e    \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cem\u003e(We could use \u003ccode\u003eos.Environ()\u003c/code\u003e for \u003ccode\u003ecmdEnv\u003c/code\u003e to take the ENV from the go binary, but we don't require anything from the environmnt here so it doesn't matter that we aren't.)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eNow we have the arguments for \u003ccode\u003esyscall.Exec\u003c/code\u003e, lets add that in and see what happens:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003esyscall\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eExec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecmdPath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecmdArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecmdEnv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd running the file (\u003ccode\u003ego run gecho.go\u003c/code\u003e compiles \u0026amp; runs for us) gives the following output:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eWorld\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eErr, say what now? Where's \u0026quot;Hello\u0026quot; gone?!\u003c/p\u003e\n\n\u003cp\u003eTook me a while to figure this out when I originally ran into this. The answer is staring us right in the face if we go look at the \u003ca href=\"http://golang.org/pkg/syscall/#Exec\"\u003esyscall.Exec docs\u003c/a\u003e. Lets have a look at the function signature, argument names and all:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eExec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eargv0\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eargv\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eenvv\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eHmm. The first argument is \u003ccode\u003eargv0\u003c/code\u003e (and a string), rather than \u003ccode\u003ebinaryPath\u003c/code\u003e or something similar. The second argument is then \u003ccode\u003eargv\u003c/code\u003e and an array of strings.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eAt this point I remember that the first element of \u003ccode\u003eargv\u003c/code\u003e in other runtimes is the name of the binary or command invoked - \u003ccode\u003e$0\u003c/code\u003e in a bash script is the name of the script for example.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThe answer is simple. \u003ccode\u003ecmdArgs\u003c/code\u003e in our script should have \u003ccode\u003e/bin/echo\u003c/code\u003e as the first element, and then we pass \u003ccode\u003ecmdArgs[0], cmdArgs\u003c/code\u003e as the first two arguments to \u003ccode\u003esyscall.Exec\u003c/code\u003e. Lets give that a go:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecmdArgs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;/bin/echo\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;Hello\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;World\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecmdEnv\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003esyscall\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eExec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecmdArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"nx\"\u003ecmdArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecmdEnv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd running it (\u003ccode\u003ego run gecho.go\u003c/code\u003e remember) gives the expected output:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eHello World\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eExcellent. Now I just need to remember \u003ccode\u003eargv\u003c/code\u003e contains the command name as \u003ccode\u003eargv[0]\u003c/code\u003e and we're golden.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThere is also the \u003ca href=\"http://golang.org/pkg/os/exec/\"\u003eos/exec\u003c/a\u003e package in the stdlib, which is intended for executing other binaries as child processes from what I can tell. Tellingly, when you create a \u003ccode\u003eexec.Cmd\u003c/code\u003e struct with \u003ccode\u003eexec.Command()\u003c/code\u003e you give it the name as first argument, and args as following arguments. Then it has the following snippet in the documentation:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe returned Cmd's Args field is constructed from the command name followed by the elements of arg, so arg should not include the command name itself. For example, \u003ccode\u003eCommand(\u0026quot;echo\u0026quot;, \u0026quot;hello\u0026quot;)\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eSo \u003ccode\u003ecmd := exec.Command(\u0026quot;echo\u0026quot;, \u0026quot;hello\u0026quot;); cmd.Args\u003c/code\u003e would return \u003ccode\u003e[]string{\u0026quot;echo\u0026quot;, \u0026quot;hello\u0026quot;}\u003c/code\u003e - which is recognisable as what we have to pass to \u003ccode\u003esyscall.Exec\u003c/code\u003e!\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eUsing \u003ca href=\"http://man7.org/linux/man-pages/man3/exec.3.html\"\u003eexec(3)\u003c/a\u003e from Go is simple enough, once you figure out to look in the \u003ca href=\"http://golang.org/pkg/syscall/\"\u003esyscall\u003c/a\u003e package and how to pass arguments to the new command.\u003c/p\u003e\n\n\u003cp\u003eAs a simple example, I'm going to exec \u003ccode\u003e/bin/echo\u003c/code\u003e with a hardcoded string from the go binary. \u003cem\u003eThe program built here is in the \u003ca href=\"https://github.com/caius/gecho\"\u003egecho\u003c/a\u003e (Gecko, geddit?) git repo, which each stage as a commit.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eIn our main function lets setup some variables we're going to need for arguments to \u003ccode\u003esyscall.Exec\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecmdPath\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;/bin/echo\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecmdArgs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;World\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecmdEnv\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e    \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(We could use \u003ccode\u003eos.Environ()\u003c/code\u003e for \u003ccode\u003ecmdEnv\u003c/code\u003e to take the ENV from the go binary, but we don't require anything from the environmnt here so it doesn't matter that we aren't.)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eNow we have the arguments for \u003ccode\u003esyscall.Exec\u003c/code\u003e, lets add that in and see what happens:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003esyscall\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eExec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecmdPath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecmdArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecmdEnv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd running the file (\u003ccode\u003ego run gecho.go\u003c/code\u003e compiles \u0026amp; runs for us) gives the following output:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eWorld\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eErr, say what now? Where's \u0026quot;Hello\u0026quot; gone?!\u003c/p\u003e\n\n\u003cp\u003eTook me a while to figure this out when I originally ran into this. The answer is staring us right in the face if we go look at the \u003ca href=\"http://golang.org/pkg/syscall/#Exec\"\u003esyscall.Exec docs\u003c/a\u003e. Lets have a look at the function signature, argument names and all:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003eExec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eargv0\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eargv\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eenvv\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHmm. The first argument is \u003ccode\u003eargv0\u003c/code\u003e (and a string), rather than \u003ccode\u003ebinaryPath\u003c/code\u003e or something similar. The second argument is then \u003ccode\u003eargv\u003c/code\u003e and an array of strings.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eAt this point I remember that the first element of \u003ccode\u003eargv\u003c/code\u003e in other runtimes is the name of the binary or command invoked - \u003ccode\u003e$0\u003c/code\u003e in a bash script is the name of the script for example.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThe answer is simple. \u003ccode\u003ecmdArgs\u003c/code\u003e in our script should have \u003ccode\u003e/bin/echo\u003c/code\u003e as the first element, and then we pass \u003ccode\u003ecmdArgs[0], cmdArgs\u003c/code\u003e as the first two arguments to \u003ccode\u003esyscall.Exec\u003c/code\u003e. Lets give that a go:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecmdArgs\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;/bin/echo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;World\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecmdEnv\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003esyscall\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eExec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecmdArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"nx\"\u003ecmdArgs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecmdEnv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd running it (\u003ccode\u003ego run gecho.go\u003c/code\u003e remember) gives the expected output:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eHello World\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eExcellent. Now I just need to remember \u003ccode\u003eargv\u003c/code\u003e contains the command name as \u003ccode\u003eargv[0]\u003c/code\u003e and we're golden.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThere is also the \u003ca href=\"http://golang.org/pkg/os/exec/\"\u003eos/exec\u003c/a\u003e package in the stdlib, which is intended for executing other binaries as child processes from what I can tell. Tellingly, when you create a \u003ccode\u003eexec.Cmd\u003c/code\u003e struct with \u003ccode\u003eexec.Command()\u003c/code\u003e you give it the name as first argument, and args as following arguments. Then it has the following snippet in the documentation:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe returned Cmd's Args field is constructed from the command name followed by the elements of arg, so arg should not include the command name itself. For example, \u003ccode\u003eCommand(\u0026quot;echo\u0026quot;, \u0026quot;hello\u0026quot;)\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eSo \u003ccode\u003ecmd := exec.Command(\u0026quot;echo\u0026quot;, \u0026quot;hello\u0026quot;); cmd.Args\u003c/code\u003e would return \u003ccode\u003e[]string{\u0026quot;echo\u0026quot;, \u0026quot;hello\u0026quot;}\u003c/code\u003e - which is recognisable as what we have to pass to \u003ccode\u003esyscall.Exec\u003c/code\u003e!\u003c/p\u003e\n"
     },
     {
         "title" : "Changing hostname in SmartOS Zone",
@@ -158,7 +158,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eGiven a non-global zone in SmartOS that we want to change the hostname of, we need to make sure to edit the following files to change it:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e/etc/hosts\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e/etc/nodename\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA quick way to do that is with \u003ccode\u003esed\u003c/code\u003e \u003cem\u003e(renaming \u0026quot;fred\u0026quot; to \u0026quot;beth\u0026quot; here)\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003esed -e \u003cspan class=\"s1\"\u003e\u0026#39;s/fred/beth/g\u0026#39;\u003c/span\u003e -i /etc/hosts /etc/nodename\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThen shutdown \u0026amp; start the zone \u003cem\u003e(from my testing a restart doesn't apply it)\u003c/em\u003e.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eGiven a non-global zone in SmartOS that we want to change the hostname of, we need to make sure to edit the following files to change it:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e/etc/hosts\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e/etc/nodename\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA quick way to do that is with \u003ccode\u003esed\u003c/code\u003e \u003cem\u003e(renaming \u0026quot;fred\u0026quot; to \u0026quot;beth\u0026quot; here)\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003esed -e \u003cspan class=\"s1\"\u003e\u0026#39;s/fred/beth/g\u0026#39;\u003c/span\u003e -i /etc/hosts /etc/nodename\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen shutdown \u0026amp; start the zone \u003cem\u003e(from my testing a restart doesn't apply it)\u003c/em\u003e.\u003c/p\u003e\n"
     },
     {
         "title" : "Install Rubinius on OS X",
@@ -256,7 +256,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eOne piece of a larger puzzle I'm trying to solve currently, was how to add a given URL to my Apple \u0026quot;\u003ca href=\"http://www.apple.com/uk/safari/#icloud\"\u003eReading List\u003c/a\u003e\u0026quot; that is stored in iCloud and synced across all my OS X and iOS devices. More specifically, I wanted to add URLs to the list from my mac running Mavericks (10.9). I had a quick look at the Cocoa APIs and couldn't see anything in OS X to do this. (iOS has an API to do it from Cocoa-land it seems though.)\u003c/p\u003e\n\n\u003cp\u003eI figured \u003ca href=\"http://www.apple.com/uk/safari/\"\u003eSafari.app\u003c/a\u003e was the key to getting this done on OS X, given it has the ability itself to add the current page to the reading list, either via a keyboard command, a menu item, or a button in the address bar. One quick mental leap later, and I was wondering if the engineers at Apple had been nice enough to expose that via Applescript for me to take advantage of.\u003c/p\u003e\n\n\u003cp\u003eOne quick stop in \u0026quot;Script Editor.app\u0026quot; later, and I had the Applescript dictionary open for Safari.app. Lo and behold, there is rather handily an Applescript command called \u0026quot;add reading list item\u0026quot;, which does \u003cstrong\u003eexactly\u003c/strong\u003e what I want. It has a few different options you can call it with, depending on whether you want Safari to go populate the title \u0026amp; preview text, or if you want to specify it yourself at save-time.\u003c/p\u003e\n\n\u003cp\u003eAs I want to be able to call this from multiple runtimes, I've chosen to save it as an executable, which leans on \u003ca href=\"https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/osascript.1.html\"\u003e\u003ccode\u003eosascript\u003c/code\u003e\u003c/a\u003e to run the actual Applescript. And here it is:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-applescript\" data-lang=\"applescript\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"c\"\u003e#!/usr/bin/env osascript\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eon\u003c/span\u003e \u003cspan class=\"nb\"\u003erun\u003c/span\u003e \u003cspan class=\"nv\"\u003eargv\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ecount\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nv\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n        \u003cspan class=\"k\"\u003etell\u003c/span\u003e \u003cspan class=\"nv\"\u003eapp\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Safari\u0026quot;\u003c/span\u003e \u003cspan class=\"k\"\u003eto\u003c/span\u003e \u003cspan class=\"nv\"\u003eadd\u003c/span\u003e \u003cspan class=\"nv\"\u003ereading\u003c/span\u003e \u003cspan class=\"nv\"\u003elist\u003c/span\u003e \u003cspan class=\"nb\"\u003eitem\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eitem\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nv\"\u003eargv\u003c/span\u003e \u003cspan class=\"k\"\u003eas \u003c/span\u003e\u003cspan class=\"nc\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"nb\"\u003erun\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eSave it as whatever you want (eg. \u003ccode\u003eadd_to_reading_list\u003c/code\u003e), make it executable (\u003ccode\u003echmod +x add_to_reading_list\u003c/code\u003e), and then run it with the URL you want saving as the first argument.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ add_to_reading_list \u0026quot;http://caius.name/\u0026quot;\n$ add_to_reading_list \u0026quot;http://google.com/\u0026quot;\n# â€¦ etc â€¦\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cem\u003e(Adding support for specifying preview text and title is left as an exercise for the reader!)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eHave fun reading later!\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eOne piece of a larger puzzle I'm trying to solve currently, was how to add a given URL to my Apple \u0026quot;\u003ca href=\"http://www.apple.com/uk/safari/#icloud\"\u003eReading List\u003c/a\u003e\u0026quot; that is stored in iCloud and synced across all my OS X and iOS devices. More specifically, I wanted to add URLs to the list from my mac running Mavericks (10.9). I had a quick look at the Cocoa APIs and couldn't see anything in OS X to do this. (iOS has an API to do it from Cocoa-land it seems though.)\u003c/p\u003e\n\n\u003cp\u003eI figured \u003ca href=\"http://www.apple.com/uk/safari/\"\u003eSafari.app\u003c/a\u003e was the key to getting this done on OS X, given it has the ability itself to add the current page to the reading list, either via a keyboard command, a menu item, or a button in the address bar. One quick mental leap later, and I was wondering if the engineers at Apple had been nice enough to expose that via Applescript for me to take advantage of.\u003c/p\u003e\n\n\u003cp\u003eOne quick stop in \u0026quot;Script Editor.app\u0026quot; later, and I had the Applescript dictionary open for Safari.app. Lo and behold, there is rather handily an Applescript command called \u0026quot;add reading list item\u0026quot;, which does \u003cstrong\u003eexactly\u003c/strong\u003e what I want. It has a few different options you can call it with, depending on whether you want Safari to go populate the title \u0026amp; preview text, or if you want to specify it yourself at save-time.\u003c/p\u003e\n\n\u003cp\u003eAs I want to be able to call this from multiple runtimes, I've chosen to save it as an executable, which leans on \u003ca href=\"https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/osascript.1.html\"\u003e\u003ccode\u003eosascript\u003c/code\u003e\u003c/a\u003e to run the actual Applescript. And here it is:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-applescript\" data-lang=\"applescript\"\u003e\u003cspan class=\"c\"\u003e#!/usr/bin/env osascript\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eon\u003c/span\u003e \u003cspan class=\"nb\"\u003erun\u003c/span\u003e \u003cspan class=\"nv\"\u003eargv\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ecount\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nv\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n        \u003cspan class=\"k\"\u003etell\u003c/span\u003e \u003cspan class=\"nv\"\u003eapp\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Safari\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eto\u003c/span\u003e \u003cspan class=\"nv\"\u003eadd\u003c/span\u003e \u003cspan class=\"nv\"\u003ereading\u003c/span\u003e \u003cspan class=\"nv\"\u003elist\u003c/span\u003e \u003cspan class=\"nb\"\u003eitem\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eitem\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nv\"\u003eargv\u003c/span\u003e \u003cspan class=\"k\"\u003eas \u003c/span\u003e\u003cspan class=\"nc\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"nb\"\u003erun\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSave it as whatever you want (eg. \u003ccode\u003eadd_to_reading_list\u003c/code\u003e), make it executable (\u003ccode\u003echmod +x add_to_reading_list\u003c/code\u003e), and then run it with the URL you want saving as the first argument.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ add_to_reading_list \u0026quot;http://caius.name/\u0026quot;\n$ add_to_reading_list \u0026quot;http://google.com/\u0026quot;\n# â€¦ etc â€¦\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cem\u003e(Adding support for specifying preview text and title is left as an exercise for the reader!)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eHave fun reading later!\u003c/p\u003e\n"
     },
     {
         "title" : "North West Triathlon 2013",
@@ -308,7 +308,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\n\n\u003cp\u003eHere be hax. Don't \u003cstrong\u003eever\u003c/strong\u003e do these. ;-)\u003c/p\u003e\n\n\u003ch2 id=\"reduce-local-variables-with-instance-eval\"\u003eReduce local variables with instance_eval\u003c/h2\u003e\n\n\u003cp\u003eSometimes (usually in a one-liner) I want to do some work with a value without assigning it to a variable. Chucking an \u003ccode\u003e#instance_eval\u003c/code\u003e call in there will set \u003ccode\u003eself\u003c/code\u003e to the value, which saves having to assign it to a local value. Pretty much only used by me in one-off scripts or cli commands.\u003c/p\u003e\n\n\u003ch4 id=\"good\"\u003eGood\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003estart_date\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eend_date\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;24 Dec 2011\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;23 Jan 2013\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"no\"\u003eDate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003estart_date\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e to \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003eend_date\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e is \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eend_date\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003estart_date\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_i\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e days\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch4 id=\"bad\"\u003eBad\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;24 Dec 2011\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;23 Jan 2013\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"no\"\u003eDate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einstance_eval\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e to \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e is \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_i\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e days\u0026quot;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eSee, way less code! \u003cem\u003ecough, cough\u003c/em\u003e\u003c/p\u003e\n\n\u003ch3 id=\"bonus-usage-misdirection\"\u003eBonus usage: Misdirection\u003c/h3\u003e\n\n\u003cp\u003eI also dropped some instance_eval on our campfire bot at \u003ca href=\"https://emberads.com/\"\u003eEmberAds\u003c/a\u003e to always blame one person, but without the code reading as such.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"sx\"\u003e%w{Dom Mel Caius CBetta Baz}\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esample\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einstance_eval\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026quot;(4V5A8F5T=\u0026amp;$`\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eunpack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;u\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThat does not return one of the array elements as you might think it does from quickly scanning the codeâ€¦\u003c/p\u003e\n\n\u003ch2 id=\"set-method-local-variables-in-default-arguments\"\u003eSet method-local variables in default arguments\u003c/h2\u003e\n\n\u003cp\u003eYou have a method and it takes one argument, which has a default value of \u003ccode\u003enil\u003c/code\u003e specified. You then run into the situation where you need to know if \u003ccode\u003enil\u003c/code\u003e was passed to the method, or if you're getting the default value of \u003ccode\u003enil\u003c/code\u003e. You could change the default value to something you choose to be the \u0026quot;default value\u0026quot; and unlikely to be passed from elsewhere as the argument's value, and reset the parameter to \u003ccode\u003enil\u003c/code\u003e after checking it, like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eoutput\u003c/span\u003e \u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"ss\"\u003e:default_value\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:default_value\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;caius\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003edefault\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"s2\"\u003e\u0026quot;name: \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einspect\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e -- default: \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003edefault\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einspect\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;name: \\\u0026quot;caius\\\u0026quot; -- default: true\u0026quot;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;fred\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;name: \\\u0026quot;fred\\\u0026quot; -- default: nil\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThat's quite a lot of code added to the method just to find out if we passed a default value or not. And if we forget to reset the value when it's \u003ccode\u003e:default_value\u003c/code\u003e then we end up leaking that into whatever the method does with that value. We also have the problem that one day the program \u003cem\u003ecould\u003c/em\u003e possibly send that \u0026quot;default value\u0026quot; we've chosen as the actual parameter, and we'd blindly change it thinking it was set as the default value, not the passed argument.\u003c/p\u003e\n\n\u003cp\u003eInstead we could (ab)use the power of ruby, and have ruby decide to set \u003ccode\u003edefault = true\u003c/code\u003e for us when, and only when, the variable is set \u003cem\u003eto\u003c/em\u003e the default value.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eoutput\u003c/span\u003e \u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003edefault\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;caius\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026quot;name: \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einspect\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e -- default: \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003edefault\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einspect\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;name: \\\u0026quot;caius\\\u0026quot; -- default: true\u0026quot;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;fred\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;name: \\\u0026quot;fred\\\u0026quot; -- default: nil\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAs you can see, the output is identical. Yet we have no extra code \u003cem\u003einside\u003c/em\u003e the method to figure out if we were given the default value or not. And as a bonus to that, we no longer have to check for a specific value being passed and presume that is actually the default, and not one passed by the program elsewhere.\u003c/p\u003e\n\n\u003cp\u003eI posted this one in \u003ca href=\"https://gist.github.com/1528785\"\u003ea gist\u003c/a\u003e a while back (to show \u003ca href=\"http://avdi.org/\"\u003eAvdi\u003c/a\u003e it looks like), and people came up with some more insane things to do with it, including \u003ca href=\"https://gist.github.com/1528785#comment-71861\"\u003ereturning early\u003c/a\u003e, \u003ca href=\"https://gist.github.com/1528785#comment-71862\"\u003eraising errors\u003c/a\u003e or even \u003ca href=\"https://gist.github.com/1528785#comment-71876\"\u003eredefining the current method\u003c/a\u003e, all from the argument list! I'd suggest going to read them, it's a mixture of OMG HAHA and OMFG NO WAY WHYY?!?!.\u003c/p\u003e\n\n\u003ch3 id=\"don-t-do-this\"\u003eDon't do this.\u003c/h3\u003e\n\n\u003cp\u003eDon't do the above. No really, don't do them. Unless you're writing a one-off thing. But seriously, don't do them. :-D\u003c/p\u003e\n"
+        "content_html" : "\n\n\u003cp\u003eHere be hax. Don't \u003cstrong\u003eever\u003c/strong\u003e do these. ;-)\u003c/p\u003e\n\n\u003ch2 id=\"reduce-local-variables-with-instance-eval\"\u003eReduce local variables with instance_eval\u003c/h2\u003e\n\n\u003cp\u003eSometimes (usually in a one-liner) I want to do some work with a value without assigning it to a variable. Chucking an \u003ccode\u003e#instance_eval\u003c/code\u003e call in there will set \u003ccode\u003eself\u003c/code\u003e to the value, which saves having to assign it to a local value. Pretty much only used by me in one-off scripts or cli commands.\u003c/p\u003e\n\n\u003ch4 id=\"good\"\u003eGood\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003estart_date\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eend_date\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;24 Dec 2011\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;23 Jan 2013\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"no\"\u003eDate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003estart_date\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e to \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003eend_date\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e is \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eend_date\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003estart_date\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_i\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e days\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4 id=\"bad\"\u003eBad\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;24 Dec 2011\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;23 Jan 2013\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"no\"\u003eDate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einstance_eval\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e to \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e is \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elast\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_i\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e days\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSee, way less code! \u003cem\u003ecough, cough\u003c/em\u003e\u003c/p\u003e\n\n\u003ch3 id=\"bonus-usage-misdirection\"\u003eBonus usage: Misdirection\u003c/h3\u003e\n\n\u003cp\u003eI also dropped some instance_eval on our campfire bot at \u003ca href=\"https://emberads.com/\"\u003eEmberAds\u003c/a\u003e to always blame one person, but without the code reading as such.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"sx\"\u003e%w{Dom Mel Caius CBetta Baz}\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esample\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einstance_eval\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026#34;(4V5A8F5T=\u0026amp;$`\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eunpack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;u\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat does not return one of the array elements as you might think it does from quickly scanning the codeâ€¦\u003c/p\u003e\n\n\u003ch2 id=\"set-method-local-variables-in-default-arguments\"\u003eSet method-local variables in default arguments\u003c/h2\u003e\n\n\u003cp\u003eYou have a method and it takes one argument, which has a default value of \u003ccode\u003enil\u003c/code\u003e specified. You then run into the situation where you need to know if \u003ccode\u003enil\u003c/code\u003e was passed to the method, or if you're getting the default value of \u003ccode\u003enil\u003c/code\u003e. You could change the default value to something you choose to be the \u0026quot;default value\u0026quot; and unlikely to be passed from elsewhere as the argument's value, and reset the parameter to \u003ccode\u003enil\u003c/code\u003e after checking it, like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003eoutput\u003c/span\u003e \u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"ss\"\u003e:default_value\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:default_value\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;caius\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003edefault\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"s2\"\u003e\u0026#34;name: \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einspect\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e -- default: \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003edefault\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einspect\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;name: \\\u0026#34;caius\\\u0026#34; -- default: true\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;fred\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;name: \\\u0026#34;fred\\\u0026#34; -- default: nil\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat's quite a lot of code added to the method just to find out if we passed a default value or not. And if we forget to reset the value when it's \u003ccode\u003e:default_value\u003c/code\u003e then we end up leaking that into whatever the method does with that value. We also have the problem that one day the program \u003cem\u003ecould\u003c/em\u003e possibly send that \u0026quot;default value\u0026quot; we've chosen as the actual parameter, and we'd blindly change it thinking it was set as the default value, not the passed argument.\u003c/p\u003e\n\n\u003cp\u003eInstead we could (ab)use the power of ruby, and have ruby decide to set \u003ccode\u003edefault = true\u003c/code\u003e for us when, and only when, the variable is set \u003cem\u003eto\u003c/em\u003e the default value.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003eoutput\u003c/span\u003e \u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003edefault\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;caius\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026#34;name: \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einspect\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e -- default: \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003edefault\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einspect\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;name: \\\u0026#34;caius\\\u0026#34; -- default: true\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eoutput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;fred\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;name: \\\u0026#34;fred\\\u0026#34; -- default: nil\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs you can see, the output is identical. Yet we have no extra code \u003cem\u003einside\u003c/em\u003e the method to figure out if we were given the default value or not. And as a bonus to that, we no longer have to check for a specific value being passed and presume that is actually the default, and not one passed by the program elsewhere.\u003c/p\u003e\n\n\u003cp\u003eI posted this one in \u003ca href=\"https://gist.github.com/1528785\"\u003ea gist\u003c/a\u003e a while back (to show \u003ca href=\"http://avdi.org/\"\u003eAvdi\u003c/a\u003e it looks like), and people came up with some more insane things to do with it, including \u003ca href=\"https://gist.github.com/1528785#comment-71861\"\u003ereturning early\u003c/a\u003e, \u003ca href=\"https://gist.github.com/1528785#comment-71862\"\u003eraising errors\u003c/a\u003e or even \u003ca href=\"https://gist.github.com/1528785#comment-71876\"\u003eredefining the current method\u003c/a\u003e, all from the argument list! I'd suggest going to read them, it's a mixture of OMG HAHA and OMFG NO WAY WHYY?!?!.\u003c/p\u003e\n\n\u003ch3 id=\"don-t-do-this\"\u003eDon't do this.\u003c/h3\u003e\n\n\u003cp\u003eDon't do the above. No really, don't do them. Unless you're writing a one-off thing. But seriously, don't do them. :-D\u003c/p\u003e\n"
     },
     {
         "title" : "Some Small Refactorings in Ruby",
@@ -319,7 +319,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\n\n\u003cp\u003eHere's a few things I refactor as I write code down initially. Not entirely convinced it's strictly refactoring, but it's how I amend from one pattern I see in a line or three of code into a different structure that I feel achieves the same result with cleaner or more concise code.\u003c/p\u003e\n\n\u003ch3 id=\"multiple-equality-comparisons\"\u003eMultiple equality comparisons\u003c/h3\u003e\n\n\u003cp\u003eTesting the equality of an object against another is fairly simple, just do \u003ccode\u003efoo == \u0026quot;bar\u0026quot;\u003c/code\u003e. However, I usually try to test against multiple objects in a slightly different way. Your first thought might be that the easiest way is just to chain a series of \u003ccode\u003e==\u003c/code\u003e with the OR (\u003ccode\u003e||\u003c/code\u003e) operator.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;bar\u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;baz\u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:sed\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eI much prefer to flip it around, think of the objects I'm testing against as a collection (\u003ccode\u003eArray\u003c/code\u003e), and then ask them if they contain the object I'm checking. And for that, I use \u003ccode\u003eArray#include?\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;bar\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;baz\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:sed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cem\u003e(And if you're only testing against strings, you could use \u003ccode\u003e%w(bar baz)\u003c/code\u003e as a shortcut to create the array. Here's more \u003ca href=\"http://caiustheory.com/ruby-shortcuts\"\u003eruby shortcuts\u003c/a\u003e.)\u003c/em\u003e\u003c/p\u003e\n\n\u003ch3 id=\"assigning-multiple-items-from-a-nested-hash-to-variables\"\u003eAssigning multiple items from a nested hash to variables\u003c/h3\u003e\n\n\u003cp\u003eOccasionally I find myself needing to be given a hash of a hash of data (most recently, an \u003ca href=\"https://github.com/intridea/omniauth/wiki\"\u003eomniauth\u003c/a\u003e auth hash) and assign some values from it to separate variables within my code. Given the following hash, containing a nested hash:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003edetails\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003euid\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;12345\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Caius Durling\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"ss\"\u003enickname\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;caius\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eLets say we want to extract the name and nickname fields from \u003ccode\u003edetails[:info]\u003c/code\u003e hash into their own local variables (or instance variables within a class, more likely.) We should probably handle the case of \u003ccode\u003edetails[:info]\u003c/code\u003e not being a hash, and try not to read from it if that's the case - so we might end up with something like the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edetails\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:info\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003edetails\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:info\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"ss\"\u003e:name\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"n\"\u003enickname\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edetails\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:info\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003edetails\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:info\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"ss\"\u003e:nickname\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;Caius Durling\u0026quot;\u003c/span\u003e\n\u003cspan class=\"n\"\u003enickname\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;caius\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd then in the spirit of \u003ca href=\"http://en.wikipedia.org/wiki/Don't_repeat_yourself\"\u003eDRYing\u003c/a\u003e up our code, we see there's duplication in both lines in checking \u003ccode\u003edetails[:info]\u003c/code\u003e exists (not actually that it's a hash, but hey ho, we rely on upstream to send us \u003ccode\u003enil\u003c/code\u003e or a hash.) So we reduce it down using an if statement and give ourselves slightly less to type at the same time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edetails\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:info\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e))\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:name\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"n\"\u003enickname\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:nickname\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;Caius Durling\u0026quot;\u003c/span\u003e\n\u003cspan class=\"n\"\u003enickname\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;caius\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"returning-two-values-conditionally\"\u003eReturning two values conditionally\u003c/h3\u003e\n\n\u003cp\u003eSometimes a method will end with a ternary, where depending on a condition it'll either return one or another value. If this conditional returns true, then the first value is returned. Otherwise it returns the second value. You could quite easily write it out as an if/else longer-form block too.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@blah\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"ss\"\u003e:foo_matches\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"ss\"\u003e:no_match\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eMy brain finds picking the logic in this apart slightly harder mentally, than if I drop a \u003ca href=\"http://en.wikipedia.org/wiki/Return_early\"\u003ereturn early\u003c/a\u003e bomb on the method. Then it reads more akin to how I'd think through the logic. Return the first value if this conditional returns true. Otherwise the method returns this second value. I think the second value being on a completely separate line helps me make this mental distinction quicker too.\u003c/p\u003e\n\n\u003cp\u003eSo I'd write it this way:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"ss\"\u003e:foo_matches\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@blah\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003e:no_match\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"returning-nil-or-a-value-conditionally\"\u003eReturning nil or a value conditionally\u003c/h3\u003e\n\n\u003cp\u003eFollowing on from the last snippet, but taking advantage of the ruby runtime a bit more, is when you're wanting to return a value if a conditional is true, or otherwise false. The easy way is to just write \u003ccode\u003enil\u003c/code\u003e in the ternary:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@foo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:bar\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"ss\"\u003e:foo_matches\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eHowever, we know ruby returns the result of the last expression in the method. And that if a single line conditional isn't met, it returns nil from the expression. Combining that, we can rewrite the previous example into this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003e:foo_matches\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@foo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:bar\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd it will still return nil in the case that \u003ccode\u003e@foo\u003c/code\u003e doesn't match \u003ccode\u003e:bar\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"returning-a-boolean\"\u003eReturning a boolean\u003c/h3\u003e\n\n\u003cp\u003eSometimes you have a method that returns the result of a conditional, but it's written to return true/false in a conditional instead.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@foo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:bar\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThe really easy refactor here is to just remove the ternary and leave the conditional.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@foo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:bar\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd of course if you were returning \u003ccode\u003efalse\u003c/code\u003e when the conditional evaluates to \u003ccode\u003etrue\u003c/code\u003e, you can either negate the comparison (use \u003ccode\u003e!=\u003c/code\u003e in that example), or negate the entire conditional result by prepending \u003ccode\u003e!\u003c/code\u003e to the line.\u003c/p\u003e\n"
+        "content_html" : "\n\n\u003cp\u003eHere's a few things I refactor as I write code down initially. Not entirely convinced it's strictly refactoring, but it's how I amend from one pattern I see in a line or three of code into a different structure that I feel achieves the same result with cleaner or more concise code.\u003c/p\u003e\n\n\u003ch3 id=\"multiple-equality-comparisons\"\u003eMultiple equality comparisons\u003c/h3\u003e\n\n\u003cp\u003eTesting the equality of an object against another is fairly simple, just do \u003ccode\u003efoo == \u0026quot;bar\u0026quot;\u003c/code\u003e. However, I usually try to test against multiple objects in a slightly different way. Your first thought might be that the easiest way is just to chain a series of \u003ccode\u003e==\u003c/code\u003e with the OR (\u003ccode\u003e||\u003c/code\u003e) operator.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;baz\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:sed\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI much prefer to flip it around, think of the objects I'm testing against as a collection (\u003ccode\u003eArray\u003c/code\u003e), and then ask them if they contain the object I'm checking. And for that, I use \u003ccode\u003eArray#include?\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;baz\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:sed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(And if you're only testing against strings, you could use \u003ccode\u003e%w(bar baz)\u003c/code\u003e as a shortcut to create the array. Here's more \u003ca href=\"http://caiustheory.com/ruby-shortcuts\"\u003eruby shortcuts\u003c/a\u003e.)\u003c/em\u003e\u003c/p\u003e\n\n\u003ch3 id=\"assigning-multiple-items-from-a-nested-hash-to-variables\"\u003eAssigning multiple items from a nested hash to variables\u003c/h3\u003e\n\n\u003cp\u003eOccasionally I find myself needing to be given a hash of a hash of data (most recently, an \u003ca href=\"https://github.com/intridea/omniauth/wiki\"\u003eomniauth\u003c/a\u003e auth hash) and assign some values from it to separate variables within my code. Given the following hash, containing a nested hash:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003edetails\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003euid\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;12345\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Caius Durling\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"ss\"\u003enickname\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;caius\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLets say we want to extract the name and nickname fields from \u003ccode\u003edetails[:info]\u003c/code\u003e hash into their own local variables (or instance variables within a class, more likely.) We should probably handle the case of \u003ccode\u003edetails[:info]\u003c/code\u003e not being a hash, and try not to read from it if that's the case - so we might end up with something like the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edetails\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:info\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003edetails\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:info\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"ss\"\u003e:name\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"n\"\u003enickname\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edetails\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:info\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003edetails\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:info\u003c/span\u003e\u003cspan class=\"o\"\u003e][\u003c/span\u003e\u003cspan class=\"ss\"\u003e:nickname\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;Caius Durling\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003enickname\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;caius\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd then in the spirit of \u003ca href=\"http://en.wikipedia.org/wiki/Don't_repeat_yourself\"\u003eDRYing\u003c/a\u003e up our code, we see there's duplication in both lines in checking \u003ccode\u003edetails[:info]\u003c/code\u003e exists (not actually that it's a hash, but hey ho, we rely on upstream to send us \u003ccode\u003enil\u003c/code\u003e or a hash.) So we reduce it down using an if statement and give ourselves slightly less to type at the same time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edetails\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:info\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e))\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:name\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"n\"\u003enickname\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:nickname\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003ename\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;Caius Durling\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003enickname\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;caius\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"returning-two-values-conditionally\"\u003eReturning two values conditionally\u003c/h3\u003e\n\n\u003cp\u003eSometimes a method will end with a ternary, where depending on a condition it'll either return one or another value. If this conditional returns true, then the first value is returned. Otherwise it returns the second value. You could quite easily write it out as an if/else longer-form block too.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@blah\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"ss\"\u003e:foo_matches\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"ss\"\u003e:no_match\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMy brain finds picking the logic in this apart slightly harder mentally, than if I drop a \u003ca href=\"http://en.wikipedia.org/wiki/Return_early\"\u003ereturn early\u003c/a\u003e bomb on the method. Then it reads more akin to how I'd think through the logic. Return the first value if this conditional returns true. Otherwise the method returns this second value. I think the second value being on a completely separate line helps me make this mental distinction quicker too.\u003c/p\u003e\n\n\u003cp\u003eSo I'd write it this way:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"ss\"\u003e:foo_matches\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@blah\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003e:no_match\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"returning-nil-or-a-value-conditionally\"\u003eReturning nil or a value conditionally\u003c/h3\u003e\n\n\u003cp\u003eFollowing on from the last snippet, but taking advantage of the ruby runtime a bit more, is when you're wanting to return a value if a conditional is true, or otherwise false. The easy way is to just write \u003ccode\u003enil\u003c/code\u003e in the ternary:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@foo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:bar\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"ss\"\u003e:foo_matches\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, we know ruby returns the result of the last expression in the method. And that if a single line conditional isn't met, it returns nil from the expression. Combining that, we can rewrite the previous example into this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003e:foo_matches\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@foo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:bar\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd it will still return nil in the case that \u003ccode\u003e@foo\u003c/code\u003e doesn't match \u003ccode\u003e:bar\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"returning-a-boolean\"\u003eReturning a boolean\u003c/h3\u003e\n\n\u003cp\u003eSometimes you have a method that returns the result of a conditional, but it's written to return true/false in a conditional instead.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@foo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:bar\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe really easy refactor here is to just remove the ternary and leave the conditional.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@foo\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:bar\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd of course if you were returning \u003ccode\u003efalse\u003c/code\u003e when the conditional evaluates to \u003ccode\u003etrue\u003c/code\u003e, you can either negate the comparison (use \u003ccode\u003e!=\u003c/code\u003e in that example), or negate the entire conditional result by prepending \u003ccode\u003e!\u003c/code\u003e to the line.\u003c/p\u003e\n"
     },
     {
         "title" : "Why I love DATA",
@@ -330,7 +330,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eIn a ruby script, there's a keyword \u003ccode\u003e__END__\u003c/code\u003e that for a long time I thought just marked anything after it as a comment. So I used to use it to store snippets and notes about the script that weren't really needed inline. Then one day I stumbled across the \u003ccode\u003eDATA\u003c/code\u003e constant, and wondered what flaming magic it was.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eDATA\u003c/code\u003e is in fact an IO object, that you can read from (or anything else you'd do with an IO object). It contains all the content after \u003ccode\u003e__END__\u003c/code\u003e in that ruby script file\u003ca href=\"#fn1\"\u003e*\u003c/a\u003e. (It only exists when the file contains \u003ccode\u003e__END__\u003c/code\u003e, and for the first file ruby invokes though. See \u003ca href=\"#fn1\"\u003efootnote\u003c/a\u003e for more details.)\u003c/p\u003e\n\n\u003cp\u003eHow can we use this, and why indeed do I love this fickle constant? I mostly use it for quick scripts where I need to process text data, rather than piping to STDIN.\u003c/p\u003e\n\n\u003cp\u003eGiven a list of URLs that I want to open in my web browser and look at, I could do the following for instance:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"no\"\u003eDATA\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeach_line\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:chomp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"sb\"\u003e`open \u0026quot;\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e\u0026quot;`\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e__END__\u003c/span\u003e\n\u003cspan class=\"cp\"\u003ehttp://google.com/\u003c/span\u003e\n\u003cspan class=\"cp\"\u003ehttp://yahoo.com/\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003ewhich upon running (on a mac) would open all the URLs listed in DATA in my default web browser. (For bonus points, use \u003ca href=\"https://github.com/copiousfreetime/launchy#readme\"\u003eLaunchy\u003c/a\u003e for cross-platform compatibility.) Really handy \u0026amp; quick/simple when you've got 500+ URLs to open at once to go through. (I once had a job that required me to do this daily. Fun.)\u003c/p\u003e\n\n\u003cp\u003eOr given a bunch of CSV data that you just want one column for, you could reach for \u003ccode\u003ecut\u003c/code\u003e or \u003ccode\u003eawk\u003c/code\u003e in the terminal, but ruby has a really good CSV library which I trust and know how to use already. Why not just use that \u0026amp; \u003ccode\u003eDATA\u003c/code\u003e to pull out the field you want?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;csv\u0026quot;\u003c/span\u003e\n\n\u003cspan class=\"no\"\u003eCSV\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"no\"\u003eDATA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;kName\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e__END__\u003c/span\u003e\n\u003cspan class=\"cp\"\u003ekId,kName,kURL\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e1,Google UK,http://google.co.uk\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e2,\u0026quot;Yahoo, UK\u0026quot;,http://yahoo.co.uk\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; Google UK\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; Yahoo, UK\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eI find when the data I want to munge is already in my clipboard, and I can run ruby scripts directly from text editors without having to save a file, it saves having to write the data out to a file, have ruby read it back in, etc just to do something with the data. I can just write the script reading from \u003ccode\u003eDATA\u003c/code\u003e, paste the data in and run it. Which also lets me run it iteratively and build up a slightly more complex script that I don't want to keep. Then do what I need with the output and close the file without saving it.\u003c/p\u003e\n\n\u003cp\u003e\u003cspan id=\"fn1\"\u003e*\u003c/span\u003e technically DATA is an IO handler to read \u003ccode\u003e__FILE__\u003c/code\u003e, which has been wound forward to the start of the first line after \u003ccode\u003e__END__\u003c/code\u003e in the file. And it only exists for the first ruby file to be invoked by the interpreter.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003ecat \u0026gt; tmp/data.rb \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;RUBY\u003c/span\u003e\n\u003cspan class=\"s\"\u003ep DATA.read\u003c/span\u003e\n\u003cspan class=\"s\"\u003e__END__\u003c/span\u003e\n\u003cspan class=\"s\"\u003edata.rb\u003c/span\u003e\n\u003cspan class=\"s\"\u003eRUBY\u003c/span\u003e\n\nruby tmp/data.rb\n\u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;data.rb\\n\u0026quot;\u003c/span\u003e\n\ncat \u0026gt; tmp/data-require.rb \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;RUBY\u003c/span\u003e\n\u003cspan class=\"s\"\u003erequire \u0026quot;./tmp/data\u0026quot;\u003c/span\u003e\n\u003cspan class=\"s\"\u003eRUBY\u003c/span\u003e\n\nruby tmp/data-require.rb\n\u003cspan class=\"c1\"\u003e# =\u0026gt; /Users/caius/tmp/data.rb:1:in `\u0026lt;top (required)\u0026gt;\u0026#39;: uninitialized constant DATA (NameError)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd because it's a file handle pointing at the current file, you can rewind it and read the entire ruby script into itselfâ€¦\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ ruby tmp/readself.rb \nDATA.rewind\nprint DATA.read\n\n__END__\nsomething goes here\n\u003c/code\u003e\u003c/pre\u003e\n"
+        "content_html" : "\u003cp\u003eIn a ruby script, there's a keyword \u003ccode\u003e__END__\u003c/code\u003e that for a long time I thought just marked anything after it as a comment. So I used to use it to store snippets and notes about the script that weren't really needed inline. Then one day I stumbled across the \u003ccode\u003eDATA\u003c/code\u003e constant, and wondered what flaming magic it was.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eDATA\u003c/code\u003e is in fact an IO object, that you can read from (or anything else you'd do with an IO object). It contains all the content after \u003ccode\u003e__END__\u003c/code\u003e in that ruby script file\u003ca href=\"#fn1\"\u003e*\u003c/a\u003e. (It only exists when the file contains \u003ccode\u003e__END__\u003c/code\u003e, and for the first file ruby invokes though. See \u003ca href=\"#fn1\"\u003efootnote\u003c/a\u003e for more details.)\u003c/p\u003e\n\n\u003cp\u003eHow can we use this, and why indeed do I love this fickle constant? I mostly use it for quick scripts where I need to process text data, rather than piping to STDIN.\u003c/p\u003e\n\n\u003cp\u003eGiven a list of URLs that I want to open in my web browser and look at, I could do the following for instance:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"no\"\u003eDATA\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeach_line\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:chomp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"sb\"\u003e`open \u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e\u0026#34;`\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e__END__\n\u003c/span\u003e\u003cspan class=\"cp\"\u003ehttp://google.com/\n\u003c/span\u003e\u003cspan class=\"cp\"\u003ehttp://yahoo.com/\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ewhich upon running (on a mac) would open all the URLs listed in DATA in my default web browser. (For bonus points, use \u003ca href=\"https://github.com/copiousfreetime/launchy#readme\"\u003eLaunchy\u003c/a\u003e for cross-platform compatibility.) Really handy \u0026amp; quick/simple when you've got 500+ URLs to open at once to go through. (I once had a job that required me to do this daily. Fun.)\u003c/p\u003e\n\n\u003cp\u003eOr given a bunch of CSV data that you just want one column for, you could reach for \u003ccode\u003ecut\u003c/code\u003e or \u003ccode\u003eawk\u003c/code\u003e in the terminal, but ruby has a really good CSV library which I trust and know how to use already. Why not just use that \u0026amp; \u003ccode\u003eDATA\u003c/code\u003e to pull out the field you want?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;csv\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"no\"\u003eCSV\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"no\"\u003eDATA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eheaders\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;kName\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e__END__\n\u003c/span\u003e\u003cspan class=\"cp\"\u003ekId,kName,kURL\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e1,Google UK,http://google.co.uk\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e2,\u0026#34;Yahoo, UK\u0026#34;,http://yahoo.co.uk\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; Google UK\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; Yahoo, UK\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI find when the data I want to munge is already in my clipboard, and I can run ruby scripts directly from text editors without having to save a file, it saves having to write the data out to a file, have ruby read it back in, etc just to do something with the data. I can just write the script reading from \u003ccode\u003eDATA\u003c/code\u003e, paste the data in and run it. Which also lets me run it iteratively and build up a slightly more complex script that I don't want to keep. Then do what I need with the output and close the file without saving it.\u003c/p\u003e\n\n\u003cp\u003e\u003cspan id=\"fn1\"\u003e*\u003c/span\u003e technically DATA is an IO handler to read \u003ccode\u003e__FILE__\u003c/code\u003e, which has been wound forward to the start of the first line after \u003ccode\u003e__END__\u003c/code\u003e in the file. And it only exists for the first ruby file to be invoked by the interpreter.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ecat \u0026gt; tmp/data.rb \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;RUBY\n\u003c/span\u003e\u003cspan class=\"s\"\u003ep DATA.read\n\u003c/span\u003e\u003cspan class=\"s\"\u003e__END__\n\u003c/span\u003e\u003cspan class=\"s\"\u003edata.rb\n\u003c/span\u003e\u003cspan class=\"s\"\u003eRUBY\u003c/span\u003e\n\nruby tmp/data.rb\n\u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;data.rb\\n\u0026#34;\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\ncat \u0026gt; tmp/data-require.rb \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;RUBY\n\u003c/span\u003e\u003cspan class=\"s\"\u003erequire \u0026#34;./tmp/data\u0026#34;\n\u003c/span\u003e\u003cspan class=\"s\"\u003eRUBY\u003c/span\u003e\n\nruby tmp/data-require.rb\n# \u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026gt; /Users/caius/tmp/data.rb:1:in \u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u0026lt;top \u003cspan class=\"o\"\u003e(\u003c/span\u003erequired\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u0026gt;\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e: uninitialized constant DATA \u003cspan class=\"o\"\u003e(\u003c/span\u003eNameError\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd because it's a file handle pointing at the current file, you can rewind it and read the entire ruby script into itselfâ€¦\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ ruby tmp/readself.rb \nDATA.rewind\nprint DATA.read\n\n__END__\nsomething goes here\n\u003c/code\u003e\u003c/pre\u003e\n"
     },
     {
         "title" : "Geolocation in nginx",
@@ -341,7 +341,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eSometimes you need to have a rough idea of where your website visitor is located. There's many ways to geolocate them, but if you just want to go to country level then \u003ca href=\"http://dev.maxmind.com/geoip/geolite\"\u003eMaxMind have free geo databases\u003c/a\u003e available to help you. When we needed to do this quickly on-the-fly at EmberAds, we came up with the \u003ca href=\"https://github.com/emberads/trifle#readme\"\u003etrifle\u003c/a\u003e gem, which supports ipv4 and ipv6 lookups.\u003c/p\u003e\n\n\u003cp\u003eRecently I was searching for something else to do with nginx and ran across \u003ca href=\"http://www.ruby-forum.com/topic/125810\"\u003ea mailing list thread\u003c/a\u003e about using the maxmind database with nginx's \u003ca href=\"http://wiki.nginx.org/NginxHttpGeoModule\"\u003eHTTP Geo module\u003c/a\u003e and do the lookup directly in nginx itself. Finally got a chance to sit down and work out the logistics of doing this. I've done this on an ubuntu 12.04 box, with the expected config file layouts that come with ubuntu.\u003c/p\u003e\n\n\u003cp\u003eRun the following on your server (as someone with write access to nginx config files):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e# Generate the text file for nginx to import\u003c/span\u003e\nperl \u0026lt;\u003cspan class=\"o\"\u003e(\u003c/span\u003ecurl -s https://raw.github.com/nginx/nginx/master/contrib/geo2nginx.pl\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n\u0026lt; \u0026lt;\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003ezip\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003etempfile\u003cspan class=\"k\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\ncurl -so \u003cspan class=\"nv\"\u003e$zip\u003c/span\u003e http://geolite.maxmind.com/download/geoip/database/GeoIPCountryCSV.zip \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e unzip -p \u003cspan class=\"nv\"\u003e$zip\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u0026gt; /etc/nginx/nginx_ip_country.txt\n\n\u003cspan class=\"c1\"\u003e# Tell nginx to work out the IP country and store in variable\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;geo $IP_COUNTRY {\u003c/span\u003e\n\u003cspan class=\"s1\"\u003e  default --;\u003c/span\u003e\n\u003cspan class=\"s1\"\u003e  include /etc/nginx/nginx_ip_country.txt;\u003c/span\u003e\n\u003cspan class=\"s1\"\u003e}\u0026#39;\u003c/span\u003e \u0026gt; /etc/nginx/conf.d/ip_country.conf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNow go find the http block for the vhost you want to have the header passed to, and assuming it's passenger, add the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-nginx\" data-lang=\"nginx\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e# http {\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# server_name freddy.com;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003epassenger_set_cgi_param\u003c/span\u003e \u003cspan class=\"s\"\u003eHTTP_X_IP_COUNTRY\u003c/span\u003e \u003cspan class=\"nv\"\u003e$IP_COUNTRY\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# }\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e(If you don't use passenger, look at the docs for \u003ca href=\"http://wiki.nginx.org/HttpProxyModule#proxy_pass_header\"\u003eproxy_pass_header\u003c/a\u003e or \u003ca href=\"http://wiki.nginx.org/HttpFastcgiModule#fastcgi_pass_header\"\u003efastcgi_pass_header\u003c/a\u003e to see which you'll require for your setup.)\u003c/p\u003e\n\n\u003cp\u003eReload nginx, and behold, \u003ccode\u003erequest.env[\u0026quot;HTTP_X_IP_COUNTRY\u0026quot;]\u003c/code\u003e (assuming a rack app running under ruby) will be a two letter country code, or \u003ccode\u003e\u0026quot;--\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUnfortunately this is IPv4 only currently, there's a \u003ca href=\"http://forum.nginx.org/read.php?29,232648\"\u003ethread on the nginx mailing list from November 2012\u003c/a\u003e saying IPv6 support should be coming on the v1.3 branch of nginx, but with no known ETA. So currently for IPv6 support, take a look at \u003ca href=\"https://github.com/emberads/trifle#readme\"\u003eEmberAds' trifle gem\u003c/a\u003e instead.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eSometimes you need to have a rough idea of where your website visitor is located. There's many ways to geolocate them, but if you just want to go to country level then \u003ca href=\"http://dev.maxmind.com/geoip/geolite\"\u003eMaxMind have free geo databases\u003c/a\u003e available to help you. When we needed to do this quickly on-the-fly at EmberAds, we came up with the \u003ca href=\"https://github.com/emberads/trifle#readme\"\u003etrifle\u003c/a\u003e gem, which supports ipv4 and ipv6 lookups.\u003c/p\u003e\n\n\u003cp\u003eRecently I was searching for something else to do with nginx and ran across \u003ca href=\"http://www.ruby-forum.com/topic/125810\"\u003ea mailing list thread\u003c/a\u003e about using the maxmind database with nginx's \u003ca href=\"http://wiki.nginx.org/NginxHttpGeoModule\"\u003eHTTP Geo module\u003c/a\u003e and do the lookup directly in nginx itself. Finally got a chance to sit down and work out the logistics of doing this. I've done this on an ubuntu 12.04 box, with the expected config file layouts that come with ubuntu.\u003c/p\u003e\n\n\u003cp\u003eRun the following on your server (as someone with write access to nginx config files):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# Generate the text file for nginx to import\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003eperl \u0026lt;\u003cspan class=\"o\"\u003e(\u003c/span\u003ecurl -s https://raw.github.com/nginx/nginx/master/contrib/geo2nginx.pl\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e\u0026lt; \u0026lt;\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003ezip\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003etempfile\u003cspan class=\"k\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003ecurl -so \u003cspan class=\"nv\"\u003e$zip\u003c/span\u003e http://geolite.maxmind.com/download/geoip/database/GeoIPCountryCSV.zip \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e unzip -p \u003cspan class=\"nv\"\u003e$zip\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u0026gt; /etc/nginx/nginx_ip_country.txt\n\n\u003cspan class=\"c1\"\u003e# Tell nginx to work out the IP country and store in variable\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;geo $IP_COUNTRY {\n\u003c/span\u003e\u003cspan class=\"s1\"\u003e  default --;\n\u003c/span\u003e\u003cspan class=\"s1\"\u003e  include /etc/nginx/nginx_ip_country.txt;\n\u003c/span\u003e\u003cspan class=\"s1\"\u003e}\u0026#39;\u003c/span\u003e \u0026gt; /etc/nginx/conf.d/ip_country.conf\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow go find the http block for the vhost you want to have the header passed to, and assuming it's passenger, add the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-nginx\" data-lang=\"nginx\"\u003e\u003cspan class=\"c1\"\u003e# http {\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# server_name freddy.com;\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003epassenger_set_cgi_param\u003c/span\u003e \u003cspan class=\"s\"\u003eHTTP_X_IP_COUNTRY\u003c/span\u003e \u003cspan class=\"nv\"\u003e$IP_COUNTRY\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"err\"\u003e#\u003c/span\u003e \u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e(If you don't use passenger, look at the docs for \u003ca href=\"http://wiki.nginx.org/HttpProxyModule#proxy_pass_header\"\u003eproxy_pass_header\u003c/a\u003e or \u003ca href=\"http://wiki.nginx.org/HttpFastcgiModule#fastcgi_pass_header\"\u003efastcgi_pass_header\u003c/a\u003e to see which you'll require for your setup.)\u003c/p\u003e\n\n\u003cp\u003eReload nginx, and behold, \u003ccode\u003erequest.env[\u0026quot;HTTP_X_IP_COUNTRY\u0026quot;]\u003c/code\u003e (assuming a rack app running under ruby) will be a two letter country code, or \u003ccode\u003e\u0026quot;--\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUnfortunately this is IPv4 only currently, there's a \u003ca href=\"http://forum.nginx.org/read.php?29,232648\"\u003ethread on the nginx mailing list from November 2012\u003c/a\u003e saying IPv6 support should be coming on the v1.3 branch of nginx, but with no known ETA. So currently for IPv6 support, take a look at \u003ca href=\"https://github.com/emberads/trifle#readme\"\u003eEmberAds' trifle gem\u003c/a\u003e instead.\u003c/p\u003e\n"
     },
     {
         "title" : "Mounting Harman Kardon Soundsticks on the wall",
@@ -407,7 +407,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eOS X Lion comes with ruby 1.8.7-p249 installed, although it's compiled against libedit rather than libreadline. Whilst libedit is a mostly-compatible replacement for libreadline, I find there's a couple of settings I'm used to that don't work in libedit. (Like \u003ccode\u003ehistory-beginning-search-backward\u003c/code\u003e.)\u003c/p\u003e\n\n\u003cp\u003eLuckily you can grab the source of ruby and compile just the readline extension, and move it into the right place for it to just work. Here's what's been working for me:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e# Install readline using homebrew\u003c/span\u003e\nbrew install readline\n\n\u003cspan class=\"c1\"\u003e# Download the ruby source and check out 1.8.7-p249\u003c/span\u003e\nmkdir ~/tmp \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/tmp\ngit clone git://github.com/ruby/ruby\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ruby\ngit checkout v1_8_7_249\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ext/readline\nruby extconf.rb --with-readline-dir\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --prefix readline\u003cspan class=\"k\"\u003e)\u003c/span\u003e --disable-libedit\nmake\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNow you should have \u003ccode\u003ereadline.bundle\u003c/code\u003e in the current directory, and it should be compiled against your homebrew-installed readline library, rather than libedit that comes with the system. We can quickly double-check that by using \u003ccode\u003eotool\u003c/code\u003e to check what the binary is linked against.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ otool -L readline.bundle\nreadline.bundle:\n    /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/libruby.1.dylib (compatibility version 1.8.0, current version 1.8.7)\n    /usr/local/Cellar/readline/6.2.2/lib/libreadline.6.2.dylib (compatibility version 6.0.0, current version 6.2.0)\n    /usr/lib/libncurses.5.4.dylib (compatibility version 5.4.0, current version 5.4.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 159.1.0)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd in the output you should see a line listing \u0026quot;libreadline\u0026quot;, and no lines listing \u0026quot;libedit\u0026quot;. Which that shows, we've compiled it properly then. Now the bundle is built we need to move it into the right place so it's loaded when ruby is invoked.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nv\"\u003eRL_PATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/universal-darwin11.0\u0026quot;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# Back up the original bundle, just in cases\u003c/span\u003e\nsudo mv \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$RL_PATH\u003c/span\u003e\u003cspan class=\"s2\"\u003e/readline.bundle\u0026quot;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$RL_PATH\u003c/span\u003e\u003cspan class=\"s2\"\u003e/readline.bundle.libedit\u0026quot;\u003c/span\u003e\nsudo mv readline.bundle \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$RL_PATH\u003c/span\u003e\u003cspan class=\"s2\"\u003e/readline.bundle\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd that's it. You've got a proper compiled-against-readline installed ruby 1.8.7-p249 on 10.7 now.\u003c/p\u003e\n\n\u003cp\u003eOne gotcha I ran into was needing to pass the same arguments to rvm when installing any other version of 1.8.7 on the same machine. Simple enough, just need to remember to do it though.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nv\"\u003eCC\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003egcc-4.2 rvm install \u003cspan class=\"m\"\u003e1\u003c/span\u003e.8.7-p357 -C --with-readline-dir\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --prefix readline\u003cspan class=\"k\"\u003e)\u003c/span\u003e --disable-libedit\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n"
+        "content_html" : "\u003cp\u003eOS X Lion comes with ruby 1.8.7-p249 installed, although it's compiled against libedit rather than libreadline. Whilst libedit is a mostly-compatible replacement for libreadline, I find there's a couple of settings I'm used to that don't work in libedit. (Like \u003ccode\u003ehistory-beginning-search-backward\u003c/code\u003e.)\u003c/p\u003e\n\n\u003cp\u003eLuckily you can grab the source of ruby and compile just the readline extension, and move it into the right place for it to just work. Here's what's been working for me:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# Install readline using homebrew\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003ebrew install readline\n\n\u003cspan class=\"c1\"\u003e# Download the ruby source and check out 1.8.7-p249\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003emkdir ~/tmp \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/tmp\ngit clone git://github.com/ruby/ruby\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ruby\ngit checkout v1_8_7_249\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ext/readline\nruby extconf.rb --with-readline-dir\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --prefix readline\u003cspan class=\"k\"\u003e)\u003c/span\u003e --disable-libedit\nmake\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow you should have \u003ccode\u003ereadline.bundle\u003c/code\u003e in the current directory, and it should be compiled against your homebrew-installed readline library, rather than libedit that comes with the system. We can quickly double-check that by using \u003ccode\u003eotool\u003c/code\u003e to check what the binary is linked against.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ otool -L readline.bundle\nreadline.bundle:\n    /System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/libruby.1.dylib (compatibility version 1.8.0, current version 1.8.7)\n    /usr/local/Cellar/readline/6.2.2/lib/libreadline.6.2.dylib (compatibility version 6.0.0, current version 6.2.0)\n    /usr/lib/libncurses.5.4.dylib (compatibility version 5.4.0, current version 5.4.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 159.1.0)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd in the output you should see a line listing \u0026quot;libreadline\u0026quot;, and no lines listing \u0026quot;libedit\u0026quot;. Which that shows, we've compiled it properly then. Now the bundle is built we need to move it into the right place so it's loaded when ruby is invoked.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"nv\"\u003eRL_PATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/universal-darwin11.0\u0026#34;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# Back up the original bundle, just in cases\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003esudo mv \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$RL_PATH\u003c/span\u003e\u003cspan class=\"s2\"\u003e/readline.bundle\u0026#34;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$RL_PATH\u003c/span\u003e\u003cspan class=\"s2\"\u003e/readline.bundle.libedit\u0026#34;\u003c/span\u003e\nsudo mv readline.bundle \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$RL_PATH\u003c/span\u003e\u003cspan class=\"s2\"\u003e/readline.bundle\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd that's it. You've got a proper compiled-against-readline installed ruby 1.8.7-p249 on 10.7 now.\u003c/p\u003e\n\n\u003cp\u003eOne gotcha I ran into was needing to pass the same arguments to rvm when installing any other version of 1.8.7 on the same machine. Simple enough, just need to remember to do it though.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"nv\"\u003eCC\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003egcc-4.2 rvm install \u003cspan class=\"m\"\u003e1\u003c/span\u003e.8.7-p357 -C --with-readline-dir\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebrew --prefix readline\u003cspan class=\"k\"\u003e)\u003c/span\u003e --disable-libedit\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e"
     },
     {
         "title" : "End Of An Era",
@@ -440,7 +440,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eAny rubyist that's defined a class should understand the following class definition:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFoo\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eObject\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eIt creates a new Constant (\u003ccode\u003eFoo\u003c/code\u003e) that is a subclass of \u003ccode\u003eObject\u003c/code\u003e. Pretty straightforward. But what you might not know is that ruby executes each line it reads in as it reads them. So we could do the following to show that:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFoo\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eObject\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;we just defined object!\u0026quot;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd get the following output when we run that file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; we just defined object!\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eSo.. we know ruby is executing things on the fly whilst defining classes for us. How can we use this for profit and shenanigans?! (Err, use this for vanquishing evil and creating readable code I mean. Honest.)\u003c/p\u003e\n\n\u003cp\u003eHow about if we've got a couple of opinionated people who like to think they've got the biggest ego in the interpreter? The last one to be loaded likes to have any new people ushered into the interpreter to be a subclass of themselves. Lets abuse a global for storing it in, and use a method to choose that on the fly when creating a new class.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ecurrent_awkward_bugger\u003c/span\u003e\n  \u003cspan class=\"vg\"\u003e$awkward_bugger\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSimon\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"vg\"\u003e$awkward_bugger\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eSimon\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFred\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent_awkward_bugger\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"no\"\u003eFred\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esuperclass\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; Simon\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHarold\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"vg\"\u003e$awkward_bugger\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eHarold\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eJohn\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent_awkward_bugger\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"no\"\u003eJohn\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esuperclass\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; Harold\u003c/span\u003e\n\n\u003cspan class=\"no\"\u003eFred\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esuperclass\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; Simon\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOkay, so that looks a bit different to normally defined classes. We create \u003ccode\u003eSimon\u003c/code\u003e, assign him to the awkward bugger global then create \u003ccode\u003eFred\u003c/code\u003e, who subclasses the return value of the \u003ccode\u003ecurrent_awkward_bugger\u003c/code\u003e method which happens to be \u003ccode\u003eSimon\u003c/code\u003e currently. Then \u003ccode\u003eHarold\u003c/code\u003e muscles his way into the interpreter and decides he's going to be the current awkward bugger, so poor \u003ccode\u003eJohn\u003c/code\u003e gets to subclass \u003ccode\u003eHarold\u003c/code\u003e even though he's defined in the same way as \u003ccode\u003eFred\u003c/code\u003e. (And as you can see on the last line, Fred's superclass is unchanged even though we changed the \u003ccode\u003eawkward_bugger\u003c/code\u003e global.)\u003c/p\u003e\n\n\u003cp\u003eOn a somewhat related note there's a lovely method called \u003ccode\u003econst_missing\u003c/code\u003e that gets invoked when you call a Constant in ruby that isn't defined. (Much like \u003ccode\u003emethod_missing\u003c/code\u003e if you're familiar with that.) Means you can do even more shenanigans with non-existent superclasses for classes you're defining.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSimon\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHarold\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eObject\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003econst_missing\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekonstant\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"no\"\u003eSimon\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"no\"\u003eHarold\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eshuffle\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFred\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eArrogantBastard\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"no\"\u003eFred\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esuperclass\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; Simon\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eAlbert\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eArrogantBastard\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"no\"\u003eAlbert\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esuperclass\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; Harold\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eSo here we're choosing from Simon and Harold on the fly each time a missing constant is referenced (in this case the aptly named \u003ccode\u003eArrogantBastard\u003c/code\u003e constant.) If you run this code yourself you'll see the superclasses change on each run according to what your computer picks that time.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eAny rubyist that's defined a class should understand the following class definition:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFoo\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eObject\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt creates a new Constant (\u003ccode\u003eFoo\u003c/code\u003e) that is a subclass of \u003ccode\u003eObject\u003c/code\u003e. Pretty straightforward. But what you might not know is that ruby executes each line it reads in as it reads them. So we could do the following to show that:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFoo\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eObject\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;we just defined object!\u0026#34;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd get the following output when we run that file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; we just defined object!\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo.. we know ruby is executing things on the fly whilst defining classes for us. How can we use this for profit and shenanigans?! (Err, use this for vanquishing evil and creating readable code I mean. Honest.)\u003c/p\u003e\n\n\u003cp\u003eHow about if we've got a couple of opinionated people who like to think they've got the biggest ego in the interpreter? The last one to be loaded likes to have any new people ushered into the interpreter to be a subclass of themselves. Lets abuse a global for storing it in, and use a method to choose that on the fly when creating a new class.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003ecurrent_awkward_bugger\u003c/span\u003e\n  \u003cspan class=\"vg\"\u003e$awkward_bugger\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSimon\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"vg\"\u003e$awkward_bugger\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eSimon\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFred\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent_awkward_bugger\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"no\"\u003eFred\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esuperclass\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; Simon\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHarold\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"vg\"\u003e$awkward_bugger\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eHarold\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eJohn\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent_awkward_bugger\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"no\"\u003eJohn\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esuperclass\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; Harold\u003c/span\u003e\n\n\u003cspan class=\"no\"\u003eFred\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esuperclass\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; Simon\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOkay, so that looks a bit different to normally defined classes. We create \u003ccode\u003eSimon\u003c/code\u003e, assign him to the awkward bugger global then create \u003ccode\u003eFred\u003c/code\u003e, who subclasses the return value of the \u003ccode\u003ecurrent_awkward_bugger\u003c/code\u003e method which happens to be \u003ccode\u003eSimon\u003c/code\u003e currently. Then \u003ccode\u003eHarold\u003c/code\u003e muscles his way into the interpreter and decides he's going to be the current awkward bugger, so poor \u003ccode\u003eJohn\u003c/code\u003e gets to subclass \u003ccode\u003eHarold\u003c/code\u003e even though he's defined in the same way as \u003ccode\u003eFred\u003c/code\u003e. (And as you can see on the last line, Fred's superclass is unchanged even though we changed the \u003ccode\u003eawkward_bugger\u003c/code\u003e global.)\u003c/p\u003e\n\n\u003cp\u003eOn a somewhat related note there's a lovely method called \u003ccode\u003econst_missing\u003c/code\u003e that gets invoked when you call a Constant in ruby that isn't defined. (Much like \u003ccode\u003emethod_missing\u003c/code\u003e if you're familiar with that.) Means you can do even more shenanigans with non-existent superclasses for classes you're defining.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSimon\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHarold\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eObject\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003econst_missing\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekonstant\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"no\"\u003eSimon\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"no\"\u003eHarold\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eshuffle\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFred\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eArrogantBastard\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"no\"\u003eFred\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esuperclass\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; Simon\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eAlbert\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eArrogantBastard\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"no\"\u003eAlbert\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esuperclass\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; Harold\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo here we're choosing from Simon and Harold on the fly each time a missing constant is referenced (in this case the aptly named \u003ccode\u003eArrogantBastard\u003c/code\u003e constant.) If you run this code yourself you'll see the superclasses change on each run according to what your computer picks that time.\u003c/p\u003e\n"
     },
     {
         "title" : "Magic Bubble",
@@ -473,7 +473,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\n\n\u003cp\u003eAs of Xcode 4.2 Apple have stopped bundling GCC with it, shipping only the (mostly) compatible llvm-gcc binary instead. The suggested fix is to install GCC using the \u003ca href=\"https://github.com/kennethreitz/osx-gcc-installer\"\u003eosx-gcc-installer\u003c/a\u003e project. However, I wanted to build and install it from source, which apple provides at \u003ca href=\"http://opensource.apple.com/\"\u003ehttp://opensource.apple.com/\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou should already have installed Xcode 4.2 from the app store, then basically the following steps are to grab the tarball from the \u003ca href=\"http://opensource.apple.com/release/developer-tools-41/\"\u003e4.1 developer tools source\u003c/a\u003e, unpack \u0026amp; compile it, then install it into the right places.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpdate 2016-07-03:\u003c/strong\u003e I'd suggest just using homebrew to install this these days:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003ebrew install homebrew/dupes/apple-gcc42\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch2 id=\"instructions\"\u003eInstructions\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e# Grab and unpack the tarball\u003c/span\u003e\nmkdir ~/tmp \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/tmp\ncurl -O http://opensource.apple.com/tarballs/gcc/gcc-5666.3.tar.gz\ntar zxf gcc-5666.3.tar.gz\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e gcc-5666.3\n\n\u003cspan class=\"c1\"\u003e# Setup some stuff it requires\u003c/span\u003e\nmkdir -p build/obj build/dst build/sym\n\u003cspan class=\"c1\"\u003e# And then build it. You should go make a cup of tea or five whilst this runs.\u003c/span\u003e\ngnumake install \u003cspan class=\"nv\"\u003eRC_OS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003emacos \u003cspan class=\"nv\"\u003eRC_ARCHS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;i386 x86_64\u0026#39;\u003c/span\u003e \u003cspan class=\"nv\"\u003eTARGETS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;i386 x86_64\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003eSRCROOT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e \u003cspan class=\"nv\"\u003eOBJROOT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e/build/obj \u003cspan class=\"nv\"\u003eDSTROOT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e/build/dst \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003eSYMROOT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e/build/sym\n\n\u003cspan class=\"c1\"\u003e# And finally install it\u003c/span\u003e\nsudo ditto build/dst /\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd now you should have \u003ccode\u003egcc-4.2\u003c/code\u003e in your \u003ccode\u003e$PATH\u003c/code\u003e, available to build all the things that \u003ccode\u003ellvm-gcc\u003c/code\u003e fails to compile.\u003c/p\u003e\n"
+        "content_html" : "\n\n\u003cp\u003eAs of Xcode 4.2 Apple have stopped bundling GCC with it, shipping only the (mostly) compatible llvm-gcc binary instead. The suggested fix is to install GCC using the \u003ca href=\"https://github.com/kennethreitz/osx-gcc-installer\"\u003eosx-gcc-installer\u003c/a\u003e project. However, I wanted to build and install it from source, which apple provides at \u003ca href=\"http://opensource.apple.com/\"\u003ehttp://opensource.apple.com/\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou should already have installed Xcode 4.2 from the app store, then basically the following steps are to grab the tarball from the \u003ca href=\"http://opensource.apple.com/release/developer-tools-41/\"\u003e4.1 developer tools source\u003c/a\u003e, unpack \u0026amp; compile it, then install it into the right places.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpdate 2016-07-03:\u003c/strong\u003e I'd suggest just using homebrew to install this these days:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ebrew install homebrew/dupes/apple-gcc42\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"instructions\"\u003eInstructions\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"c1\"\u003e# Grab and unpack the tarball\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003emkdir ~/tmp \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/tmp\ncurl -O http://opensource.apple.com/tarballs/gcc/gcc-5666.3.tar.gz\ntar zxf gcc-5666.3.tar.gz\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e gcc-5666.3\n\n\u003cspan class=\"c1\"\u003e# Setup some stuff it requires\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003emkdir -p build/obj build/dst build/sym\n\u003cspan class=\"c1\"\u003e# And then build it. You should go make a cup of tea or five whilst this runs.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003egnumake install \u003cspan class=\"nv\"\u003eRC_OS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003emacos \u003cspan class=\"nv\"\u003eRC_ARCHS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;i386 x86_64\u0026#39;\u003c/span\u003e \u003cspan class=\"nv\"\u003eTARGETS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;i386 x86_64\u0026#39;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  \u003cspan class=\"nv\"\u003eSRCROOT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e \u003cspan class=\"nv\"\u003eOBJROOT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e/build/obj \u003cspan class=\"nv\"\u003eDSTROOT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e/build/dst \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  \u003cspan class=\"nv\"\u003eSYMROOT\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e/build/sym\n\n\u003cspan class=\"c1\"\u003e# And finally install it\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003esudo ditto build/dst /\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd now you should have \u003ccode\u003egcc-4.2\u003c/code\u003e in your \u003ccode\u003e$PATH\u003c/code\u003e, available to build all the things that \u003ccode\u003ellvm-gcc\u003c/code\u003e fails to compile.\u003c/p\u003e\n"
     },
     {
         "title" : "TweetSavr",
@@ -495,7 +495,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eImagine you've got a blogging app and it's currently generating URL paths like \u003ccode\u003eposts/10\u003c/code\u003e for individual posts. You decide the path should contain the post title (in some form) to make your URLs friendlier when someone reads them. I know I certainly prefer to read \u003ca href=\"http://caiustheory.com/abusing-ruby-19-and-json-for-fun\"\u003ehttp://caiustheory.com/abusing-ruby-19-and-json-for-fun\u003c/a\u003e vs \u003ca href=\"http://caiustheory.com/?id=70\"\u003ehttp://caiustheory.com/?id=70\u003c/a\u003e. \u003cem\u003e(That's a fun blog post if you're into (ab)using ruby occasionally!)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eNow you know \u003cem\u003eall\u003c/em\u003e about how to change the URL path that rails generatesâ€”just define \u003ccode\u003eto_param\u003c/code\u003e in your app. Something simple that generates a slug consisting of hyphens and lowercase alphanumerical characters. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e# 70-abusing-ruby-1-9-json-for-fun\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eto_param\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"nb\"\u003eid\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e-\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egsub\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sr\"\u003e/\\W/\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;-\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esqueeze\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;-\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edowncase\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e*\u003cstrong\u003eNB\u003c/strong\u003e: You might want to go the route of storing the slug against the post record in the database and thus generating it before saving the record. In which case the rest of this post is sort of moot and you just need to search on that column. If not, then read on!*\u003c/p\u003e\n\n\u003cp\u003eNow we're generating a nice human-readable URL we need to change the way we find the post in the controller's show action. Up until now it's been a simple \u003ccode\u003e@post = Post.find(params[:id])\u003c/code\u003e to grab the record out the database. Problem now is \u003ccode\u003eparams[:id]\u003c/code\u003e is \u003ccode\u003e\u0026quot;70-abusing-ruby-1-9-json-for-fun\u0026quot;\u003c/code\u003e, rather than just \u003ccode\u003e\u0026quot;70\u0026quot;\u003c/code\u003e. A quick check in the \u003ca href=\"http://ruby-doc.org/core/classes/String.html#M001149\"\u003eString#to_i\u003c/a\u003e docs reveals it \u0026quot;Returns the result of interpreting leading characters in str as an integer base base (between 2 and 36).\u0026quot; Basically it extracts the first number it comes across and returns it.\u003c/p\u003e\n\n\u003cp\u003eKnowing that we can just lean on it to extract the id before using find to look for the post: \u003ccode\u003e@post = Post.find(params[:id].to_i)\u003c/code\u003e. Fantastic! We've got nice human readable paths on our blog posts and they can be found in the database. All finishedâ€¦ or are we?\u003c/p\u003e\n\n\u003cp\u003eThere's still a rather embarassing bug in our code where we're not explicitly checking the slug in the URL against the slug of the Post we've extracted from the database. If we visited \u003ccode\u003e/posts/70-ruby-19-sucks-and-python-rules-4eva\u003c/code\u003e it would load the blog post and render it without batting an eyelid. This has caused \u003ca href=\"http://www.niemanlab.org/2011/04/how-url-spoofing-can-put-libelous-words-into-news-orgs-mouths/\"\u003erather a few embarrassing situations\u003c/a\u003e for some high profile media outlets who don't (or didn't) check their URLs and just output the content. Luckily there's a simple way for us to check this.\u003c/p\u003e\n\n\u003cp\u003eAll we want to do is render the content if the id param matches the slug of the post exactly, and return a 404 page if it doesn't. We already know the id param (\u003ccode\u003eparams[:id]\u003c/code\u003e) and have pulled the Post object out of the database and stored it in an instance variable (\u003ccode\u003e@post\u003c/code\u003e). The \u003ccode\u003e@post\u003c/code\u003e knows how to generate it's own slug, using \u003ccode\u003e#to_param\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo we end up with something like the following in our posts controller, which does all the above and correctly returns a 404 if someone enters an invalid slug (even if it starts with a valid post id):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003ePost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eto_i\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erender_404\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"vi\"\u003e@post\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_param\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003erender_404\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erender\u003c/span\u003e \u003cspan class=\"ss\"\u003e:file\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"no\"\u003eRails\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;public/404.html\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:status\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"ss\"\u003e:not_found\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd going to an invalid path like \u003ccode\u003e/posts/70-ruby-19-sucks-and-python-rules-4eva\u003c/code\u003e just renders the default rails 404 page with a 404 HTTP status. (If you want the id to appear at the end of the path, alter \u003ccode\u003eto_param\u003c/code\u003e accordingly and do something like \u003ccode\u003eparams[:id].match(/\\d+$/)\u003c/code\u003e to extract the Post's id to search on.)\u003c/p\u003e\n\n\u003cp\u003eHey presto, we've implemented human readable slugs that are tamper-proof (without storing them in the database.)\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e(And bonus points if in fact you spotted I used my blog as an example, but that it isn't a rails app. (Nor contains the blog post ID in the pretty URL.) It's actually powered by \u003ca href=\"http://habariproject.org/\"\u003eHabari\u003c/a\u003e at the time of posting!\u003c/em\u003e\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eImagine you've got a blogging app and it's currently generating URL paths like \u003ccode\u003eposts/10\u003c/code\u003e for individual posts. You decide the path should contain the post title (in some form) to make your URLs friendlier when someone reads them. I know I certainly prefer to read \u003ca href=\"http://caiustheory.com/abusing-ruby-19-and-json-for-fun\"\u003ehttp://caiustheory.com/abusing-ruby-19-and-json-for-fun\u003c/a\u003e vs \u003ca href=\"http://caiustheory.com/?id=70\"\u003ehttp://caiustheory.com/?id=70\u003c/a\u003e. \u003cem\u003e(That's a fun blog post if you're into (ab)using ruby occasionally!)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eNow you know \u003cem\u003eall\u003c/em\u003e about how to change the URL path that rails generatesâ€”just define \u003ccode\u003eto_param\u003c/code\u003e in your app. Something simple that generates a slug consisting of hyphens and lowercase alphanumerical characters. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"c1\"\u003e# 70-abusing-ruby-1-9-json-for-fun\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_param\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"nb\"\u003eid\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e-\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egsub\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sr\"\u003e/\\W/\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esqueeze\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edowncase\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e*\u003cstrong\u003eNB\u003c/strong\u003e: You might want to go the route of storing the slug against the post record in the database and thus generating it before saving the record. In which case the rest of this post is sort of moot and you just need to search on that column. If not, then read on!*\u003c/p\u003e\n\n\u003cp\u003eNow we're generating a nice human-readable URL we need to change the way we find the post in the controller's show action. Up until now it's been a simple \u003ccode\u003e@post = Post.find(params[:id])\u003c/code\u003e to grab the record out the database. Problem now is \u003ccode\u003eparams[:id]\u003c/code\u003e is \u003ccode\u003e\u0026quot;70-abusing-ruby-1-9-json-for-fun\u0026quot;\u003c/code\u003e, rather than just \u003ccode\u003e\u0026quot;70\u0026quot;\u003c/code\u003e. A quick check in the \u003ca href=\"http://ruby-doc.org/core/classes/String.html#M001149\"\u003eString#to_i\u003c/a\u003e docs reveals it \u0026quot;Returns the result of interpreting leading characters in str as an integer base base (between 2 and 36).\u0026quot; Basically it extracts the first number it comes across and returns it.\u003c/p\u003e\n\n\u003cp\u003eKnowing that we can just lean on it to extract the id before using find to look for the post: \u003ccode\u003e@post = Post.find(params[:id].to_i)\u003c/code\u003e. Fantastic! We've got nice human readable paths on our blog posts and they can be found in the database. All finishedâ€¦ or are we?\u003c/p\u003e\n\n\u003cp\u003eThere's still a rather embarassing bug in our code where we're not explicitly checking the slug in the URL against the slug of the Post we've extracted from the database. If we visited \u003ccode\u003e/posts/70-ruby-19-sucks-and-python-rules-4eva\u003c/code\u003e it would load the blog post and render it without batting an eyelid. This has caused \u003ca href=\"http://www.niemanlab.org/2011/04/how-url-spoofing-can-put-libelous-words-into-news-orgs-mouths/\"\u003erather a few embarrassing situations\u003c/a\u003e for some high profile media outlets who don't (or didn't) check their URLs and just output the content. Luckily there's a simple way for us to check this.\u003c/p\u003e\n\n\u003cp\u003eAll we want to do is render the content if the id param matches the slug of the post exactly, and return a 404 page if it doesn't. We already know the id param (\u003ccode\u003eparams[:id]\u003c/code\u003e) and have pulled the Post object out of the database and stored it in an instance variable (\u003ccode\u003e@post\u003c/code\u003e). The \u003ccode\u003e@post\u003c/code\u003e knows how to generate it's own slug, using \u003ccode\u003e#to_param\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo we end up with something like the following in our posts controller, which does all the above and correctly returns a 404 if someone enters an invalid slug (even if it starts with a valid post id):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003ePost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eto_i\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erender_404\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"vi\"\u003e@post\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_param\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003erender_404\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erender\u003c/span\u003e \u003cspan class=\"ss\"\u003e:file\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"no\"\u003eRails\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;public/404.html\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:status\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"ss\"\u003e:not_found\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd going to an invalid path like \u003ccode\u003e/posts/70-ruby-19-sucks-and-python-rules-4eva\u003c/code\u003e just renders the default rails 404 page with a 404 HTTP status. (If you want the id to appear at the end of the path, alter \u003ccode\u003eto_param\u003c/code\u003e accordingly and do something like \u003ccode\u003eparams[:id].match(/\\d+$/)\u003c/code\u003e to extract the Post's id to search on.)\u003c/p\u003e\n\n\u003cp\u003eHey presto, we've implemented human readable slugs that are tamper-proof (without storing them in the database.)\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e(And bonus points if in fact you spotted I used my blog as an example, but that it isn't a rails app. (Nor contains the blog post ID in the pretty URL.) It's actually powered by \u003ca href=\"http://habariproject.org/\"\u003eHabari\u003c/a\u003e at the time of posting!\u003c/em\u003e\u003c/p\u003e\n"
     },
     {
         "title" : "Bad Recruiters - Rhys Evans at Devonshire",
@@ -517,7 +517,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eEver since I found out about the new hash syntax you can use in ruby 1.9, and how similar that syntax is to JSON, I've been waiting for someone to realise you can just abuse \u003ccode\u003eeval()\u003c/code\u003e for parsing (some) JSON now.\u003c/p\u003e\n\n\u003cp\u003eFor example, lets say we have the following ruby hash, which could be generated by a RESTful api:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ething\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"ss\"\u003e:person\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"ss\"\u003e:name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;caius\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eIf we pull in the JSON gem and dump that out as a string, we get the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ejsonstr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ething\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_json\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#39;{\u0026quot;person\u0026quot;:{\u0026quot;name\u0026quot;:\u0026quot;caius\u0026quot;}}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThat's\u0026hellip; not quite what we wanted. It's not going to turn back into valid ruby as it is. Luckily javascript will parse objects without requiring the attributes to be wrapped in quotes, eg: \u003ccode\u003e{some: \u0026quot;attribute\u0026quot;}\u003c/code\u003e. We could build a JSON emitter that does it properly, or we could just run it through a regular expression instead. \u003cem\u003e(Lets also add a space after the colon to aid readability.)\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ejsonstr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egsub!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sr\"\u003e/\u0026quot;([^\u0026quot;]+)\u0026quot;: /\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\\1: \u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#39;{person: {name: \u0026quot;caius\u0026quot;}}\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOkay, so now we've turned a ruby hash into a JSON hash, that can still be parsed by the browser. Here's a screenshot to prove that:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://farm6.static.flickr.com/5300/5425314597_43be5824cf_o.jpg\" alt=\"Valid JSON 'thing'\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs you can see, it parses that into a valid JS object, complete with person and then (nested) name attributes. If we wanted to, \u003ccode\u003ething[\u0026quot;person\u0026quot;][\u0026quot;name\u0026quot;]\u003c/code\u003e or \u003ccode\u003ething.person.name\u003c/code\u003e would access the nested value \u0026quot;caius\u0026quot; just fine.\u003c/p\u003e\n\n\u003cp\u003eNow then, we've proved that is successfully parsed into javascript objects by the browser, generated from a ruby hash. No great shakes there, that's fairly simple and has worked for ages. Now for my next trick, I'm going to turn that string of JSON back into a ruby hash, all without going anywhere near the JSON gem.\u003c/p\u003e\n\n\u003cp\u003eSome of you might have guessed what I'm about to do and have started hoping you've guessed wrongly â€” just for the record I don't condone doing this except for fun and games. The JSON gem is there for a reason ;) With that little disclaimer out the way, here we go!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ething2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejsonstr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; {:person=\u0026gt;{:name=\u0026gt;\u0026quot;caius\u0026quot;}}\u003c/span\u003e\n\u003cspan class=\"n\"\u003ething2\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ething\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; true\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOh snap! We just turned javascript objects back into valid ruby objects, in one simple method call. And we'd be able to access the \u0026quot;caius\u0026quot; value by calling \u003ccode\u003ething2[:person][:name]\u003c/code\u003e, or creating OpenStructs from the hashes and calling \u003ccode\u003ething2.person.name\u003c/code\u003e. Which is uncannily like the JS!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpdated 2011-02-07\u003c/strong\u003e: \u003ca href=\"http://jens.ayton.se/\"\u003eJens Ayton\u003c/a\u003e pointed out unquoted keys aren't strictly valid JSON, which is correct. Amended to say they're parsed as javascript objects instead, with no mention of it being valid JSON.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eEver since I found out about the new hash syntax you can use in ruby 1.9, and how similar that syntax is to JSON, I've been waiting for someone to realise you can just abuse \u003ccode\u003eeval()\u003c/code\u003e for parsing (some) JSON now.\u003c/p\u003e\n\n\u003cp\u003eFor example, lets say we have the following ruby hash, which could be generated by a RESTful api:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003ething\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"ss\"\u003e:person\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"ss\"\u003e:name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;caius\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf we pull in the JSON gem and dump that out as a string, we get the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003ejsonstr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ething\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_json\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#39;{\u0026#34;person\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;caius\u0026#34;}}\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat's\u0026hellip; not quite what we wanted. It's not going to turn back into valid ruby as it is. Luckily javascript will parse objects without requiring the attributes to be wrapped in quotes, eg: \u003ccode\u003e{some: \u0026quot;attribute\u0026quot;}\u003c/code\u003e. We could build a JSON emitter that does it properly, or we could just run it through a regular expression instead. \u003cem\u003e(Lets also add a space after the colon to aid readability.)\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003ejsonstr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egsub!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sr\"\u003e/\u0026#34;([^\u0026#34;]+)\u0026#34;: /\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\\1: \u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#39;{person: {name: \u0026#34;caius\u0026#34;}}\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOkay, so now we've turned a ruby hash into a JSON hash, that can still be parsed by the browser. Here's a screenshot to prove that:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://farm6.static.flickr.com/5300/5425314597_43be5824cf_o.jpg\" alt=\"Valid JSON 'thing'\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs you can see, it parses that into a valid JS object, complete with person and then (nested) name attributes. If we wanted to, \u003ccode\u003ething[\u0026quot;person\u0026quot;][\u0026quot;name\u0026quot;]\u003c/code\u003e or \u003ccode\u003ething.person.name\u003c/code\u003e would access the nested value \u0026quot;caius\u0026quot; just fine.\u003c/p\u003e\n\n\u003cp\u003eNow then, we've proved that is successfully parsed into javascript objects by the browser, generated from a ruby hash. No great shakes there, that's fairly simple and has worked for ages. Now for my next trick, I'm going to turn that string of JSON back into a ruby hash, all without going anywhere near the JSON gem.\u003c/p\u003e\n\n\u003cp\u003eSome of you might have guessed what I'm about to do and have started hoping you've guessed wrongly â€” just for the record I don't condone doing this except for fun and games. The JSON gem is there for a reason ;) With that little disclaimer out the way, here we go!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003ething2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejsonstr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; {:person=\u0026gt;{:name=\u0026gt;\u0026#34;caius\u0026#34;}}\u003c/span\u003e\n\u003cspan class=\"n\"\u003ething2\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ething\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; true\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOh snap! We just turned javascript objects back into valid ruby objects, in one simple method call. And we'd be able to access the \u0026quot;caius\u0026quot; value by calling \u003ccode\u003ething2[:person][:name]\u003c/code\u003e, or creating OpenStructs from the hashes and calling \u003ccode\u003ething2.person.name\u003c/code\u003e. Which is uncannily like the JS!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpdated 2011-02-07\u003c/strong\u003e: \u003ca href=\"http://jens.ayton.se/\"\u003eJens Ayton\u003c/a\u003e pointed out unquoted keys aren't strictly valid JSON, which is correct. Amended to say they're parsed as javascript objects instead, with no mention of it being valid JSON.\u003c/p\u003e\n"
     },
     {
         "title" : "App Store Hidden Preferences",
@@ -528,7 +528,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003e\u003cem\u003eSee the Update at the end before you get excited :(\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eHaving just installed 10.6.6 to use the Mac App Store, I was \u003ca href=\"http://twitter.com/Caius/status/23096911170899968\"\u003eslightly annoyed\u003c/a\u003e that it fills my dock with apps as I install them. I'm a bit strange, in that I use a hidden preference to make the dock uneditable (it stops me accidentally dragging an app off.) But that means I can't drag off the Mac App Store installed apps either.\u003c/p\u003e\n\n\u003cp\u003eHad a quick look through \u003ccode\u003e/Applications/App Store.app/Contents/MacOS/App Store\u003c/code\u003e with \u003ccode\u003estrings\u003c/code\u003e (love that tool) and noted a few strings that looked interesting. (There's a full list \u003ca href=\"https://gist.github.com/768442\"\u003ein this gist\u003c/a\u003e.) There wasn't anything that explicitly stated it stopped it putting anything in the dock, but I did notice an option that stopped it showing \u003cstrong\u003einstall progress\u003c/strong\u003e in the dock.\u003c/p\u003e\n\n\u003cp\u003eYank up a terminal window, bash out the following...\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003edefaults write com.apple.appstore FRDebugShowInstallProgress -bool NO\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e...head back to the MAS and install another (free) app, and hey presto, it's leaving my dock alone! Hopefully that's all I needed to continue using my Dock as I like. (Hidden, and left alone.)\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpdate 2011-01-06:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSeems my joy was short-lived. I'd re-downloaded an app I'd already purchased and it just showed download progress in the MAS app, not in the dock. Installing new applications still shows up in the dock (annoyingly.)\u003c/p\u003e\n\n\u003cp\u003eI've been having a poke through how it all hangs together, and if it's possible to actually block downloads from the Dock or not. It doesn't look like there's a hidden preference to hide new apps from downloading in the dock, you can just disable the progress bars in the dock with prefs. The MAS.app seems to be codenamed \u0026quot;Firenze\u0026quot;, with \u003ca href=\"https://gist.github.com/768829\"\u003ethe \u0026quot;hidden\u0026quot; prefs\u003c/a\u003e being prefixed with \u0026quot;FRDebug\u0026quot;.\u003c/p\u003e\n\n\u003cp\u003eAs I understand it, the App\\ Store.app invokes a binary inside \u003ccode\u003e/System/Library/PrivateFrameworks/CommerceKit.framework\u003c/code\u003e called \u0026quot;storeagent\u0026quot; to do the actual downloading/talking to the dock. From looking at the \u003ca href=\"https://gist.github.com/768837\"\u003eclass-dump\u003c/a\u003e of storeagent it communicates with the dock to place a new type of DockTile. Interesting sounding methods to (potentially?) swizzle are \u003ccode\u003e-[DownloadQueue sendDownloadListToDock]\u003c/code\u003e and \u003ccode\u003e-[DownloadQueue tellDockToAddDownload:]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eI've given up for now, but I reckon it should be possible to create a bundle that swizzles the right methods in storeagent to stop it placing the downloads on the Dock.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003e\u003cem\u003eSee the Update at the end before you get excited :(\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eHaving just installed 10.6.6 to use the Mac App Store, I was \u003ca href=\"http://twitter.com/Caius/status/23096911170899968\"\u003eslightly annoyed\u003c/a\u003e that it fills my dock with apps as I install them. I'm a bit strange, in that I use a hidden preference to make the dock uneditable (it stops me accidentally dragging an app off.) But that means I can't drag off the Mac App Store installed apps either.\u003c/p\u003e\n\n\u003cp\u003eHad a quick look through \u003ccode\u003e/Applications/App Store.app/Contents/MacOS/App Store\u003c/code\u003e with \u003ccode\u003estrings\u003c/code\u003e (love that tool) and noted a few strings that looked interesting. (There's a full list \u003ca href=\"https://gist.github.com/768442\"\u003ein this gist\u003c/a\u003e.) There wasn't anything that explicitly stated it stopped it putting anything in the dock, but I did notice an option that stopped it showing \u003cstrong\u003einstall progress\u003c/strong\u003e in the dock.\u003c/p\u003e\n\n\u003cp\u003eYank up a terminal window, bash out the following...\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003edefaults write com.apple.appstore FRDebugShowInstallProgress -bool NO\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e...head back to the MAS and install another (free) app, and hey presto, it's leaving my dock alone! Hopefully that's all I needed to continue using my Dock as I like. (Hidden, and left alone.)\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpdate 2011-01-06:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSeems my joy was short-lived. I'd re-downloaded an app I'd already purchased and it just showed download progress in the MAS app, not in the dock. Installing new applications still shows up in the dock (annoyingly.)\u003c/p\u003e\n\n\u003cp\u003eI've been having a poke through how it all hangs together, and if it's possible to actually block downloads from the Dock or not. It doesn't look like there's a hidden preference to hide new apps from downloading in the dock, you can just disable the progress bars in the dock with prefs. The MAS.app seems to be codenamed \u0026quot;Firenze\u0026quot;, with \u003ca href=\"https://gist.github.com/768829\"\u003ethe \u0026quot;hidden\u0026quot; prefs\u003c/a\u003e being prefixed with \u0026quot;FRDebug\u0026quot;.\u003c/p\u003e\n\n\u003cp\u003eAs I understand it, the App\\ Store.app invokes a binary inside \u003ccode\u003e/System/Library/PrivateFrameworks/CommerceKit.framework\u003c/code\u003e called \u0026quot;storeagent\u0026quot; to do the actual downloading/talking to the dock. From looking at the \u003ca href=\"https://gist.github.com/768837\"\u003eclass-dump\u003c/a\u003e of storeagent it communicates with the dock to place a new type of DockTile. Interesting sounding methods to (potentially?) swizzle are \u003ccode\u003e-[DownloadQueue sendDownloadListToDock]\u003c/code\u003e and \u003ccode\u003e-[DownloadQueue tellDockToAddDownload:]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eI've given up for now, but I reckon it should be possible to create a bundle that swizzles the right methods in storeagent to stop it placing the downloads on the Dock.\u003c/p\u003e\n"
     },
     {
         "title" : "Facebook iPhone app Contact Sync isn't automatic",
@@ -550,7 +550,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\n\n\u003cp\u003e\u003cem\u003eIf you've not heard of it, \u003ca href=\"http://www.macruby.org/\"\u003eMacRuby\u003c/a\u003e is \u003cq\u003ean implementation of Ruby 1.9 directly on top of Mac OS X core technologies such as the Objective-C runtime and garbage collector, the LLVM compiler infrastructure and the Foundation and ICU frameworks.\u003c/q\u003e Basically means you write in Ruby using Objective-C frameworks, and vice versa. It's pretty damn cool to be honest!\u003c/em\u003e\u003c/p\u003e\n\n\u003ch3 id=\"what-is-nsobject-load\"\u003eWhat is +[NSObject load]?\u003c/h3\u003e\n\n\u003cp\u003eFrom the \u003ca href=\"http://developer.apple.com/mac/library/documentation/cocoa/reference/foundation/Classes/NSObject_Class/Reference/Reference.html#//apple_ref/occ/clm/NSObject/load\"\u003edocumentation\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eInvoked whenever a class or category is added to the Objective-C runtime; implement this method to perform class-specific behavior upon loading.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis means when your class is loaded, and implements the \u003ccode\u003eload\u003c/code\u003e method, you get a \u003ccode\u003eload\u003c/code\u003e message sent to your class. Which means you can start doing stuff as soon as your class is loaded by the runtime.\u003c/p\u003e\n\n\u003cp\u003eThe main place I've seen it used (and used it myself) is in \u003ca href=\"http://www.culater.net/software/SIMBL/SIMBL.php\"\u003eSIMBL\u003c/a\u003e plugins. A SIMBL plugin is an NSBundle that contains code which is loaded (injected) into a running application shortly after said application is launched. It lets you extend (or \u0026quot;fix\u0026quot;) cocoa applications with additional features. So you have this bundle of code, that gets loaded into a running application some point after it starts, and you want to run some code as the bundle is loaded - usually to kick off doing whatever you want to do in the plugin. This is where \u003ccode\u003eload\u003c/code\u003e becomes useful.\u003c/p\u003e\n\n\u003cp\u003eHere's a quick implementation that just logs to the console:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-objc\" data-lang=\"objc\"\u003e\u003cspan\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003e@implementation\u003c/span\u003e \u003cspan class=\"nc\"\u003eMainController\u003c/span\u003e\n    \n    \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eload\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eNSlog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e@\u0026quot;MainController#load called\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"now-where-does-macruby-come-into-this\"\u003eNow where does MacRuby come into this?\u003c/h3\u003e\n\n\u003cp\u003eWell I came across a need to do the same in ruby, have some code triggered when the class is loaded into the runtime. Tried implementing \u003ccode\u003eClass.load\u003c/code\u003e but to no avail. Then remembered MacRuby is just ruby! And I can call any code from within my ruby class definition.\u003c/p\u003e\n\n\u003cp\u003eFor continuity I still call it \u003ccode\u003eClass.load\u003c/code\u003e, but then call it as soon as I've defined it in the class. Eg:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMainController\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eload\u003c/span\u003e\n    \u003cspan class=\"no\"\u003eNSLog\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;MainController#load called\u0026quot;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eload\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOf course, I'm not sure when the Objective-C method is called, it's probably after the entire class has been defined rather than as soon as \u003ccode\u003eload\u003c/code\u003e has been loaded into the runtime. So you might want to move the \u003ccode\u003eself.load\u003c/code\u003e call to just before the closing \u003ccode\u003eend\u003c/code\u003e.\u003c/p\u003e\n"
+        "content_html" : "\n\n\u003cp\u003e\u003cem\u003eIf you've not heard of it, \u003ca href=\"http://www.macruby.org/\"\u003eMacRuby\u003c/a\u003e is \u003cq\u003ean implementation of Ruby 1.9 directly on top of Mac OS X core technologies such as the Objective-C runtime and garbage collector, the LLVM compiler infrastructure and the Foundation and ICU frameworks.\u003c/q\u003e Basically means you write in Ruby using Objective-C frameworks, and vice versa. It's pretty damn cool to be honest!\u003c/em\u003e\u003c/p\u003e\n\n\u003ch3 id=\"what-is-nsobject-load\"\u003eWhat is +[NSObject load]?\u003c/h3\u003e\n\n\u003cp\u003eFrom the \u003ca href=\"http://developer.apple.com/mac/library/documentation/cocoa/reference/foundation/Classes/NSObject_Class/Reference/Reference.html#//apple_ref/occ/clm/NSObject/load\"\u003edocumentation\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eInvoked whenever a class or category is added to the Objective-C runtime; implement this method to perform class-specific behavior upon loading.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis means when your class is loaded, and implements the \u003ccode\u003eload\u003c/code\u003e method, you get a \u003ccode\u003eload\u003c/code\u003e message sent to your class. Which means you can start doing stuff as soon as your class is loaded by the runtime.\u003c/p\u003e\n\n\u003cp\u003eThe main place I've seen it used (and used it myself) is in \u003ca href=\"http://www.culater.net/software/SIMBL/SIMBL.php\"\u003eSIMBL\u003c/a\u003e plugins. A SIMBL plugin is an NSBundle that contains code which is loaded (injected) into a running application shortly after said application is launched. It lets you extend (or \u0026quot;fix\u0026quot;) cocoa applications with additional features. So you have this bundle of code, that gets loaded into a running application some point after it starts, and you want to run some code as the bundle is loaded - usually to kick off doing whatever you want to do in the plugin. This is where \u003ccode\u003eload\u003c/code\u003e becomes useful.\u003c/p\u003e\n\n\u003cp\u003eHere's a quick implementation that just logs to the console:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-objc\" data-lang=\"objc\"\u003e    @implementation MainController\n    \n    + (void) load\n    {\n        NSlog(@\u0026#34;MainController#load called\u0026#34;);\n    }\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"now-where-does-macruby-come-into-this\"\u003eNow where does MacRuby come into this?\u003c/h3\u003e\n\n\u003cp\u003eWell I came across a need to do the same in ruby, have some code triggered when the class is loaded into the runtime. Tried implementing \u003ccode\u003eClass.load\u003c/code\u003e but to no avail. Then remembered MacRuby is just ruby! And I can call any code from within my ruby class definition.\u003c/p\u003e\n\n\u003cp\u003eFor continuity I still call it \u003ccode\u003eClass.load\u003c/code\u003e, but then call it as soon as I've defined it in the class. Eg:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMainController\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eload\u003c/span\u003e\n    \u003cspan class=\"no\"\u003eNSLog\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;MainController#load called\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eload\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOf course, I'm not sure when the Objective-C method is called, it's probably after the entire class has been defined rather than as soon as \u003ccode\u003eload\u003c/code\u003e has been loaded into the runtime. So you might want to move the \u003ccode\u003eself.load\u003c/code\u003e call to just before the closing \u003ccode\u003eend\u003c/code\u003e.\u003c/p\u003e\n"
     },
     {
         "title" : "Potty Training YAML",
@@ -561,7 +561,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eRan into a problem today where I have a class with a few attributes on it, but I only want a certain three of those attributes to appear in the YAML dump of a class instance.\u003c/p\u003e\n\n\u003cp\u003eDiving straight into a code example--lets say we have a \u003ccode\u003eContact\u003c/code\u003e class, and we only want to dump the \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003eemail\u003c/code\u003e and \u003ccode\u003ewebsite\u003c/code\u003e attributes.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;yaml\u0026quot;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eContact\u003c/span\u003e\n  \u003cspan class=\"kp\"\u003eattr_accessor\u003c/span\u003e \u003cspan class=\"ss\"\u003e:name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:email\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:website\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:telephone\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# helper method to make setting up easy\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{})\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"n\"\u003emeffod\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_s\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e=\u0026quot;\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emeffod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003erespond_to?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emeffod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# And create an instance for us to play with\u003c/span\u003e\n\u003cspan class=\"n\"\u003ecaius\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eContact\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003e:name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Caius\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003e:email\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;dev@caius.name\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003e:website\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;http://caius.name/\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003e:telephone\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;12345\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAs we'd expect when dumping this, all instance variables get dumped out:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003ecaius\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_yaml\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; --- !ruby/object:Contact \u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; email: dev@caius.name\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; name: Caius\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; telephone: \u0026quot;12345\u0026quot;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; website: http://caius.name/\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eInitially I tried to override \u003ccode\u003eto_yaml\u003c/code\u003e and unset the instance variables I didn't want showing up, but that just made them show up empty. After digging around a bit more, I happened across the \u003ca href=\"http://yaml4r.sourceforge.net/doc/page/type_families.htm\"\u003eType Families\u003c/a\u003e page in the yaml4r docs, which right at the bottom mentions \u003ccode\u003eto_yaml_properties\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTurns out \u003ccode\u003eto_yaml_properties\u003c/code\u003e returns an array of instance variable names (as strings) that should be dumped out as part of the object. A quick method definition later, and we're only dumping the variables we want. (\u003cem\u003eSee my \u003ca href=\"http://caiustheory.com/ruby-shortcuts\"\u003eRuby Shortcuts\u003c/a\u003e post if you don't know what \u003ccode\u003e%w()\u003c/code\u003e does\u003c/em\u003e)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eContact\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eto_yaml_properties\u003c/span\u003e\n    \u003cspan class=\"sx\"\u003e%w(@name @email @website)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd now we dump the class, expecting only the three attributes to be outputted:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003ecaius\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_yaml\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; --- !ruby/object:Contact \u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; name: Caius\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; email: dev@caius.name\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; website: http://caius.name/\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eSuccess!\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eRan into a problem today where I have a class with a few attributes on it, but I only want a certain three of those attributes to appear in the YAML dump of a class instance.\u003c/p\u003e\n\n\u003cp\u003eDiving straight into a code example--lets say we have a \u003ccode\u003eContact\u003c/code\u003e class, and we only want to dump the \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003eemail\u003c/code\u003e and \u003ccode\u003ewebsite\u003c/code\u003e attributes.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;yaml\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eContact\u003c/span\u003e\n  \u003cspan class=\"kp\"\u003eattr_accessor\u003c/span\u003e \u003cspan class=\"ss\"\u003e:name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:email\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:website\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:telephone\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# helper method to make setting up easy\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{})\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"n\"\u003emeffod\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_s\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e=\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emeffod\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003erespond_to?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emeffod\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# And create an instance for us to play with\u003c/span\u003e\n\u003cspan class=\"n\"\u003ecaius\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eContact\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003e:name\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Caius\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003e:email\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dev@caius.name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003e:website\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;http://caius.name/\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003e:telephone\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;12345\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs we'd expect when dumping this, all instance variables get dumped out:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003ecaius\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_yaml\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; --- !ruby/object:Contact \u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; email: dev@caius.name\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; name: Caius\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; telephone: \u0026#34;12345\u0026#34;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; website: http://caius.name/\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eInitially I tried to override \u003ccode\u003eto_yaml\u003c/code\u003e and unset the instance variables I didn't want showing up, but that just made them show up empty. After digging around a bit more, I happened across the \u003ca href=\"http://yaml4r.sourceforge.net/doc/page/type_families.htm\"\u003eType Families\u003c/a\u003e page in the yaml4r docs, which right at the bottom mentions \u003ccode\u003eto_yaml_properties\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTurns out \u003ccode\u003eto_yaml_properties\u003c/code\u003e returns an array of instance variable names (as strings) that should be dumped out as part of the object. A quick method definition later, and we're only dumping the variables we want. (\u003cem\u003eSee my \u003ca href=\"http://caiustheory.com/ruby-shortcuts\"\u003eRuby Shortcuts\u003c/a\u003e post if you don't know what \u003ccode\u003e%w()\u003c/code\u003e does\u003c/em\u003e)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eContact\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_yaml_properties\u003c/span\u003e\n    \u003cspan class=\"sx\"\u003e%w(@name @email @website)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd now we dump the class, expecting only the three attributes to be outputted:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003ecaius\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_yaml\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; --- !ruby/object:Contact \u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; name: Caius\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; email: dev@caius.name\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; website: http://caius.name/\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSuccess!\u003c/p\u003e\n"
     },
     {
         "title" : "Ruby Shortcuts",
@@ -572,7 +572,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\n\n\u003cp\u003eThere's a few useful shorthand ways to create certain objects in Ruby, a couple of obvious ones are \u003ccode\u003e[]\u003c/code\u003e to create an \u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003e{}\u003c/code\u003e to create a \u003ccode\u003eHash\u003c/code\u003e (Or block/\u003ccode\u003eProc\u003c/code\u003e). There's some not so obvious ones too, for creating strings, regexes and executing shell commands.\u003c/p\u003e\n\n\u003cp\u003eWith all of the examples I've used \u003ccode\u003e{}\u003c/code\u003e as the delimiter characters, but you can use a variety of characters. Personally I tend to use \u003ccode\u003e{}\u003c/code\u003e unless the string contains them, in which case I'll use \u003ccode\u003e//\u003c/code\u003e or \u003ccode\u003e@@\u003c/code\u003e. My only exception appears to be \u003ccode\u003e%w\u003c/code\u003e, for which I tend to use \u003ccode\u003e()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"strings\"\u003eStrings\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003e%\u003c/code\u003e and \u003ccode\u003e%Q\u003c/code\u003e are the same as using double quotes, including string interpolation. Really useful when you want to create a string that contains double quotes, but without the hassle of escaping them.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"sx\"\u003e%{}\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;\u0026quot;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%Q{}\u003c/span\u003e                \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;\u0026quot;\u003c/span\u003e\n\n\u003cspan class=\"sx\"\u003e%{caius}\u003c/span\u003e            \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;caius\u0026quot;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%{caius \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sx\"\u003e}\u003c/span\u003e       \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;caius 5\u0026quot;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%{some \u0026quot;foo\u0026quot; thing}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;some \\\u0026quot;foo\\\u0026quot; thing\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003e%q\u003c/code\u003e is equivalent to using single quotes. Behaves exactly the same, no string interpolation.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"sx\"\u003e%q{}\u003c/span\u003e           \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#39;\u0026#39;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%q{caius}\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;caius\u0026quot;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%q{caius #{5}}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;caius \\#{5}\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"arrays\"\u003eArrays\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003e%w\u003c/code\u003e is the equivalent of using String#split. It takes a string and splits it on whitespace. With the added bonus of being able to escape whitespace too. \u003ccode\u003e%W\u003c/code\u003e allows string interpolation.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"sx\"\u003e%w(foo bar sed)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# =\u0026gt; [\u0026quot;foo\u0026quot;, \u0026quot;bar\u0026quot;, \u0026quot;sed\u0026quot;]\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%w(foo\\ bar sed)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; [\u0026quot;foo bar\u0026quot;, \u0026quot;sed\u0026quot;]\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%W(foo \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sx\"\u003e bar)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; [\u0026quot;foo\u0026quot;, \u0026quot;5\u0026quot;, \u0026quot;bar\u0026quot;]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"regexes\"\u003eRegexes\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003e%r\u003c/code\u003e is just like using \u003ccode\u003e//\u003c/code\u003e to create a regexp object. Comes in handy when you're writing a regex containing \u003ccode\u003e/\u003c/code\u003e as you don't have to continually escape it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"sr\"\u003e%r{foo|bar}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; /foo|bar/\u003c/span\u003e\n\u003cspan class=\"sr\"\u003e%r{foo/bar}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; /foo\\/bar/\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"symbols\"\u003eSymbols\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003e%s\u003c/code\u003e creates a symbol, just like writing \u003ccode\u003e:foo\u003c/code\u003e manually. It takes care of escaping the symbol, but unlike \u003ccode\u003e:\u0026quot;\u0026quot;\u003c/code\u003e it doesn't allow string interpolation however.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"sx\"\u003e%s{foo}\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# =\u0026gt; :foo\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%s{foo/bar}\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# =\u0026gt; :\u0026quot;foo/bar\u0026quot;\u003c/span\u003e\n\u003cspan class=\"ss\"\u003e:\u0026quot;foo-\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"ss\"\u003e\u0026quot;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# =\u0026gt; :\u0026quot;foo-5\u0026quot;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%s{foo-#{5}}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; :\u0026quot;foo-\\#{5}\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"shelling-out\"\u003eShelling out\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003e%x\u003c/code\u003e is the same as backticks (\u003ccode\u003e``\u003c/code\u003e), executes the command in a shell and returns the output as a string. And just like backticks it supports string interpolation.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"sb\"\u003e`echo hi`\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;hi\\n\u0026quot;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%x{echo hi}\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;hi\\n\u0026quot;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%x{echo \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sx\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;5\\n\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n"
+        "content_html" : "\n\n\u003cp\u003eThere's a few useful shorthand ways to create certain objects in Ruby, a couple of obvious ones are \u003ccode\u003e[]\u003c/code\u003e to create an \u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003e{}\u003c/code\u003e to create a \u003ccode\u003eHash\u003c/code\u003e (Or block/\u003ccode\u003eProc\u003c/code\u003e). There's some not so obvious ones too, for creating strings, regexes and executing shell commands.\u003c/p\u003e\n\n\u003cp\u003eWith all of the examples I've used \u003ccode\u003e{}\u003c/code\u003e as the delimiter characters, but you can use a variety of characters. Personally I tend to use \u003ccode\u003e{}\u003c/code\u003e unless the string contains them, in which case I'll use \u003ccode\u003e//\u003c/code\u003e or \u003ccode\u003e@@\u003c/code\u003e. My only exception appears to be \u003ccode\u003e%w\u003c/code\u003e, for which I tend to use \u003ccode\u003e()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"strings\"\u003eStrings\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003e%\u003c/code\u003e and \u003ccode\u003e%Q\u003c/code\u003e are the same as using double quotes, including string interpolation. Really useful when you want to create a string that contains double quotes, but without the hassle of escaping them.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"sx\"\u003e%{}\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;\u0026#34;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%Q{}\u003c/span\u003e                \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"sx\"\u003e%{caius}\u003c/span\u003e            \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;caius\u0026#34;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%{caius \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sx\"\u003e}\u003c/span\u003e       \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;caius 5\u0026#34;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%{some \u0026#34;foo\u0026#34; thing}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;some \\\u0026#34;foo\\\u0026#34; thing\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003e%q\u003c/code\u003e is equivalent to using single quotes. Behaves exactly the same, no string interpolation.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"sx\"\u003e%q{}\u003c/span\u003e           \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#39;\u0026#39;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%q{caius}\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;caius\u0026#34;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%q{caius #{5}}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;caius \\#{5}\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"arrays\"\u003eArrays\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003e%w\u003c/code\u003e is the equivalent of using String#split. It takes a string and splits it on whitespace. With the added bonus of being able to escape whitespace too. \u003ccode\u003e%W\u003c/code\u003e allows string interpolation.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"sx\"\u003e%w(foo bar sed)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# =\u0026gt; [\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, \u0026#34;sed\u0026#34;]\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%w(foo\\ bar sed)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; [\u0026#34;foo bar\u0026#34;, \u0026#34;sed\u0026#34;]\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%W(foo \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sx\"\u003e bar)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; [\u0026#34;foo\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;bar\u0026#34;]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"regexes\"\u003eRegexes\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003e%r\u003c/code\u003e is just like using \u003ccode\u003e//\u003c/code\u003e to create a regexp object. Comes in handy when you're writing a regex containing \u003ccode\u003e/\u003c/code\u003e as you don't have to continually escape it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"sr\"\u003e%r{foo|bar}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; /foo|bar/\u003c/span\u003e\n\u003cspan class=\"sr\"\u003e%r{foo/bar}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; /foo\\/bar/\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"symbols\"\u003eSymbols\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003e%s\u003c/code\u003e creates a symbol, just like writing \u003ccode\u003e:foo\u003c/code\u003e manually. It takes care of escaping the symbol, but unlike \u003ccode\u003e:\u0026quot;\u0026quot;\u003c/code\u003e it doesn't allow string interpolation however.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"sx\"\u003e%s{foo}\u003c/span\u003e      \u003cspan class=\"c1\"\u003e# =\u0026gt; :foo\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%s{foo/bar}\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# =\u0026gt; :\u0026#34;foo/bar\u0026#34;\u003c/span\u003e\n\u003cspan class=\"ss\"\u003e:\u0026#34;foo-\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"ss\"\u003e\u0026#34;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# =\u0026gt; :\u0026#34;foo-5\u0026#34;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%s{foo-#{5}}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; :\u0026#34;foo-\\#{5}\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"shelling-out\"\u003eShelling out\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003e%x\u003c/code\u003e is the same as backticks (\u003ccode\u003e``\u003c/code\u003e), executes the command in a shell and returns the output as a string. And just like backticks it supports string interpolation.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"sb\"\u003e`echo hi`\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;hi\\n\u0026#34;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%x{echo hi}\u003c/span\u003e   \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;hi\\n\u0026#34;\u003c/span\u003e\n\u003cspan class=\"sx\"\u003e%x{echo \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sx\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;5\\n\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e"
     },
     {
         "title" : "iPad? iPerfect (â€¦for me)",
@@ -594,7 +594,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eI recently came across the \u003ca href=\"http://developer.apple.com/mac/library/DOCUMENTATION/Darwin/Reference/ManPages/man1/at.1.html\"\u003e\u003ccode\u003eat(1)\u003c/code\u003e\u003c/a\u003e command, and wondered why it wasn't executing jobs I gave it on my machine. Had a poke around the man pages, and discovered in \u003ca href=\"http://developer.apple.com/mac/library/documentation/Darwin/Reference/ManPages/man8/atrun.8.html\"\u003e\u003ccode\u003eatrun(8)\u003c/code\u003e\u003c/a\u003e that by default \u003ccode\u003elaunchd(8)\u003c/code\u003e has the \u003ccode\u003eatrun\u003c/code\u003e entry disabled.\u003c/p\u003e\n\n\u003cp\u003eTo enable it (and have \u003ccode\u003eat\u003c/code\u003e jobs fire) you simply need to run the following command once:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003esudo launchctl load -w /System/Library/LaunchDaemons/com.apple.atrun.plist\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003ePersonally I've taken to using this to sleep my machine after a custom amount of time, mainly because my alarm clock/sleep timer of choice (\u003ca href=\"http://embraceware.com/awaken/\"\u003eAwaken\u003c/a\u003e) can't handle playing \u003ca href=\"http://www.spotify.com/\"\u003eSpotify\u003c/a\u003e for x minutes and then sleeping the machine. The following command puts the machine to sleep, which (quite effectively) silences spotify.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;osascript -e \u0026#39;tell app \\\u0026quot;Finder\\\u0026quot; to sleep\u0026#39;\u0026quot;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e at \u003cspan class=\"m\"\u003e1\u003c/span\u003e:00am\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eSee the \u003ca href=\"http://developer.apple.com/mac/library/DOCUMENTATION/Darwin/Reference/ManPages/man1/at.1.html\"\u003e\u003ccode\u003eat(1)\u003c/code\u003e\u003c/a\u003e manpage for how to specify the time, but as I'm only ever scheduling it on the same day (usually 20 minutes or so in advance), just passing the time works fine.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eI recently came across the \u003ca href=\"http://developer.apple.com/mac/library/DOCUMENTATION/Darwin/Reference/ManPages/man1/at.1.html\"\u003e\u003ccode\u003eat(1)\u003c/code\u003e\u003c/a\u003e command, and wondered why it wasn't executing jobs I gave it on my machine. Had a poke around the man pages, and discovered in \u003ca href=\"http://developer.apple.com/mac/library/documentation/Darwin/Reference/ManPages/man8/atrun.8.html\"\u003e\u003ccode\u003eatrun(8)\u003c/code\u003e\u003c/a\u003e that by default \u003ccode\u003elaunchd(8)\u003c/code\u003e has the \u003ccode\u003eatrun\u003c/code\u003e entry disabled.\u003c/p\u003e\n\n\u003cp\u003eTo enable it (and have \u003ccode\u003eat\u003c/code\u003e jobs fire) you simply need to run the following command once:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003esudo launchctl load -w /System/Library/LaunchDaemons/com.apple.atrun.plist\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ePersonally I've taken to using this to sleep my machine after a custom amount of time, mainly because my alarm clock/sleep timer of choice (\u003ca href=\"http://embraceware.com/awaken/\"\u003eAwaken\u003c/a\u003e) can't handle playing \u003ca href=\"http://www.spotify.com/\"\u003eSpotify\u003c/a\u003e for x minutes and then sleeping the machine. The following command puts the machine to sleep, which (quite effectively) silences spotify.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;osascript -e \u0026#39;tell app \\\u0026#34;Finder\\\u0026#34; to sleep\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e at \u003cspan class=\"m\"\u003e1\u003c/span\u003e:00am\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSee the \u003ca href=\"http://developer.apple.com/mac/library/DOCUMENTATION/Darwin/Reference/ManPages/man1/at.1.html\"\u003e\u003ccode\u003eat(1)\u003c/code\u003e\u003c/a\u003e manpage for how to specify the time, but as I'm only ever scheduling it on the same day (usually 20 minutes or so in advance), just passing the time works fine.\u003c/p\u003e\n"
     },
     {
         "title" : "Read Later in a keystroke",
@@ -627,7 +627,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eOn a couple of occasions now I've wanted to read from \u003ccode\u003eSTDIN\u003c/code\u003e into an Objective-C command line tool, and both times I've had to hunt quite a bit to find the answer because nothing shows up in google for the search terms I used. \u0026quot;Objective-c read from stdin\u0026quot; and \u0026quot;objc read stdin\u0026quot; both turn up results ranging from using \u003ccode\u003eNSInputStream\u003c/code\u003e to dropping some C++ in there.\u003c/p\u003e\n\n\u003cp\u003eThe answer is quite simple really, just use \u003ccode\u003eNSFileHandle\u003c/code\u003e. More specifically \u003ccode\u003e+[NSFileHandle fileHandleWithStandardInput]\u003c/code\u003e. You can then read all data currently in \u003ccode\u003eSTDIN\u003c/code\u003e, monitor it for new data and anything else you can do with a normal \u003ccode\u003eNSFileHandle\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAnd here's some example code, reads all data from \u003ccode\u003eSTDIN\u003c/code\u003e and stores it into an NSString:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-objc\" data-lang=\"objc\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"bp\"\u003eNSFileHandle\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003einput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"bp\"\u003eNSFileHandle\u003c/span\u003e \u003cspan class=\"n\"\u003efileHandleWithStandardInput\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"bp\"\u003eNSData\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003einputData\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"bp\"\u003eNSData\u003c/span\u003e \u003cspan class=\"nl\"\u003edataWithData\u003c/span\u003e\u003cspan class=\"p\"\u003e:[\u003c/span\u003e\u003cspan class=\"n\"\u003einput\u003c/span\u003e \u003cspan class=\"n\"\u003ereadDataToEndOfFile\u003c/span\u003e\u003cspan class=\"p\"\u003e]];\u003c/span\u003e\n\u003cspan class=\"bp\"\u003eNSString\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003einputString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"bp\"\u003eNSString\u003c/span\u003e \u003cspan class=\"n\"\u003ealloc\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003einitWithData\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003einputData\u003c/span\u003e \u003cspan class=\"nl\"\u003eencoding\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eNSUTF8StringEncoding\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cem\u003eI'm using this in GarbageCollected apps, memory management without GC is left as an exercise to the user.\u003c/em\u003e\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eOn a couple of occasions now I've wanted to read from \u003ccode\u003eSTDIN\u003c/code\u003e into an Objective-C command line tool, and both times I've had to hunt quite a bit to find the answer because nothing shows up in google for the search terms I used. \u0026quot;Objective-c read from stdin\u0026quot; and \u0026quot;objc read stdin\u0026quot; both turn up results ranging from using \u003ccode\u003eNSInputStream\u003c/code\u003e to dropping some C++ in there.\u003c/p\u003e\n\n\u003cp\u003eThe answer is quite simple really, just use \u003ccode\u003eNSFileHandle\u003c/code\u003e. More specifically \u003ccode\u003e+[NSFileHandle fileHandleWithStandardInput]\u003c/code\u003e. You can then read all data currently in \u003ccode\u003eSTDIN\u003c/code\u003e, monitor it for new data and anything else you can do with a normal \u003ccode\u003eNSFileHandle\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAnd here's some example code, reads all data from \u003ccode\u003eSTDIN\u003c/code\u003e and stores it into an NSString:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-objc\" data-lang=\"objc\"\u003eNSFileHandle *input = [NSFileHandle fileHandleWithStandardInput];\nNSData *inputData = [NSData dataWithData:[input readDataToEndOfFile]];\nNSString *inputString = [[NSString alloc]\n  initWithData:inputData encoding:NSUTF8StringEncoding];\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eI'm using this in GarbageCollected apps, memory management without GC is left as an exercise to the user.\u003c/em\u003e\u003c/p\u003e\n"
     },
     {
         "title" : "Nissan Almera Self Diagnostic Menu",
@@ -660,7 +660,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003e\u003cem\u003eThis is another old post that I'm republishing. Originally published 27th April 2007.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eMy text editor \u003ca href=\"http://macromates.com/\"\u003eTextMate\u003c/a\u003e has a nice feature called \u0026quot;Filter through command\u0026quot; whereby you can filter the current document through a command.\u003c/p\u003e\n\n\u003cp\u003eAnyway, I've never used it before, but today I had a text file with 30 or so url's in, each on a new line, so I thought I'd test it out.  I selected it to input the document \u0026amp; to not replace the output.  I then entered the following command, which is a ruby command to take each line that isn't blank, and run the shell command \u003ccode\u003eopen $url\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003eruby -e \u003cspan class=\"s1\"\u003e\u0026#39;a = ARGF.read.scan(/\\S+/); a.each { |x| `open #{x}` }\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eWhat this does is take ARGF (the document) and read it in line by line, but only the non-whitespace characters (so newlines, space, etc are ignored.)  And it assigns it to an array called \u003ccode\u003ea\u003c/code\u003e.  What I then do is for each item of \u003ccode\u003ea\u003c/code\u003e, we run it past the shell command \u003ccode\u003eopen\u003c/code\u003e, which on OS X if you pass it a URL it just opens that URL in the default browser.\u003c/p\u003e\n\n\u003cp\u003eMy browser is Safari, and its set to open new links in a new tab in the foremost window.  So I ran the command, and hey presto, within a few seconds I had all the URL's loading in seperate tabs in Safari's foremost window!\u003c/p\u003e\n\n\u003cp\u003eThe power of Unix \u003cem\u003e(OS X)\u003c/em\u003e \u0026amp; TextMate (amongst other tools) just never ceases to amaze me.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpdate\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eI just realised if you change the regex to scan for http://.* then it'll select all website URLs.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003eruby -e \u003cspan class=\"s1\"\u003e\u0026#39;a = ARGF.read.scan(/^http://.*$/); a.each { |url| `open #{url}` }\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n"
+        "content_html" : "\u003cp\u003e\u003cem\u003eThis is another old post that I'm republishing. Originally published 27th April 2007.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eMy text editor \u003ca href=\"http://macromates.com/\"\u003eTextMate\u003c/a\u003e has a nice feature called \u0026quot;Filter through command\u0026quot; whereby you can filter the current document through a command.\u003c/p\u003e\n\n\u003cp\u003eAnyway, I've never used it before, but today I had a text file with 30 or so url's in, each on a new line, so I thought I'd test it out.  I selected it to input the document \u0026amp; to not replace the output.  I then entered the following command, which is a ruby command to take each line that isn't blank, and run the shell command \u003ccode\u003eopen $url\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eruby -e \u003cspan class=\"s1\"\u003e\u0026#39;a = ARGF.read.scan(/\\S+/); a.each { |x| `open #{x}` }\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat this does is take ARGF (the document) and read it in line by line, but only the non-whitespace characters (so newlines, space, etc are ignored.)  And it assigns it to an array called \u003ccode\u003ea\u003c/code\u003e.  What I then do is for each item of \u003ccode\u003ea\u003c/code\u003e, we run it past the shell command \u003ccode\u003eopen\u003c/code\u003e, which on OS X if you pass it a URL it just opens that URL in the default browser.\u003c/p\u003e\n\n\u003cp\u003eMy browser is Safari, and its set to open new links in a new tab in the foremost window.  So I ran the command, and hey presto, within a few seconds I had all the URL's loading in seperate tabs in Safari's foremost window!\u003c/p\u003e\n\n\u003cp\u003eThe power of Unix \u003cem\u003e(OS X)\u003c/em\u003e \u0026amp; TextMate (amongst other tools) just never ceases to amaze me.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpdate\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eI just realised if you change the regex to scan for http://.* then it'll select all website URLs.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eruby -e \u003cspan class=\"s1\"\u003e\u0026#39;a = ARGF.read.scan(/^http://.*$/); a.each { |url| `open #{url}` }\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e"
     },
     {
         "title" : "Mac Tips you may not know",
@@ -693,7 +693,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003e\u003cstrong\u003eBackstory:\u003c/strong\u003e Got myself a first generation iPhone second hand and unlocked it to work on my existing T-Mobile (Official iPhone network in the UK is O2.) Noticed after a week or so of owning it that when you change the volume on the phone, the bezel that comes up says \u0026quot;ringer\u0026quot; across the top. But when you have headphones plugged in, it says \u0026quot;Headphones\u0026quot;. \u003cem\u003e(Note the capitalisation difference.)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eNow I'm not usually bothered by stuff like this (honest!) but as soon as I'd noticed the \u003cem\u003e\u0026quot;bug\u0026quot;\u003c/em\u003e, I couldn't help but think of it everytime I changed the volume, whether I was looking at the screen or not. Seeing as I'm running a jailbroken phone, and therefore have SSH access to it, I figured the string would be defined in a .strings file somewhere in the \u003ccode\u003e/System\u003c/code\u003e folder. And I'd be able to change it!\u003c/p\u003e\n\n\u003cp\u003eFast-forward a few months and I install the iPhone OS 3.0 update (jailbroken of course), and finally decide to turn the phone's SSH server on and go looking for the setting. To do so I figured I'd just need \u003ccode\u003egrep\u003c/code\u003e installed on the phone - I could copy the file itself to my mac and edit it there.\u003c/p\u003e\n\n\u003cp\u003eSo I connect to the phone, have a poke around the filesystem and then start a search to find the correct file:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e# On the iPhone\n$ cd /System/Library/\n$ grep -r \u0026quot;ringer\u0026quot; *\nBinary file CoreServices/SpringBoard.app/English.lproj/SpringBoard.strings matches\nBinary file CoreServices/SpringBoard.app/M68AP.plist matches\nBinary file CoreServices/SpringBoard.app/SpringBoard matches\nBinary file Frameworks/CFNetwork.framework/CFNetwork matches\nBinary file Frameworks/CFNetwork.framework/da.lproj/Localizable.strings matches\nBinary file Frameworks/CFNetwork.framework/no.lproj/Localizable.strings matches\nBinary file Frameworks/Foundation.framework/da.lproj/URL.strings matches\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAt which point I stopped the grep search (\u003ccode\u003e^C\u003c/code\u003e) because I know the home screen of the iPhone is the SpringBoard.app, so I figured it would be in the file \u003ccode\u003eSpringBoard.app/English.lproj/SpringBoard.strings\u003c/code\u003e. Making sure to have SSH enabled on your mac, a simple \u003ccode\u003escp CoreServices/SpringBoard.app/English.lproj/SpringBoard.strings user@your_mac.local:\u003c/code\u003e later and the file is sat in my home folder on my mac.\u003c/p\u003e\n\n\u003cp\u003eSwitching to the mac, now I try and open the file with TextMate, only to realise its in binary format. I need it in the nice XML format to edit it, so a quick google later and I've found a hint on \u003ca href=\"http://macosxhints.com\"\u003eMacOSXHints\u003c/a\u003e telling me how to convert from \u003ca href=\"http://www.macosxhints.com/article.php?story=20050430105126392\"\u003ebinary to xml plist format\u003c/a\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e# On the mac\n$ plutil -convert xml1 SpringBoard.strings\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen opening the file in TextMate was a bit more successful! I can actually understand what its defining now. Search through the file for \u0026quot;ringer\u0026quot; and I found the following lines:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026lt;key\u0026gt;\u003c/span\u003eRINGER_VOLUME\u003cspan class=\"nt\"\u003e\u0026lt;/key\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003eringer\u003cspan class=\"nt\"\u003e\u0026lt;/string\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eChange the \u0026quot;ringer\u0026quot; to \u0026quot;Ringer\u0026quot; between the \u003ccode\u003e\u0026lt;string\u0026gt;\u003c/code\u003e and my editing work is complete! Yes, it really is that easy to edit an interface string that is defined in a \u003ccode\u003e.string\u003c/code\u003e. Now I just need to convert the file back to binary, and copy it back to the phone. Converting back to binary file is one line, just change the \u003ccode\u003exml1\u003c/code\u003e in the previous command to \u003ccode\u003ebinary1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e# On the mac\n$ plutil -convert binary1 SpringBoard.strings\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd then scp it back to the phone, make a backup of the existing file, and overwrite the existing file with the new one I've edited:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e# On the iPhone\n$ cd ~\n$ scp user@mac_name.local:SpringBoard.strings .\n$ cd /System/Library/CoreServices/SpringBoard.app/English.lproj/\n$ mv SpringBoard.strings SpringBoard.strings.bak\n$ cp ~/SpringBoard.strings SpringBoard.strings\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd then restart the phone, either in the usual manner or just run \u003ccode\u003ereboot\u003c/code\u003e on the phone via SSH. Lo and behold once its rebooted and I changed the volume, it read \u0026quot;Ringer\u0026quot;!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://caius.name/images/ringer.jpg\" alt=\"Screenshot of Volume bezel\" /\u003e\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003e\u003cstrong\u003eBackstory:\u003c/strong\u003e Got myself a first generation iPhone second hand and unlocked it to work on my existing T-Mobile (Official iPhone network in the UK is O2.) Noticed after a week or so of owning it that when you change the volume on the phone, the bezel that comes up says \u0026quot;ringer\u0026quot; across the top. But when you have headphones plugged in, it says \u0026quot;Headphones\u0026quot;. \u003cem\u003e(Note the capitalisation difference.)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eNow I'm not usually bothered by stuff like this (honest!) but as soon as I'd noticed the \u003cem\u003e\u0026quot;bug\u0026quot;\u003c/em\u003e, I couldn't help but think of it everytime I changed the volume, whether I was looking at the screen or not. Seeing as I'm running a jailbroken phone, and therefore have SSH access to it, I figured the string would be defined in a .strings file somewhere in the \u003ccode\u003e/System\u003c/code\u003e folder. And I'd be able to change it!\u003c/p\u003e\n\n\u003cp\u003eFast-forward a few months and I install the iPhone OS 3.0 update (jailbroken of course), and finally decide to turn the phone's SSH server on and go looking for the setting. To do so I figured I'd just need \u003ccode\u003egrep\u003c/code\u003e installed on the phone - I could copy the file itself to my mac and edit it there.\u003c/p\u003e\n\n\u003cp\u003eSo I connect to the phone, have a poke around the filesystem and then start a search to find the correct file:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e# On the iPhone\n$ cd /System/Library/\n$ grep -r \u0026quot;ringer\u0026quot; *\nBinary file CoreServices/SpringBoard.app/English.lproj/SpringBoard.strings matches\nBinary file CoreServices/SpringBoard.app/M68AP.plist matches\nBinary file CoreServices/SpringBoard.app/SpringBoard matches\nBinary file Frameworks/CFNetwork.framework/CFNetwork matches\nBinary file Frameworks/CFNetwork.framework/da.lproj/Localizable.strings matches\nBinary file Frameworks/CFNetwork.framework/no.lproj/Localizable.strings matches\nBinary file Frameworks/Foundation.framework/da.lproj/URL.strings matches\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAt which point I stopped the grep search (\u003ccode\u003e^C\u003c/code\u003e) because I know the home screen of the iPhone is the SpringBoard.app, so I figured it would be in the file \u003ccode\u003eSpringBoard.app/English.lproj/SpringBoard.strings\u003c/code\u003e. Making sure to have SSH enabled on your mac, a simple \u003ccode\u003escp CoreServices/SpringBoard.app/English.lproj/SpringBoard.strings user@your_mac.local:\u003c/code\u003e later and the file is sat in my home folder on my mac.\u003c/p\u003e\n\n\u003cp\u003eSwitching to the mac, now I try and open the file with TextMate, only to realise its in binary format. I need it in the nice XML format to edit it, so a quick google later and I've found a hint on \u003ca href=\"http://macosxhints.com\"\u003eMacOSXHints\u003c/a\u003e telling me how to convert from \u003ca href=\"http://www.macosxhints.com/article.php?story=20050430105126392\"\u003ebinary to xml plist format\u003c/a\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e# On the mac\n$ plutil -convert xml1 SpringBoard.strings\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen opening the file in TextMate was a bit more successful! I can actually understand what its defining now. Search through the file for \u0026quot;ringer\u0026quot; and I found the following lines:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;key\u0026gt;\u003c/span\u003eRINGER_VOLUME\u003cspan class=\"nt\"\u003e\u0026lt;/key\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003eringer\u003cspan class=\"nt\"\u003e\u0026lt;/string\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eChange the \u0026quot;ringer\u0026quot; to \u0026quot;Ringer\u0026quot; between the \u003ccode\u003e\u0026lt;string\u0026gt;\u003c/code\u003e and my editing work is complete! Yes, it really is that easy to edit an interface string that is defined in a \u003ccode\u003e.string\u003c/code\u003e. Now I just need to convert the file back to binary, and copy it back to the phone. Converting back to binary file is one line, just change the \u003ccode\u003exml1\u003c/code\u003e in the previous command to \u003ccode\u003ebinary1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e# On the mac\n$ plutil -convert binary1 SpringBoard.strings\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd then scp it back to the phone, make a backup of the existing file, and overwrite the existing file with the new one I've edited:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e# On the iPhone\n$ cd ~\n$ scp user@mac_name.local:SpringBoard.strings .\n$ cd /System/Library/CoreServices/SpringBoard.app/English.lproj/\n$ mv SpringBoard.strings SpringBoard.strings.bak\n$ cp ~/SpringBoard.strings SpringBoard.strings\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd then restart the phone, either in the usual manner or just run \u003ccode\u003ereboot\u003c/code\u003e on the phone via SSH. Lo and behold once its rebooted and I changed the volume, it read \u0026quot;Ringer\u0026quot;!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://caius.name/images/ringer.jpg\" alt=\"Screenshot of Volume bezel\" /\u003e\u003c/p\u003e\n"
     },
     {
         "title" : "Adding XHTML output validation to Cucumber stories",
@@ -704,7 +704,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eAt the 2009 \u003ca href=\"http://barcampleeds.com/\"\u003eBarcamp Leeds\u003c/a\u003e I attended a talk by \u003ca href=\"http://neilcrosby.com/vcard/\"\u003eNeil Crosby\u003c/a\u003e where he talked about automated testing, and about how he felt there was a gap in everything that people were testing. Everyone has unit tests, and people are doing full stack testing too, but no-one (so he feels) does XHTML/CSS/JS validation as part of their automated test suite. And certainly from what I've seen on the mainstream Ruby site's about testing, I agreed with him.\u003c/p\u003e\n\n\u003cp\u003eSo after his talk I had a quick look at his \u003ca href=\"http://github.com/NeilCrosby/frontend-test-suite/tree/master\"\u003efrontend test suite\u003c/a\u003e, and started wondering where exactly I would fit frontend validation testing into my workflow. Would it be part of my unit tests (RSpec), or part of the full stack tests (Cucumber)? As you've probably guessed by the title of this post, its ended up going into my cucumber tests. Since the initial play its been something I've mused about occasionally, but not something I've actively looked into how to implement as part of my test workflow.\u003c/p\u003e\n\n\u003cp\u003eFast-forward a few weeks from \u003ca href=\"http://barcampleeds.com/\"\u003eBarcamp Leeds\u003c/a\u003e and I see a news article in my feed reader entitled \u003ca href=\"http://tenderlovemaking.com/2009/06/12/easy-markup-validation/\"\u003e\u0026quot;Easy Markup Validation\u0026quot;\u003c/a\u003e which gets me hopeful someone's solved this frontend validation thing easily for Rubyists. A quick read through and I'm sold on it and installing the gem. Opened an existing project I'm working on which has a fairly extensive test suite (both unit tests \u0026amp; full stack tests) and tried to slot the validation into my controller unit tests.\u003c/p\u003e\n\n\u003cp\u003eProblem with doing this is by default RSpec-rails doesn't generate the views in your controller specs. At that point I realised I was already generating the full page when I was doing a full stack test using \u003ca href=\"http://github.com/langalex/culerity/tree/master\"\u003eculerity\u003c/a\u003e and \u003ca href=\"http://cukes.info/\"\u003ecucumber\u003c/a\u003e. So why not just add a cucumber step in my stories to validate the HTML on each page I visit? Mainly because its not enough of a failure for this app to have invalid XHTML markup. Having valid markup would be nice, but I'd rather have it as a separate test to my stories in some way.\u003c/p\u003e\n\n\u003cp\u003eCurrently I just do that by only validating if \u003ccode\u003eENV[\u0026quot;VALIDATION\u0026quot;]\u003c/code\u003e is set to anything, so a normal run of my cucumber stories will just test the app does what its supposed to do. If I run them with \u003ccode\u003eVALIDATION=true\u003c/code\u003e then it will check my markup is valid as well.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003efeatures/support/env.rb\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;markup_validity\u0026quot;\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"no\"\u003eENV\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;VALIDATION\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003efeatures/step_definitions/general_steps.rb\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"no\"\u003eThen\u003c/span\u003e \u003cspan class=\"sr\"\u003e%r/the page is valid XHTML/\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"vg\"\u003e$browser\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehtml\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003ebe_xhtml_strict\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"no\"\u003eENV\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;VALIDATION\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003efeatures/logging_in.feature\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cucumber\" data-lang=\"cucumber\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eFeature:\u003c/span\u003e\u003cspan class=\"nf\"\u003e Logging in\u003c/span\u003e\n\u003cspan class=\"nf\"\u003e  In order to do stuff\u003c/span\u003e\n\u003cspan class=\"nf\"\u003e  As a registered user\u003c/span\u003e\n\u003cspan class=\"nf\"\u003e  I want to login\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003eScenario:\u003c/span\u003e\u003cspan class=\"nf\"\u003e Successful Login\u003c/span\u003e\n\u003cspan class=\"k\"\u003e    Given \u003c/span\u003e\u003cspan class=\"nf\"\u003ethere is a user called \u0026quot;\u003c/span\u003e\u003cspan class=\"s\"\u003eCaius\u003c/span\u003e\u003cspan class=\"nf\"\u003e\u0026quot;\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eWhen \u003c/span\u003e\u003cspan class=\"nf\"\u003eI goto the homepage\u003c/span\u003e\n\u003cspan class=\"nf\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eThen \u003c/span\u003e\u003cspan class=\"nf\"\u003ethe page is valid XHTML\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eWhen \u003c/span\u003e\u003cspan class=\"nf\"\u003eI click on the \u0026quot;\u003c/span\u003e\u003cspan class=\"s\"\u003eLogin\u003c/span\u003e\u003cspan class=\"nf\"\u003e\u0026quot; link\u003c/span\u003e\n\u003cspan class=\"nf\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eThen \u003c/span\u003e\u003cspan class=\"nf\"\u003eI am redirected to the login page\u003c/span\u003e\n\u003cspan class=\"nf\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eAnd \u003c/span\u003e\u003cspan class=\"nf\"\u003ethe page is valid XHTML\u003c/span\u003e\n\n\u003cspan class=\"nf\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eWhen \u003c/span\u003e\u003cspan class=\"nf\"\u003eI enter my login details\u003c/span\u003e\n\u003cspan class=\"nf\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eAnd \u003c/span\u003e\u003cspan class=\"nf\"\u003eI click \u0026quot;\u003c/span\u003e\u003cspan class=\"s\"\u003eLogin\u003c/span\u003e\u003cspan class=\"nf\"\u003e\u0026quot;\u003c/span\u003e\n\u003cspan class=\"nf\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eThen \u003c/span\u003e\u003cspan class=\"nf\"\u003eI am redirected to my dashboard\u003c/span\u003e\n\u003cspan class=\"nf\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eAnd \u003c/span\u003e\u003cspan class=\"nf\"\u003ethe page is valid XHTML\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNow when I run \u003ccode\u003ecucumber features/logging_in.feature\u003c/code\u003e, it doesn't validate the HTML, it just makes sure that I can login as my user and that I am redirected to the right places. But if I run \u003ccode\u003eVALIDATION=true cucumber features/logging_in.feature\u003c/code\u003e, then it \u003cem\u003edoes\u003c/em\u003e validate my XHTML on the homepage, the login page and on the user's dashboard. If it fails validation then it gives you a fairly helpful error message as to what it was expecting and what it found instead.\u003c/p\u003e\n\n\u003cp\u003eFrom a quick run against a couple of stories in my app I discovered that I've not been wrapping form elements in an enclosing element, so they've been quickly fixed and now they validate. Now I realise this gem is only testing XHTML output, and doesn't include CSS or JS validation, but from a quick peek at the gem's source it should be fairly easy to add both of those in I think, although again they aren't major errors for me yet in this app.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eAt the 2009 \u003ca href=\"http://barcampleeds.com/\"\u003eBarcamp Leeds\u003c/a\u003e I attended a talk by \u003ca href=\"http://neilcrosby.com/vcard/\"\u003eNeil Crosby\u003c/a\u003e where he talked about automated testing, and about how he felt there was a gap in everything that people were testing. Everyone has unit tests, and people are doing full stack testing too, but no-one (so he feels) does XHTML/CSS/JS validation as part of their automated test suite. And certainly from what I've seen on the mainstream Ruby site's about testing, I agreed with him.\u003c/p\u003e\n\n\u003cp\u003eSo after his talk I had a quick look at his \u003ca href=\"http://github.com/NeilCrosby/frontend-test-suite/tree/master\"\u003efrontend test suite\u003c/a\u003e, and started wondering where exactly I would fit frontend validation testing into my workflow. Would it be part of my unit tests (RSpec), or part of the full stack tests (Cucumber)? As you've probably guessed by the title of this post, its ended up going into my cucumber tests. Since the initial play its been something I've mused about occasionally, but not something I've actively looked into how to implement as part of my test workflow.\u003c/p\u003e\n\n\u003cp\u003eFast-forward a few weeks from \u003ca href=\"http://barcampleeds.com/\"\u003eBarcamp Leeds\u003c/a\u003e and I see a news article in my feed reader entitled \u003ca href=\"http://tenderlovemaking.com/2009/06/12/easy-markup-validation/\"\u003e\u0026quot;Easy Markup Validation\u0026quot;\u003c/a\u003e which gets me hopeful someone's solved this frontend validation thing easily for Rubyists. A quick read through and I'm sold on it and installing the gem. Opened an existing project I'm working on which has a fairly extensive test suite (both unit tests \u0026amp; full stack tests) and tried to slot the validation into my controller unit tests.\u003c/p\u003e\n\n\u003cp\u003eProblem with doing this is by default RSpec-rails doesn't generate the views in your controller specs. At that point I realised I was already generating the full page when I was doing a full stack test using \u003ca href=\"http://github.com/langalex/culerity/tree/master\"\u003eculerity\u003c/a\u003e and \u003ca href=\"http://cukes.info/\"\u003ecucumber\u003c/a\u003e. So why not just add a cucumber step in my stories to validate the HTML on each page I visit? Mainly because its not enough of a failure for this app to have invalid XHTML markup. Having valid markup would be nice, but I'd rather have it as a separate test to my stories in some way.\u003c/p\u003e\n\n\u003cp\u003eCurrently I just do that by only validating if \u003ccode\u003eENV[\u0026quot;VALIDATION\u0026quot;]\u003c/code\u003e is set to anything, so a normal run of my cucumber stories will just test the app does what its supposed to do. If I run them with \u003ccode\u003eVALIDATION=true\u003c/code\u003e then it will check my markup is valid as well.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003efeatures/support/env.rb\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;markup_validity\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"no\"\u003eENV\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;VALIDATION\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003efeatures/step_definitions/general_steps.rb\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"no\"\u003eThen\u003c/span\u003e \u003cspan class=\"s\"\u003e%r/the page is valid XHTML/\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"vg\"\u003e$browser\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehtml\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"n\"\u003ebe_xhtml_strict\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"no\"\u003eENV\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;VALIDATION\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003efeatures/logging_in.feature\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-cucumber\" data-lang=\"cucumber\"\u003eFeature: Logging in\n  In order to do stuff\n  As a registered user\n  I want to login\n\n  Scenario: Successful Login\n    Given there is a user called \u0026#34;Caius\u0026#34;\n\n    When I goto the homepage\n    Then the page is valid XHTML\n\n    When I click on the \u0026#34;Login\u0026#34; link\n    Then I am redirected to the login page\n    And the page is valid XHTML\n\n    When I enter my login details\n    And I click \u0026#34;Login\u0026#34;\n    Then I am redirected to my dashboard\n    And the page is valid XHTML\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow when I run \u003ccode\u003ecucumber features/logging_in.feature\u003c/code\u003e, it doesn't validate the HTML, it just makes sure that I can login as my user and that I am redirected to the right places. But if I run \u003ccode\u003eVALIDATION=true cucumber features/logging_in.feature\u003c/code\u003e, then it \u003cem\u003edoes\u003c/em\u003e validate my XHTML on the homepage, the login page and on the user's dashboard. If it fails validation then it gives you a fairly helpful error message as to what it was expecting and what it found instead.\u003c/p\u003e\n\n\u003cp\u003eFrom a quick run against a couple of stories in my app I discovered that I've not been wrapping form elements in an enclosing element, so they've been quickly fixed and now they validate. Now I realise this gem is only testing XHTML output, and doesn't include CSS or JS validation, but from a quick peek at the gem's source it should be fairly easy to add both of those in I think, although again they aren't major errors for me yet in this app.\u003c/p\u003e\n"
     },
     {
         "title" : "Quantum Javascript Bug",
@@ -748,7 +748,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\n\n\u003cp\u003eI happened to be sent a link to the \u003ca href=\"https://www.owasp.org/index.php/Main_Page\"\u003eOWASP\u003c/a\u003e paper on \u003ca href=\"https://www.owasp.org/images/8/89/Rails_Security_2.pdf\"\u003eRails Security\u003c/a\u003e recently and started reading it. Partway in there's a section on Regular Expressions, which opens with the following line:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA common pitfall in Ruby's regular expressions is to match the string's beginning and end by \u003ccode\u003e^\u003c/code\u003e and \u003ccode\u003e$\u003c/code\u003e, instead of \u003ccode\u003e\\A\u003c/code\u003e and \u003ccode\u003e\\z\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNow I've never used \u003ccode\u003e\\A\u003c/code\u003e and \u003ccode\u003e\\z\u003c/code\u003e in my regular expressions to validate data, I've only ever used \u003ccode\u003e^\u003c/code\u003e and \u003ccode\u003e$\u003c/code\u003e assuming they matched the start and end of the string. This becomes an issue with validating data in rails, because \u003ccode\u003e%0A\u003c/code\u003e (\u003ccode\u003e\\n\u003c/code\u003e URL encoded) is decoded by rails before passing the string to your model to validate.\u003c/p\u003e\n\n\u003ch2 id=\"testing-our-expectations\"\u003eTesting our expectations\u003c/h2\u003e\n\n\u003cp\u003eLets say we want to validate the string as a username for our app. A username is 5 characters long and consists only of lowercase letters.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eregex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sr\"\u003e/^[a-z]{5}$/\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eFirst we make sure it matches the data we want it to:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;caius\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; true\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eExcellent, that validated. Now we'll try a shorter string, which we expect to fail.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;cai\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; false\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOnce more, it behaves how we expected it to. The shorter string was rejected as we wanted it to be. Now, what happens if we test a string with a newline character in it? We'll make sure the data before the \u003ccode\u003e\\n\u003c/code\u003e is valid, and then add some more data after the newline.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;caius\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003efoo\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; true\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eUh oh! That validated and would've been saved as a username?!\u003c/p\u003e\n\n\u003cp\u003eLets have a look at exactly what's happening there, the \u003ccode\u003e$\u003c/code\u003e matches the \u003ccode\u003e\\n\u003c/code\u003e character, so the regex is only matching the first 5 characters of the string, and just ignores anything after the \u003ccode\u003e\\n\u003c/code\u003e. As it turns out, this is exactly what we've asked the regex to match, but we didn't want this behaviour.\u003c/p\u003e\n\n\u003cp\u003eNow you might be thinking, \u0026quot;So what? someone can have a username with a newline in it.\u0026quot; For starters this will probably display weirdly anywhere you use their username, but more importantly it opens your application to an injection attack. Suppose they took advantage of this by setting their username to include some javascript on the page which stole your login cookie and sent it to them. You view their account in the admin section and oh no! They can login as your admin account and do what they want.\u003c/p\u003e\n\n\u003cp\u003eSimple example of this is just having it output an alert dialog. \u003cem\u003e(This is actually the code I'll use to test an application as its not malicious, but blindingly obvious if the javascript is executed or not.)\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;caius\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;script\u0026gt;alert(\u0026#39;hello\u0026#39;)\u0026lt;/script\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; true\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOk, so that was the result we were expecting this time, although it's still not the outcome we wanted. Anytime their username is viewed (providing you aren't escaping the data to HTML entities) you'll see the following:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://caius.name/images/qs/javascript-alert-dialog.png\" alt=\"javascript alert dialog\" /\u003e\u003c/p\u003e\n\n\u003ch2 id=\"the-solution\"\u003eThe Solution\u003c/h2\u003e\n\n\u003cp\u003eHaving realised from our testing above that ^$ matches the beginning/end of a \u003cem\u003eline\u003c/em\u003e in ruby not the beginning and end of a \u003cem\u003estring\u003c/em\u003e, I hear you cry, \u0026quot;How do we make sure we're matching the entire string?!\u0026quot;\u003c/p\u003e\n\n\u003cp\u003eThe answer is pretty simple. Just swap out \u003ccode\u003e^$\u003c/code\u003e for \u003ccode\u003e\\A\\z\u003c/code\u003e. Lets go ahead and try this with the same data as we have above, but with the modified regular expression.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003enew_regex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sr\"\u003e/\\A[a-z]{5}\\z/\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026quot;caius\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enew_regex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; true\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThat's a good start, the valid string still matches.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;cai\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enew_regex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; false\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eLooks like it's going well, invalid string is invalid.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;caius\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003efoo\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enew_regex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; false\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOh Excellent! It's validating this one correctly now.\u003c/p\u003e\n\n\u003cp\u003eAnd just for consistency, lets test it with a more likely attack string.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;caius\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;script\u0026gt;alert(\u0026#39;hello\u0026#39;)\u0026lt;/script\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enew_regex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; false\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eFantastic! We've fixed the security hole in our validation of the user's username.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eIf you want to actually run the code above you'll need the following at the start of the ruby script to patch the validate method into String.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eString\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003evalidate\u003c/span\u003e \u003cspan class=\"n\"\u003eregex\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eregex\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003enil?\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eUpdate:\u003c/em\u003e\u003c/strong\u003e I had \u003ccode\u003e\\Z\u003c/code\u003e in the \u003ccode\u003enew_regex\u003c/code\u003e rather than the \u003ccode\u003e\\z\u003c/code\u003e it should've been. Thanks \u003ca href=\"http://ciaranwal.sh/\"\u003eCiarÃ¡n\u003c/a\u003e.\u003c/p\u003e\n"
+        "content_html" : "\n\n\u003cp\u003eI happened to be sent a link to the \u003ca href=\"https://www.owasp.org/index.php/Main_Page\"\u003eOWASP\u003c/a\u003e paper on \u003ca href=\"https://www.owasp.org/images/8/89/Rails_Security_2.pdf\"\u003eRails Security\u003c/a\u003e recently and started reading it. Partway in there's a section on Regular Expressions, which opens with the following line:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA common pitfall in Ruby's regular expressions is to match the string's beginning and end by \u003ccode\u003e^\u003c/code\u003e and \u003ccode\u003e$\u003c/code\u003e, instead of \u003ccode\u003e\\A\u003c/code\u003e and \u003ccode\u003e\\z\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNow I've never used \u003ccode\u003e\\A\u003c/code\u003e and \u003ccode\u003e\\z\u003c/code\u003e in my regular expressions to validate data, I've only ever used \u003ccode\u003e^\u003c/code\u003e and \u003ccode\u003e$\u003c/code\u003e assuming they matched the start and end of the string. This becomes an issue with validating data in rails, because \u003ccode\u003e%0A\u003c/code\u003e (\u003ccode\u003e\\n\u003c/code\u003e URL encoded) is decoded by rails before passing the string to your model to validate.\u003c/p\u003e\n\n\u003ch2 id=\"testing-our-expectations\"\u003eTesting our expectations\u003c/h2\u003e\n\n\u003cp\u003eLets say we want to validate the string as a username for our app. A username is 5 characters long and consists only of lowercase letters.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003eregex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sr\"\u003e/^[a-z]{5}$/\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFirst we make sure it matches the data we want it to:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;caius\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; true\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eExcellent, that validated. Now we'll try a shorter string, which we expect to fail.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;cai\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; false\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce more, it behaves how we expected it to. The shorter string was rejected as we wanted it to be. Now, what happens if we test a string with a newline character in it? We'll make sure the data before the \u003ccode\u003e\\n\u003c/code\u003e is valid, and then add some more data after the newline.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;caius\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003efoo\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; true\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUh oh! That validated and would've been saved as a username?!\u003c/p\u003e\n\n\u003cp\u003eLets have a look at exactly what's happening there, the \u003ccode\u003e$\u003c/code\u003e matches the \u003ccode\u003e\\n\u003c/code\u003e character, so the regex is only matching the first 5 characters of the string, and just ignores anything after the \u003ccode\u003e\\n\u003c/code\u003e. As it turns out, this is exactly what we've asked the regex to match, but we didn't want this behaviour.\u003c/p\u003e\n\n\u003cp\u003eNow you might be thinking, \u0026quot;So what? someone can have a username with a newline in it.\u0026quot; For starters this will probably display weirdly anywhere you use their username, but more importantly it opens your application to an injection attack. Suppose they took advantage of this by setting their username to include some javascript on the page which stole your login cookie and sent it to them. You view their account in the admin section and oh no! They can login as your admin account and do what they want.\u003c/p\u003e\n\n\u003cp\u003eSimple example of this is just having it output an alert dialog. \u003cem\u003e(This is actually the code I'll use to test an application as its not malicious, but blindingly obvious if the javascript is executed or not.)\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;caius\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;script\u0026gt;alert(\u0026#39;hello\u0026#39;)\u0026lt;/script\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eregex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; true\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOk, so that was the result we were expecting this time, although it's still not the outcome we wanted. Anytime their username is viewed (providing you aren't escaping the data to HTML entities) you'll see the following:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://caius.name/images/qs/javascript-alert-dialog.png\" alt=\"javascript alert dialog\" /\u003e\u003c/p\u003e\n\n\u003ch2 id=\"the-solution\"\u003eThe Solution\u003c/h2\u003e\n\n\u003cp\u003eHaving realised from our testing above that ^$ matches the beginning/end of a \u003cem\u003eline\u003c/em\u003e in ruby not the beginning and end of a \u003cem\u003estring\u003c/em\u003e, I hear you cry, \u0026quot;How do we make sure we're matching the entire string?!\u0026quot;\u003c/p\u003e\n\n\u003cp\u003eThe answer is pretty simple. Just swap out \u003ccode\u003e^$\u003c/code\u003e for \u003ccode\u003e\\A\\z\u003c/code\u003e. Lets go ahead and try this with the same data as we have above, but with the modified regular expression.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003enew_regex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sr\"\u003e/\\A[a-z]{5}\\z/\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026#34;caius\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enew_regex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; true\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat's a good start, the valid string still matches.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;cai\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enew_regex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; false\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLooks like it's going well, invalid string is invalid.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;caius\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003efoo\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enew_regex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; false\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOh Excellent! It's validating this one correctly now.\u003c/p\u003e\n\n\u003cp\u003eAnd just for consistency, lets test it with a more likely attack string.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"s2\"\u003e\u0026#34;caius\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;script\u0026gt;alert(\u0026#39;hello\u0026#39;)\u0026lt;/script\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalidate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enew_regex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; false\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFantastic! We've fixed the security hole in our validation of the user's username.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eIf you want to actually run the code above you'll need the following at the start of the ruby script to patch the validate method into String.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eString\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003evalidate\u003c/span\u003e \u003cspan class=\"n\"\u003eregex\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eregex\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003enil?\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eUpdate:\u003c/em\u003e\u003c/strong\u003e I had \u003ccode\u003e\\Z\u003c/code\u003e in the \u003ccode\u003enew_regex\u003c/code\u003e rather than the \u003ccode\u003e\\z\u003c/code\u003e it should've been. Thanks \u003ca href=\"http://ciaranwal.sh/\"\u003eCiarÃ¡n\u003c/a\u003e.\u003c/p\u003e\n"
     },
     {
         "title" : "Safari 4 Hidden Preferences",
@@ -770,7 +770,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eSo I just installed ruby 1.9.1 through \u003ca href=\"http://macports.org/\"\u003eMacPorts\u003c/a\u003e and wanted to easily migrate my rubygems across from 1.8 to see which ones would fail to install.\u003c/p\u003e\n\n\u003cp\u003eThought about it for a while, then came up with the following bash one-liner to do it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003egem list \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep \u003cspan class=\"s2\"\u003e\u0026quot;(\u0026quot;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e awk \u003cspan class=\"s1\"\u003e\u0026#39;{ print $1 }\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e xargs -L \u003cspan class=\"m\"\u003e1\u003c/span\u003e gem1.9 install\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eNB:\u003c/strong\u003e Installing Ruby 1.9.1 through macports \u003ccode\u003esudo port install ruby19\u003c/code\u003e means I get \u003ccode\u003eruby1.9\u003c/code\u003e, \u003ccode\u003egem1.9\u003c/code\u003e and \u003ccode\u003erake1.9\u003c/code\u003e installed alongside my usual 1.8 \u003ccode\u003eruby\u003c/code\u003e, \u003ccode\u003egem\u003c/code\u003e and \u003ccode\u003erake\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThat grabs the list of installed gems from \u003ccode\u003egem\u003c/code\u003e, searches for lines containing \u0026quot;(\u0026quot; so it only grabs the gem names, spits out the first section of the line, which is the name of the gem, and finally calls \u003ccode\u003egem1.9 install\u003c/code\u003e for each line via \u003ccode\u003exargs -L 1\u003c/code\u003e. Make sure to run it as root or prefix \u003ccode\u003egem1.9\u003c/code\u003e with \u003ccode\u003esudo\u003c/code\u003e. \u003cem\u003e(Or let it install in your home folder, but I hate that.)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eFrom my quick run of the above snippet, 75% of my gems installed \u003cem\u003e(73 out of 98)\u003c/em\u003e and the other few that failed to install were ones like \u003ca href=\"http://github.com/why/hpricot/tree/master\"\u003eHpricot\u003c/a\u003e that require native extensions compiling. You can see the entire list of failures and successes of the gems in \u003ca href=\"http://pastie.textmate.org/pastes/376136\"\u003ethis pastie\u003c/a\u003e\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eSo I just installed ruby 1.9.1 through \u003ca href=\"http://macports.org/\"\u003eMacPorts\u003c/a\u003e and wanted to easily migrate my rubygems across from 1.8 to see which ones would fail to install.\u003c/p\u003e\n\n\u003cp\u003eThought about it for a while, then came up with the following bash one-liner to do it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003egem list \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep \u003cspan class=\"s2\"\u003e\u0026#34;(\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e awk \u003cspan class=\"s1\"\u003e\u0026#39;{ print $1 }\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e xargs -L \u003cspan class=\"m\"\u003e1\u003c/span\u003e gem1.9 install\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eNB:\u003c/strong\u003e Installing Ruby 1.9.1 through macports \u003ccode\u003esudo port install ruby19\u003c/code\u003e means I get \u003ccode\u003eruby1.9\u003c/code\u003e, \u003ccode\u003egem1.9\u003c/code\u003e and \u003ccode\u003erake1.9\u003c/code\u003e installed alongside my usual 1.8 \u003ccode\u003eruby\u003c/code\u003e, \u003ccode\u003egem\u003c/code\u003e and \u003ccode\u003erake\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThat grabs the list of installed gems from \u003ccode\u003egem\u003c/code\u003e, searches for lines containing \u0026quot;(\u0026quot; so it only grabs the gem names, spits out the first section of the line, which is the name of the gem, and finally calls \u003ccode\u003egem1.9 install\u003c/code\u003e for each line via \u003ccode\u003exargs -L 1\u003c/code\u003e. Make sure to run it as root or prefix \u003ccode\u003egem1.9\u003c/code\u003e with \u003ccode\u003esudo\u003c/code\u003e. \u003cem\u003e(Or let it install in your home folder, but I hate that.)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eFrom my quick run of the above snippet, 75% of my gems installed \u003cem\u003e(73 out of 98)\u003c/em\u003e and the other few that failed to install were ones like \u003ca href=\"http://github.com/why/hpricot/tree/master\"\u003eHpricot\u003c/a\u003e that require native extensions compiling. You can see the entire list of failures and successes of the gems in \u003ca href=\"http://pastie.textmate.org/pastes/376136\"\u003ethis pastie\u003c/a\u003e\u003c/p\u003e\n"
     },
     {
         "title" : "View Raw Source",
@@ -803,7 +803,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\n\n\u003cp\u003eSo, I keep having to reinstall mysql5 and rubygems from time to time for various reasons. I always install mysql5 through \u003ca href=\"http://macports.org/\"\u003eMacPorts\u003c/a\u003e as a dependency for the php5 port (along with various other bits for the LA*P stack).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003esudo port install php5 +mysql5 +pear +readline +sockets +apache2 +sqlite\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOnce this is installed then I have \u003ccode\u003emysql\u003c/code\u003e and can setup my databases, etc.\u003c/p\u003e\n\n\u003cp\u003eIgnoring the rest of the LAMP stack, I then need to connect Ruby to the Mysql I just installed through MacPorts. Its quite simple to do, once you know the right argument to pass to it. The easiest way is to just tell it where the \u003ccode\u003emysql5_conf\u003c/code\u003e file is and let it figure out the rest for itself.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003esudo gem install mysql -- --with-mysql-config\u003cspan class=\"o\"\u003e=\u003c/span\u003e/opt/local/bin/mysql_config5\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eHopefully this will save me 10 minutes of googling next time I need to do this!\u003c/p\u003e\n\n\u003ch3 id=\"update-2009-01-21\"\u003eUpdate 2009-01-21\u003c/h3\u003e\n\n\u003cp\u003eI'm an idiot and typed the \u003ccode\u003egem install\u003c/code\u003e command by hand, and ended up with \u003ccode\u003e--with-mysql-conf\u003c/code\u003e instead of \u003ccode\u003e--with-mysql-config\u003c/code\u003e. Updated now.\u003c/p\u003e\n\n\u003ch3 id=\"update-2009-10-19\"\u003eUpdate 2009-10-19\u003c/h3\u003e\n\n\u003cp\u003eOn Snow Leopard I needed to tell rubygems to install the gem as a 64-bit binary. Hattip to \u003ca href=\"http://www.schmidp.com/2009/06/14/rubyrails-and-mysql-on-snow-leopard-10a380/comment-page-1/\"\u003ePhilipp\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003esudo env \u003cspan class=\"nv\"\u003eARCHFLAGS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;-arch x86_64\u0026quot;\u003c/span\u003e gem install mysql -- \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  --with-mysql-config\u003cspan class=\"o\"\u003e=\u003c/span\u003e/opt/local/bin/mysql_config5\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n"
+        "content_html" : "\n\n\u003cp\u003eSo, I keep having to reinstall mysql5 and rubygems from time to time for various reasons. I always install mysql5 through \u003ca href=\"http://macports.org/\"\u003eMacPorts\u003c/a\u003e as a dependency for the php5 port (along with various other bits for the LA*P stack).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003esudo port install php5 +mysql5 +pear +readline +sockets +apache2 +sqlite\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce this is installed then I have \u003ccode\u003emysql\u003c/code\u003e and can setup my databases, etc.\u003c/p\u003e\n\n\u003cp\u003eIgnoring the rest of the LAMP stack, I then need to connect Ruby to the Mysql I just installed through MacPorts. Its quite simple to do, once you know the right argument to pass to it. The easiest way is to just tell it where the \u003ccode\u003emysql5_conf\u003c/code\u003e file is and let it figure out the rest for itself.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003esudo gem install mysql -- --with-mysql-config\u003cspan class=\"o\"\u003e=\u003c/span\u003e/opt/local/bin/mysql_config5\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHopefully this will save me 10 minutes of googling next time I need to do this!\u003c/p\u003e\n\n\u003ch3 id=\"update-2009-01-21\"\u003eUpdate 2009-01-21\u003c/h3\u003e\n\n\u003cp\u003eI'm an idiot and typed the \u003ccode\u003egem install\u003c/code\u003e command by hand, and ended up with \u003ccode\u003e--with-mysql-conf\u003c/code\u003e instead of \u003ccode\u003e--with-mysql-config\u003c/code\u003e. Updated now.\u003c/p\u003e\n\n\u003ch3 id=\"update-2009-10-19\"\u003eUpdate 2009-10-19\u003c/h3\u003e\n\n\u003cp\u003eOn Snow Leopard I needed to tell rubygems to install the gem as a 64-bit binary. Hattip to \u003ca href=\"http://www.schmidp.com/2009/06/14/rubyrails-and-mysql-on-snow-leopard-10a380/comment-page-1/\"\u003ePhilipp\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003esudo env \u003cspan class=\"nv\"\u003eARCHFLAGS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;-arch x86_64\u0026#34;\u003c/span\u003e gem install mysql -- \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --with-mysql-config\u003cspan class=\"o\"\u003e=\u003c/span\u003e/opt/local/bin/mysql_config5\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e"
     },
     {
         "title" : "GTranslate",
@@ -814,7 +814,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eI finally wrapped up some code I've been meaning to write for a while, its a wrapper for the \u003ca href=\"http://translate.google.com/\"\u003eGoogle Translate API\u003c/a\u003e. Its also the first serious time I've used \u003ccode\u003emethod_missing\u003c/code\u003e in a class, in this case its to add methods for translating between all the various languages.\u003c/p\u003e\n\n\u003cp\u003eIts fairly simple to use, there is an \u003ca href=\"http://github.com/caius/gtranslate/tree/master/examples.rb\"\u003eexamples.rb\u003c/a\u003e included with it, but the basic usage is just this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e# Convert from english to french\u003c/span\u003e\n\u003cspan class=\"no\"\u003eGoogle\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eTranslate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eenglish_to_french\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Hello\u0026quot;\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;Bonjour\u0026quot;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# There is also a short(er)-hand version\u003c/span\u003e\n\u003cspan class=\"no\"\u003eGoogle\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eTr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003een_to_fr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Hello\u0026quot;\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAs per usual with all my code its available on my \u003ca href=\"http://github.com/caius/\"\u003egithub account\u003c/a\u003e, as the \u003ca href=\"http://github.com/caius/gtranslate/\"\u003eGTranslate\u003c/a\u003e project. I'll throw some specs together for it and package it up as a gem soon.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eI finally wrapped up some code I've been meaning to write for a while, its a wrapper for the \u003ca href=\"http://translate.google.com/\"\u003eGoogle Translate API\u003c/a\u003e. Its also the first serious time I've used \u003ccode\u003emethod_missing\u003c/code\u003e in a class, in this case its to add methods for translating between all the various languages.\u003c/p\u003e\n\n\u003cp\u003eIts fairly simple to use, there is an \u003ca href=\"http://github.com/caius/gtranslate/tree/master/examples.rb\"\u003eexamples.rb\u003c/a\u003e included with it, but the basic usage is just this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"c1\"\u003e# Convert from english to french\u003c/span\u003e\n\u003cspan class=\"no\"\u003eGoogle\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eTranslate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eenglish_to_french\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;Bonjour\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# There is also a short(er)-hand version\u003c/span\u003e\n\u003cspan class=\"no\"\u003eGoogle\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eTr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003een_to_fr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs per usual with all my code its available on my \u003ca href=\"http://github.com/caius/\"\u003egithub account\u003c/a\u003e, as the \u003ca href=\"http://github.com/caius/gtranslate/\"\u003eGTranslate\u003c/a\u003e project. I'll throw some specs together for it and package it up as a gem soon.\u003c/p\u003e\n"
     },
     {
         "title" : "The Shell Meme",
@@ -825,7 +825,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eI ran across \u003ca href=\"http://lstoll.net/2008/04/shell-meme/\"\u003eThe Shell Meme\u003c/a\u003e on \u003ca href=\"http://lstoll.net/\"\u003eLincoln Stoll's\u003c/a\u003e blog, and figured I'd, uh, \u003cem\u003eborrow\u003c/em\u003e it.\u003c/p\u003e\n\n\u003cp\u003eRun this command in a new shell:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003ehistory\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e awk \u003cspan class=\"s1\"\u003e\u0026#39;{ a[$2]++ } END { for(i in a){printf \u0026quot;%5d\\t%s\\n \u0026quot;,a[i],i} }\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  sort -rn \u003cspan class=\"p\"\u003e|\u003c/span\u003e head\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eI get this as the output\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e379    git\n221    cd\n181    ssh\n77    sudo\n69    ruby\n66    ls\n34    rake\n33    m\n32    bb\n31    m.\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ccode\u003ebb\u003c/code\u003e changes directory straight into my \u003ca href=\"http://www.brightbox.co.uk/\"\u003eBrightBox\u003c/a\u003e source directory. \u003ccode\u003em\u003c/code\u003e and \u003ccode\u003em.\u003c/code\u003e are \u003ca href=\"http://macromates.com/\"\u003eTextMate\u003c/a\u003e alias's to open files or directories in TextMate for editing.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eI ran across \u003ca href=\"http://lstoll.net/2008/04/shell-meme/\"\u003eThe Shell Meme\u003c/a\u003e on \u003ca href=\"http://lstoll.net/\"\u003eLincoln Stoll's\u003c/a\u003e blog, and figured I'd, uh, \u003cem\u003eborrow\u003c/em\u003e it.\u003c/p\u003e\n\n\u003cp\u003eRun this command in a new shell:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"nb\"\u003ehistory\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e awk \u003cspan class=\"s1\"\u003e\u0026#39;{ a[$2]++ } END { for(i in a){printf \u0026#34;%5d\\t%s\\n \u0026#34;,a[i],i} }\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  sort -rn \u003cspan class=\"p\"\u003e|\u003c/span\u003e head\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI get this as the output\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e379    git\n221    cd\n181    ssh\n77    sudo\n69    ruby\n66    ls\n34    rake\n33    m\n32    bb\n31    m.\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ccode\u003ebb\u003c/code\u003e changes directory straight into my \u003ca href=\"http://www.brightbox.co.uk/\"\u003eBrightBox\u003c/a\u003e source directory. \u003ccode\u003em\u003c/code\u003e and \u003ccode\u003em.\u003c/code\u003e are \u003ca href=\"http://macromates.com/\"\u003eTextMate\u003c/a\u003e alias's to open files or directories in TextMate for editing.\u003c/p\u003e\n"
     },
     {
         "title" : "Sending Array elements as individual arguments in Ruby",
@@ -836,7 +836,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eLets imagine we've got an array of strings, and we want to print it out as a list of strings using printf. \u003cem\u003e(If you're complaining about my logic here, hold fire for just a second good sir/madam.)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eSo we start off with the array of strings, and then pass it to printf with the right amount of \u003ccode\u003e%s\u003c/code\u003e's in the format string:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;one\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;two\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;three\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;%s, %s, %s\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# ~\u0026gt; -:3:in `printf\u0026#39;: too few arguments (ArgumentError)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# ~\u0026gt;     from -:3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOh whoops, we've actually only passed \u003ccode\u003e\u0026quot;%s, %s, %s\u0026quot;, [\u0026quot;one\u0026quot;, \u0026quot;two\u0026quot;, \u0026quot;three\u0026quot;]\u003c/code\u003e to printf. So of course it whinges about not getting enough arguments. Now how do we fix this, how \u003cstrong\u003edo\u003c/strong\u003e we pass an array with each element a seperate argument to a method?\u003c/p\u003e\n\n\u003cp\u003eWe use the \u003ccode\u003e*\u003c/code\u003e of course! Just prefix the variable name with \u003ccode\u003e*\u003c/code\u003e and the method is passed each element as separate arguments, rather than the whole array as one arguement.\u003c/p\u003e\n\n\u003cp\u003eGoing back to our \u003ccode\u003eprintf\u003c/code\u003e example above, we simply insert one character \u003cem\u003e(the lowly \u003ccode\u003e*\u003c/code\u003e)\u003c/em\u003e and end up with a string being outputted.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;%s, %s, %s\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; one, two, three\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNow I realise this is a partially stupid example, but it serves to explain the point I wanted to make. If you were complaining about my choice of printf earlier, here is the way I think most rubyists would solve this problem instead.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;one\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;two\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;three\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot; \u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; one two three\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd if I wanted to be slightly cleverer with the \u003ccode\u003eprintf\u003c/code\u003e version, and print out an array containing an unknown number of strings, but of a set width, then I could do the following. \u003cem\u003e(NB: This is actually how I ran into this problem.)\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;one\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;two\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;three\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;%6s\u0026quot;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt;    one   two three\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd that is where the lowly \u003ccode\u003e*\u003c/code\u003e comes in.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eLets imagine we've got an array of strings, and we want to print it out as a list of strings using printf. \u003cem\u003e(If you're complaining about my logic here, hold fire for just a second good sir/madam.)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eSo we start off with the array of strings, and then pass it to printf with the right amount of \u003ccode\u003e%s\u003c/code\u003e's in the format string:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;one\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;two\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;three\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;%s, %s, %s\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# ~\u0026gt; -:3:in `printf\u0026#39;: too few arguments (ArgumentError)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# ~\u0026gt;     from -:3\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOh whoops, we've actually only passed \u003ccode\u003e\u0026quot;%s, %s, %s\u0026quot;, [\u0026quot;one\u0026quot;, \u0026quot;two\u0026quot;, \u0026quot;three\u0026quot;]\u003c/code\u003e to printf. So of course it whinges about not getting enough arguments. Now how do we fix this, how \u003cstrong\u003edo\u003c/strong\u003e we pass an array with each element a seperate argument to a method?\u003c/p\u003e\n\n\u003cp\u003eWe use the \u003ccode\u003e*\u003c/code\u003e of course! Just prefix the variable name with \u003ccode\u003e*\u003c/code\u003e and the method is passed each element as separate arguments, rather than the whole array as one arguement.\u003c/p\u003e\n\n\u003cp\u003eGoing back to our \u003ccode\u003eprintf\u003c/code\u003e example above, we simply insert one character \u003cem\u003e(the lowly \u003ccode\u003e*\u003c/code\u003e)\u003c/em\u003e and end up with a string being outputted.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;%s, %s, %s\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; one, two, three\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow I realise this is a partially stupid example, but it serves to explain the point I wanted to make. If you were complaining about my choice of printf earlier, here is the way I think most rubyists would solve this problem instead.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;one\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;two\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;three\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt; one two three\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd if I wanted to be slightly cleverer with the \u003ccode\u003eprintf\u003c/code\u003e version, and print out an array containing an unknown number of strings, but of a set width, then I could do the following. \u003cem\u003e(NB: This is actually how I ran into this problem.)\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;one\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;two\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;three\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;%6s\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# \u0026gt;\u0026gt;    one   two three\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd that is where the lowly \u003ccode\u003e*\u003c/code\u003e comes in.\u003c/p\u003e\n"
     },
     {
         "title" : "Merry Testing",
@@ -847,7 +847,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\n\n\u003cp\u003eJust a few examples of the same test written in a few languages. Its testing setting the date on an object that is created in the tests' setup method already. These fall under the unit testing, rather than full-stack testing.\u003c/p\u003e\n\n\u003ch3 id=\"testing-in-objc-with-ocunit-http-www-sente-ch-software-ocunit\"\u003eTesting in ObjC with \u003ca href=\"http://www.sente.ch/software/ocunit/\"\u003eOCUnit\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-objc\" data-lang=\"objc\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// Add a date and time\u003c/span\u003e\n\u003cspan class=\"p\"\u003e-\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"nf\"\u003etestSettingDate\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e    \n    \u003cspan class=\"bp\"\u003eNSDate\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003etheDate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"bp\"\u003eNSDate\u003c/span\u003e \u003cspan class=\"n\"\u003edate\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e        \n    \n    \u003cspan class=\"n\"\u003eSTAssertNoThrow\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"n\"\u003ecalc\u003c/span\u003e \u003cspan class=\"nl\"\u003esetDate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003etheDate\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"s\"\u003e@\u0026quot;Shouldn\u0026#39;t raise an exception\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// And it should match when pulled out as well\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSTAssertEqualObjects\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"n\"\u003ecalc\u003c/span\u003e \u003cspan class=\"n\"\u003edate\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003etheDate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                         \u003cspan class=\"s\"\u003e@\u0026quot;%@ should match %@\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                         \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecalc\u003c/span\u003e \u003cspan class=\"n\"\u003edate\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003etheDate\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"testing-in-ruby-using-rspec-http-rspec-info\"\u003eTesting in Ruby using \u003ca href=\"http://rspec.info/\"\u003eRSpec\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;should set the date successfully\u0026quot;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ethe_date\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eDate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoday\u003c/span\u003e\n\n  \u003cspan class=\"vi\"\u003e@calc\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ethe_date\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# And it should match when pulled out as well\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@calc\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ethe_date\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"testing-in-ruby-using-test-unit-http-www-ruby-doc-org-stdlib-libdoc-test-unit-rdoc-classes-test-unit-html\"\u003eTesting in Ruby using \u003ca href=\"http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/classes/Test/Unit.html\"\u003eTest::Unit\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etest_setting_date\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ethe_date\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eDate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoday\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@calc\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ethe_date\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# And it should match when pulled out as well\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_equal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vi\"\u003e@calc\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ethe_date\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3 id=\"testing-in-php-using-phpunit-http-phpun-it\"\u003eTesting in PHP using \u003ca href=\"http://phpun.it/\"\u003ePHPUnit\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"x\"\u003efunction testSettingDate()\u003c/span\u003e\n\u003cspan class=\"x\"\u003e{\u003c/span\u003e\n\u003cspan class=\"x\"\u003e    $date = date();\u003c/span\u003e\n\u003cspan class=\"x\"\u003e    $calc-\u0026gt;date = $date;\u003c/span\u003e\n\u003cspan class=\"x\"\u003e    # And it should match when pulled out as well\u003c/span\u003e\n\u003cspan class=\"x\"\u003e    $this-\u0026gt;assertEquals($calc-\u0026gt;date, $date);\u003c/span\u003e\n\u003cspan class=\"x\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n"
+        "content_html" : "\n\n\u003cp\u003eJust a few examples of the same test written in a few languages. Its testing setting the date on an object that is created in the tests' setup method already. These fall under the unit testing, rather than full-stack testing.\u003c/p\u003e\n\n\u003ch3 id=\"testing-in-objc-with-ocunit-http-www-sente-ch-software-ocunit\"\u003eTesting in ObjC with \u003ca href=\"http://www.sente.ch/software/ocunit/\"\u003eOCUnit\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-objc\" data-lang=\"objc\"\u003e// Add a date and time\n- (void)testSettingDate\n{    \n    NSDate *theDate = [NSDate date];        \n    \n    STAssertNoThrow([calc setDate:theDate], @\u0026#34;Shouldn\u0026#39;t raise an exception\u0026#34;);\n    // And it should match when pulled out as well\n    STAssertEqualObjects([calc date], theDate,\n                         @\u0026#34;%@ should match %@\u0026#34;,\n                         [calc date], theDate);\n\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"testing-in-ruby-using-rspec-http-rspec-info\"\u003eTesting in Ruby using \u003ca href=\"http://rspec.info/\"\u003eRSpec\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;should set the date successfully\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ethe_date\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eDate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoday\u003c/span\u003e\n\n  \u003cspan class=\"vi\"\u003e@calc\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ethe_date\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# And it should match when pulled out as well\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@calc\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshould\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ethe_date\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"testing-in-ruby-using-test-unit-http-www-ruby-doc-org-stdlib-libdoc-test-unit-rdoc-classes-test-unit-html\"\u003eTesting in Ruby using \u003ca href=\"http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/classes/Test/Unit.html\"\u003eTest::Unit\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003etest_setting_date\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ethe_date\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eDate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoday\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@calc\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ethe_date\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# And it should match when pulled out as well\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_equal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vi\"\u003e@calc\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ethe_date\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"testing-in-php-using-phpunit-http-phpun-it\"\u003eTesting in PHP using \u003ca href=\"http://phpun.it/\"\u003ePHPUnit\u003c/a\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan class=\"x\"\u003efunction testSettingDate()\n\u003c/span\u003e\u003cspan class=\"x\"\u003e{\n\u003c/span\u003e\u003cspan class=\"x\"\u003e    $date = date();\n\u003c/span\u003e\u003cspan class=\"x\"\u003e    $calc-\u0026gt;date = $date;\n\u003c/span\u003e\u003cspan class=\"x\"\u003e    # And it should match when pulled out as well\n\u003c/span\u003e\u003cspan class=\"x\"\u003e    $this-\u0026gt;assertEquals($calc-\u0026gt;date, $date);\n\u003c/span\u003e\u003cspan class=\"x\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e"
     },
     {
         "title" : "Think Visibility: An Online Marketing Conference",
@@ -924,7 +924,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\n\n\u003cp\u003eUsually for me this happens when I have an existing project and I setup a \u003ca href=\"http://github.com/\"\u003egithub\u003c/a\u003e repo for it. As part of the setup for the github project, it gives you the commands to run to add the github repo as a remote to my local git repo.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecd existing_git_repo\ngit remote add origin git@github.com:caius/foo.git\ngit push origin master\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe problem then is you've added the remote account, but the local master branch isn't tracking the remote master branch, so when you try and just \u003ccode\u003egit pull\u003c/code\u003e it will fail with a message telling you to set the remote refs up.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ git pull  \nYou asked me to pull without telling me which branch you  \nwant to merge with, and 'branch.master.merge' in  \nyour configuration file does not tell me either.  Please  \nname which branch you want to merge on the command line and  \ntry again (e.g. 'git pull \u0026lt;repository\u0026gt; \u0026lt;refspec\u0026gt;').  \nSee git-pull(1) for details on the refspec.  \n\nIf you often merge with the same branch, you may want to  \nconfigure the following variables in your configuration  \nfile:\n\n    branch.master.remote = \u0026lt;nickname\u0026gt;\n    branch.master.merge = \u0026lt;remote-ref\u0026gt;\n    remote.\u0026lt;nickname\u0026gt;.url = \u0026lt;url\u0026gt;\n    remote.\u0026lt;nickname\u0026gt;.fetch = \u0026lt;refspec\u0026gt;\n\nSee git-config(1) for details.\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe answer is to do what it says funnily enough, and add the remote refs tracking to the config file. The easiest way I've found of doing this is to edit \u003ccode\u003e.git/config\u003c/code\u003e and add the following at the bottom of it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ini\" data-lang=\"ini\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003e[branch \u0026quot;master\u0026quot;]\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eremote\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003eorigin\u003c/span\u003e\n\u003cspan class=\"s\"\u003e    merge = refs/heads/master\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cem\u003eRemember to change the branch or remote names if you need to.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you've added that to the config you can run \u003ccode\u003egit pull\u003c/code\u003e on the master branch and it'll do the usual automagical thing and pull the remote master branch changes into the local one!\u003c/p\u003e\n\n\u003ch4 id=\"updated-2008-11-09\"\u003eUpdated 2008-11-09\u003c/h4\u003e\n\n\u003cp\u003eSee CiarÃƒÆ’Ã‚Â¡n's comment below for an all-inclusive command to do the above.\u003c/p\u003e\n"
+        "content_html" : "\n\n\u003cp\u003eUsually for me this happens when I have an existing project and I setup a \u003ca href=\"http://github.com/\"\u003egithub\u003c/a\u003e repo for it. As part of the setup for the github project, it gives you the commands to run to add the github repo as a remote to my local git repo.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecd existing_git_repo\ngit remote add origin git@github.com:caius/foo.git\ngit push origin master\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe problem then is you've added the remote account, but the local master branch isn't tracking the remote master branch, so when you try and just \u003ccode\u003egit pull\u003c/code\u003e it will fail with a message telling you to set the remote refs up.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ git pull  \nYou asked me to pull without telling me which branch you  \nwant to merge with, and 'branch.master.merge' in  \nyour configuration file does not tell me either.  Please  \nname which branch you want to merge on the command line and  \ntry again (e.g. 'git pull \u0026lt;repository\u0026gt; \u0026lt;refspec\u0026gt;').  \nSee git-pull(1) for details on the refspec.  \n\nIf you often merge with the same branch, you may want to  \nconfigure the following variables in your configuration  \nfile:\n\n    branch.master.remote = \u0026lt;nickname\u0026gt;\n    branch.master.merge = \u0026lt;remote-ref\u0026gt;\n    remote.\u0026lt;nickname\u0026gt;.url = \u0026lt;url\u0026gt;\n    remote.\u0026lt;nickname\u0026gt;.fetch = \u0026lt;refspec\u0026gt;\n\nSee git-config(1) for details.\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe answer is to do what it says funnily enough, and add the remote refs tracking to the config file. The easiest way I've found of doing this is to edit \u003ccode\u003e.git/config\u003c/code\u003e and add the following at the bottom of it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ini\" data-lang=\"ini\"\u003e\u003cspan class=\"k\"\u003e[branch \u0026#34;master\u0026#34;]\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eremote\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003eorigin\n\u003c/span\u003e\u003cspan class=\"s\"\u003e    merge = refs/heads/master\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eRemember to change the branch or remote names if you need to.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you've added that to the config you can run \u003ccode\u003egit pull\u003c/code\u003e on the master branch and it'll do the usual automagical thing and pull the remote master branch changes into the local one!\u003c/p\u003e\n\n\u003ch4 id=\"updated-2008-11-09\"\u003eUpdated 2008-11-09\u003c/h4\u003e\n\n\u003cp\u003eSee CiarÃƒÆ’Ã‚Â¡n's comment below for an all-inclusive command to do the above.\u003c/p\u003e\n"
     },
     {
         "title" : "Removing non-existent source from rubygems",
@@ -946,7 +946,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\n\n\u003cp\u003eWhen I create a new rails app, I'm constantly going back to another project and stealing the \u003ccode\u003e.gitignore\u003c/code\u003e file from it to make sure that git doesn't know about certain files rails either updates frequently, or stores machine-specific data in. The latter is generally just \u003ccode\u003econfig/database.yml\u003c/code\u003e, because I develop alongside my colleagues at \u003ca href=\"http://brightbox.co.uk/\" title=\"Brightbox - Serious Rails Hosting\"\u003eBrightbox\u003c/a\u003e and we deploy via \u003ca href=\"http://www.capify.org/\"\u003ecapistrano\u003c/a\u003e, we always put the \u003ccode\u003edatabase.yml\u003c/code\u003e file in the shared directory on the server, so we each have our own version with our local credentials in it locally. And thus we don't want it to be tracked by git.\u003c/p\u003e\n\n\u003cp\u003eHere's what I've collated from various sources over the few weeks I've been using git + rails everyday.\u003c/p\u003e\n\n\u003ch4 id=\"gitignore\"\u003e.gitignore\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003econfig/database.yml\nlog/*.log\ntmp/*\n\n# OS X only\n.DS_Store\n**/.DS_Store\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen to make sure \u003ccode\u003elog/\u003c/code\u003e and \u003ccode\u003etmp/\u003c/code\u003e are tracked, convention is to add a blank \u003ccode\u003e.gitkeep\u003c/code\u003e file in them.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003etouch log/.gitkeep\ntouch tmp/.gitkeep\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n"
+        "content_html" : "\n\n\u003cp\u003eWhen I create a new rails app, I'm constantly going back to another project and stealing the \u003ccode\u003e.gitignore\u003c/code\u003e file from it to make sure that git doesn't know about certain files rails either updates frequently, or stores machine-specific data in. The latter is generally just \u003ccode\u003econfig/database.yml\u003c/code\u003e, because I develop alongside my colleagues at \u003ca href=\"http://brightbox.co.uk/\" title=\"Brightbox - Serious Rails Hosting\"\u003eBrightbox\u003c/a\u003e and we deploy via \u003ca href=\"http://www.capify.org/\"\u003ecapistrano\u003c/a\u003e, we always put the \u003ccode\u003edatabase.yml\u003c/code\u003e file in the shared directory on the server, so we each have our own version with our local credentials in it locally. And thus we don't want it to be tracked by git.\u003c/p\u003e\n\n\u003cp\u003eHere's what I've collated from various sources over the few weeks I've been using git + rails everyday.\u003c/p\u003e\n\n\u003ch4 id=\"gitignore\"\u003e.gitignore\u003c/h4\u003e\n\n\u003cpre\u003e\u003ccode\u003econfig/database.yml\nlog/*.log\ntmp/*\n\n# OS X only\n.DS_Store\n**/.DS_Store\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen to make sure \u003ccode\u003elog/\u003c/code\u003e and \u003ccode\u003etmp/\u003c/code\u003e are tracked, convention is to add a blank \u003ccode\u003e.gitkeep\u003c/code\u003e file in them.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003etouch log/.gitkeep\ntouch tmp/.gitkeep\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e"
     },
     {
         "title" : "Spanning Sync",
@@ -1001,7 +1001,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eThis is just another example showing how I refactor code down to its bare minimum. The reason why I do this so much (and indeed I think why ruby is so easy to read compared to other languages) is because it makes my code more readable and less of a bugger to pick up after a while.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePage\u003c/span\u003e\n  \u003cspan class=\"kp\"\u003eattr_accessor\u003c/span\u003e \u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\n        \n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eold_parent\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparent?\u003c/span\u003e\n      \u003cspan class=\"no\"\u003ePage\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparent_id\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eparent\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003ePage\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparent_id\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparent?\u003c/span\u003e\n    \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eold_parent\u003c/code\u003e and \u003ccode\u003eparent\u003c/code\u003e return exactly the same, but one is 2 lines compared to 5 and easier to read.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpdate:\u003c/strong\u003e \u003ca href=\"http://ciaranwal.sh/\"\u003eCiaran\u003c/a\u003e pointed out that the Page.parent method would only ever return false. Added the return statement to it to fix the bug.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eThis is just another example showing how I refactor code down to its bare minimum. The reason why I do this so much (and indeed I think why ruby is so easy to read compared to other languages) is because it makes my code more readable and less of a bugger to pick up after a while.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePage\u003c/span\u003e\n  \u003cspan class=\"kp\"\u003eattr_accessor\u003c/span\u003e \u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\n        \n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003eold_parent\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparent?\u003c/span\u003e\n      \u003cspan class=\"no\"\u003ePage\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparent_id\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003eparent\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003ePage\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparent_id\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eparent?\u003c/span\u003e\n    \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003eold_parent\u003c/code\u003e and \u003ccode\u003eparent\u003c/code\u003e return exactly the same, but one is 2 lines compared to 5 and easier to read.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpdate:\u003c/strong\u003e \u003ca href=\"http://ciaranwal.sh/\"\u003eCiaran\u003c/a\u003e pointed out that the Page.parent method would only ever return false. Added the return statement to it to fix the bug.\u003c/p\u003e\n"
     },
     {
         "title" : "Inaugural Habaricon",
@@ -1034,7 +1034,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\n\n\u003cp\u003eTo search your php.ini file quickly and easily with the option to use regular expressions, I tend to drop back to the \u003cacronym title=\"command line interface\"\u003ecli\u003c/acronym\u003e.  The reason for this is I can easily parse the output of \u003ccode\u003ephpinfo()\u003c/code\u003e with \u003ccode\u003egrep\u003c/code\u003e, and can do various things with the output, could even pass it to a script if I really wanted to.\u003c/p\u003e\n\n\u003cp\u003eHere is the line I use to search \u003ccode\u003ephpinfo()\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u0026lt;?php phpinfo() ?\u0026gt;\u0026quot;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e php \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep -i \u003cspan class=\"nv\"\u003e$search_string\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eIt passes the string through the php interpreter and then searches through it with grep.\u003c/p\u003e\n\n\u003cp\u003eYou can also do other nifty things with the shell \u0026amp; php + ruby especially (though I imagine python \u0026amp; perl work in the same way.) For instance I wanted to see if the following ruby would return the number of seconds since the \u003ca href=\"http:/en.wikipedia.org/wiki/Unix_Time\"\u003eepoch\u003c/a\u003e till now.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"no\"\u003eTime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enow\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_i\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNow I could fire up a PHP page and do something like the following\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;php: \u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;ruby: \u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"sb\"\u003e`ruby -e \u0026#39;print Time.now.to_i\u0026#39;`\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"x\"\u003e\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eBut what if I've not got a web server with PHP running on the machine I'm using? Well then I could drop back to the shell and run it through \u003ccode\u003ephp\u003c/code\u003e using \u003ccode\u003ecat\u003c/code\u003e as a way to insert multiple lines, and it would look like the following\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003ecat \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;PHP | php\u003c/span\u003e\n\u003cspan class=\"s\"\u003e\u0026lt;?php\u003c/span\u003e\n\u003cspan class=\"s\"\u003e  echo \u0026quot;php: \u0026quot; . time() . \u0026quot;\\n\u0026quot;;\u003c/span\u003e\n\u003cspan class=\"s\"\u003e  echo \u0026quot;ruby: \u0026quot; . `ruby -e \u0026#39;print Time.now.to_i\u0026#39;` . \u0026quot;\\n\u0026quot;;\u003c/span\u003e\n\u003cspan class=\"s\"\u003ePHP\u003c/span\u003e\n\nphp: \u003cspan class=\"m\"\u003e1203004463\u003c/span\u003e\nruby: \u003cspan class=\"m\"\u003e1203004463\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNow this works, but why do I want to remember all that php, and seeing as I have to drop back to the shell to access the ruby statement, why not just let the shell do all the work? So after a few seconds thinking, I came up with this\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003eruby -e \u003cspan class=\"s1\"\u003e\u0026#39;puts \u0026quot;ruby: #{Time.now.to_i}\u0026quot;\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026lt;?php echo \u0026quot;PHP: \u0026quot; . time() . \u0026quot;\\n\u0026quot; ?\u0026gt;\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e php\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThis runs the ruby code through \u003ccode\u003eruby\u003c/code\u003e and the php code through \u003ccode\u003ephp\u003c/code\u003e without dropping back to the shell from within a language interpreter :)\u003c/p\u003e\n\n\u003ch3 id=\"update\"\u003eUpdate:\u003c/h3\u003e\n\n\u003cp\u003eFangel pointed out \u003ccode\u003ephp -r\u003c/code\u003e is the equivilent of \u003ccode\u003eruby -e\u003c/code\u003e so the final commands could just be:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan\u003e\u003c/span\u003eruby -e \u003cspan class=\"s1\"\u003e\u0026#39;puts \u0026quot;ruby: #{Time.now.to_i}\u0026quot;\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\nphp -r \u003cspan class=\"s1\"\u003e\u0026#39;echo \u0026quot;PHP: \u0026quot;.time().\u0026quot;\\n\u0026quot;;\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n"
+        "content_html" : "\n\n\u003cp\u003eTo search your php.ini file quickly and easily with the option to use regular expressions, I tend to drop back to the \u003cacronym title=\"command line interface\"\u003ecli\u003c/acronym\u003e.  The reason for this is I can easily parse the output of \u003ccode\u003ephpinfo()\u003c/code\u003e with \u003ccode\u003egrep\u003c/code\u003e, and can do various things with the output, could even pass it to a script if I really wanted to.\u003c/p\u003e\n\n\u003cp\u003eHere is the line I use to search \u003ccode\u003ephpinfo()\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;?php phpinfo() ?\u0026gt;\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e php \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep -i \u003cspan class=\"nv\"\u003e$search_string\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt passes the string through the php interpreter and then searches through it with grep.\u003c/p\u003e\n\n\u003cp\u003eYou can also do other nifty things with the shell \u0026amp; php + ruby especially (though I imagine python \u0026amp; perl work in the same way.) For instance I wanted to see if the following ruby would return the number of seconds since the \u003ca href=\"http:/en.wikipedia.org/wiki/Unix_Time\"\u003eepoch\u003c/a\u003e till now.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"no\"\u003eTime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enow\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_i\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow I could fire up a PHP page and do something like the following\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;php: \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;ruby: \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"sb\"\u003e`ruby -e \u0026#39;print Time.now.to_i\u0026#39;`\u003c/span\u003e \u003cspan class=\"o\"\u003e.\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut what if I've not got a web server with PHP running on the machine I'm using? Well then I could drop back to the shell and run it through \u003ccode\u003ephp\u003c/code\u003e using \u003ccode\u003ecat\u003c/code\u003e as a way to insert multiple lines, and it would look like the following\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ecat \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;PHP | php\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026lt;?php\n\u003c/span\u003e\u003cspan class=\"s\"\u003e  echo \u0026#34;php: \u0026#34; . time() . \u0026#34;\\n\u0026#34;;\n\u003c/span\u003e\u003cspan class=\"s\"\u003e  echo \u0026#34;ruby: \u0026#34; . `ruby -e \u0026#39;print Time.now.to_i\u0026#39;` . \u0026#34;\\n\u0026#34;;\n\u003c/span\u003e\u003cspan class=\"s\"\u003ePHP\u003c/span\u003e\n\nphp: \u003cspan class=\"m\"\u003e1203004463\u003c/span\u003e\nruby: \u003cspan class=\"m\"\u003e1203004463\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow this works, but why do I want to remember all that php, and seeing as I have to drop back to the shell to access the ruby statement, why not just let the shell do all the work? So after a few seconds thinking, I came up with this\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eruby -e \u003cspan class=\"s1\"\u003e\u0026#39;puts \u0026#34;ruby: #{Time.now.to_i}\u0026#34;\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026lt;?php echo \u0026#34;PHP: \u0026#34; . time() . \u0026#34;\\n\u0026#34; ?\u0026gt;\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e php\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis runs the ruby code through \u003ccode\u003eruby\u003c/code\u003e and the php code through \u003ccode\u003ephp\u003c/code\u003e without dropping back to the shell from within a language interpreter :)\u003c/p\u003e\n\n\u003ch3 id=\"update\"\u003eUpdate:\u003c/h3\u003e\n\n\u003cp\u003eFangel pointed out \u003ccode\u003ephp -r\u003c/code\u003e is the equivilent of \u003ccode\u003eruby -e\u003c/code\u003e so the final commands could just be:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003eruby -e \u003cspan class=\"s1\"\u003e\u0026#39;puts \u0026#34;ruby: #{Time.now.to_i}\u0026#34;\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003ephp -r \u003cspan class=\"s1\"\u003e\u0026#39;echo \u0026#34;PHP: \u0026#34;.time().\u0026#34;\\n\u0026#34;;\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e"
     },
     {
         "title" : "Refactoring code logically",
@@ -1045,7 +1045,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\u003cp\u003eAnd now an example of how I write my ruby code and get it down to the bare, readable, minimum code needed. This is real life code taken from a website I'm building, but I've changed the objects to a blog post because more people will relate to that easier.\u003c/p\u003e\n\n\u003cp\u003eThe show object has an id passed in using the \u003ccode\u003eparams\u003c/code\u003e Hash, I want to check if that post exists in the database first.  If it does, then render the page, and if it doesn't return a 404 error page.\u003c/p\u003e\n\n\u003cp\u003eSo I start off by writing this in \u003cem\u003elonghand\u003c/em\u003e ruby, I'm using the \u003ca href=\"http://merbivore.com/\"\u003emerb\u003c/a\u003e framework with \u003ca href=\"http://datamapper.com/\"\u003eDataMapper\u003c/a\u003e ORM by the way.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003ePost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@post\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erender\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;404 - Not found\u0026quot;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNow whilst theres nothing wrong with this code, it just doesn't look right to me. There is a big if/else statement in there whilst I'm sure there doesn't need to be.\u003c/p\u003e\n\n\u003cp\u003eNow I know if I return at any point in a ruby method, it exits the method at that point. So the first thing to is to refactor the \u003ccode\u003eif\u003c/code\u003e test to remove a line of code. I shall assign \u003ccode\u003e@post\u003c/code\u003e to the result of the DB as the actual if statement's test.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003ePost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erender\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;404 - Not found\u0026quot;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eSo thats reading slightly better, and also is a line less of code. Now I wonder if I can use a \u003ccode\u003ereturn true\u003c/code\u003e in there to stop me having to explicitly state an \u003ccode\u003eelse\u003c/code\u003e clause.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erender\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;404 - Not found\u0026quot;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNow the eagerest amongst you will be wondering what the advantage of that code is. It doesn't appear any more readable (slightly less in fact as you have to figure out its an implicit else) and is exactly the same amount of lines as the previous example. But what if we change the \u003ccode\u003eif\u003c/code\u003e to an \u003ccode\u003eif !\u003c/code\u003e and flip the code logic around?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003ePost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;404 - not found\u0026quot;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erender\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNow a raise will stop the code executing, and in the real application you would in fact just redirect to your 404 error page. The problem now is the \u003ccode\u003eif !\u003c/code\u003e looks ugly and isn't easily readable.\u003c/p\u003e\n\n\u003cp\u003eAll \u003ccode\u003eunless\u003c/code\u003e does is \u003ccode\u003eif !\u003c/code\u003e, that is, if the inverse of the result of the test statement is true, then invoke the block given to it. A quick example for you:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e# without unless\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"vi\"\u003e@user\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elogged_in?\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Please login.\u0026quot;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \n\u003cspan class=\"c1\"\u003e# using unless\u003c/span\u003e\n\u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"vi\"\u003e@user\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elogged_in?\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Please login.\u0026quot;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNow whilst \u003ccode\u003eif !\u003c/code\u003e doesn't seem that bad compared to \u003ccode\u003eunless\u003c/code\u003e, the readablility of the code increases. It reads more as a flow of logic, and is quicker for the human brain to walk through (my brain anyway!)\u003c/p\u003e\n\n\u003cp\u003eSo using unless we get 4 lines of code that is easily readable.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003ePost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;404 - Not found\u0026quot;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erender\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eNow what if we go one step further and use the unless shorthand way of testing and exectuting one line of code?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;404 - Not found\u0026quot;\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003ePost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erender\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd that is generally how I write my code logically.  Of course for something simple like this I'd probably jump in at the last block having refactored it in my head first, but for more complex things I tend to write them exlicitly and then refactor them down whilst maintaining readability of my code.\u003c/p\u003e\n"
+        "content_html" : "\u003cp\u003eAnd now an example of how I write my ruby code and get it down to the bare, readable, minimum code needed. This is real life code taken from a website I'm building, but I've changed the objects to a blog post because more people will relate to that easier.\u003c/p\u003e\n\n\u003cp\u003eThe show object has an id passed in using the \u003ccode\u003eparams\u003c/code\u003e Hash, I want to check if that post exists in the database first.  If it does, then render the page, and if it doesn't return a 404 error page.\u003c/p\u003e\n\n\u003cp\u003eSo I start off by writing this in \u003cem\u003elonghand\u003c/em\u003e ruby, I'm using the \u003ca href=\"http://merbivore.com/\"\u003emerb\u003c/a\u003e framework with \u003ca href=\"http://datamapper.com/\"\u003eDataMapper\u003c/a\u003e ORM by the way.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003ePost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@post\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erender\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;404 - Not found\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow whilst theres nothing wrong with this code, it just doesn't look right to me. There is a big if/else statement in there whilst I'm sure there doesn't need to be.\u003c/p\u003e\n\n\u003cp\u003eNow I know if I return at any point in a ruby method, it exits the method at that point. So the first thing to is to refactor the \u003ccode\u003eif\u003c/code\u003e test to remove a line of code. I shall assign \u003ccode\u003e@post\u003c/code\u003e to the result of the DB as the actual if statement's test.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003ePost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erender\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;404 - Not found\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo thats reading slightly better, and also is a line less of code. Now I wonder if I can use a \u003ccode\u003ereturn true\u003c/code\u003e in there to stop me having to explicitly state an \u003ccode\u003eelse\u003c/code\u003e clause.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erender\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;404 - Not found\u0026#34;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow the eagerest amongst you will be wondering what the advantage of that code is. It doesn't appear any more readable (slightly less in fact as you have to figure out its an implicit else) and is exactly the same amount of lines as the previous example. But what if we change the \u003ccode\u003eif\u003c/code\u003e to an \u003ccode\u003eif !\u003c/code\u003e and flip the code logic around?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003ePost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;404 - not found\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erender\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow a raise will stop the code executing, and in the real application you would in fact just redirect to your 404 error page. The problem now is the \u003ccode\u003eif !\u003c/code\u003e looks ugly and isn't easily readable.\u003c/p\u003e\n\n\u003cp\u003eAll \u003ccode\u003eunless\u003c/code\u003e does is \u003ccode\u003eif !\u003c/code\u003e, that is, if the inverse of the result of the test statement is true, then invoke the block given to it. A quick example for you:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"c1\"\u003e# without unless\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"vi\"\u003e@user\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elogged_in?\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Please login.\u0026#34;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \n\u003cspan class=\"c1\"\u003e# using unless\u003c/span\u003e\n\u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"vi\"\u003e@user\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elogged_in?\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Please login.\u0026#34;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow whilst \u003ccode\u003eif !\u003c/code\u003e doesn't seem that bad compared to \u003ccode\u003eunless\u003c/code\u003e, the readablility of the code increases. It reads more as a flow of logic, and is quicker for the human brain to walk through (my brain anyway!)\u003c/p\u003e\n\n\u003cp\u003eSo using unless we get 4 lines of code that is easily readable.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003ePost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;404 - Not found\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erender\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow what if we go one step further and use the unless shorthand way of testing and exectuting one line of code?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u003c/span\u003e\u003cspan class=\"nf\"\u003eshow\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;404 - Not found\u0026#34;\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vi\"\u003e@post\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003ePost\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n  \u003cspan class=\"n\"\u003erender\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd that is generally how I write my code logically.  Of course for something simple like this I'd probably jump in at the last block having refactored it in my head first, but for more complex things I tend to write them exlicitly and then refactor them down whilst maintaining readability of my code.\u003c/p\u003e\n"
     },
     {
         "title" : "Use datamapper sessions with merb \u0026 datamapper",
@@ -1067,7 +1067,7 @@
         "author" : {
           "name" : "Caius Durling"
         },
-        "content_html" : "\n\n\u003cp\u003eSo mother (who can't program) just posed me the question\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhy is Ruby your favourite programming language?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eMe being a show off jumped straight into \u003ca href=\"http://macromates.com/\"\u003eTextMate\u003c/a\u003e and banged out some code in real time to show her.  First up, a quick little one-liner of Ruby code to output a String:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Hello World\u0026quot;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;Hello World\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eSo she goes, \u0026quot;Sure, but whats so brilliant about that?\u0026quot; So I just decide to reverse the string, have it output in reverse order:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Hello World\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereverse\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026quot;dlroW olleH\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThen the next question comes, \u0026quot;So what makes that so much easier than in other languages?\u0026quot; Well now I was thinking on the spot about which other language I can bang out a quick example in without having to look up too much information.  PHP seems the logical choice, being the language I know best behind Ruby.\u003c/p\u003e\n\n\u003cp\u003eThinking about how to do it in PHP, I can't think of a function to reverse the content of a string, but I know that \u003ccode\u003earray_reverse()\u003c/code\u003e exists, so I just split it into an array and reverse that array.  Only problem is I can't remember how to split a string by \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e, I don't think \u003ccode\u003eexplode( \u0026quot;\u0026quot;, $var )\u003c/code\u003e does the job.  So I quickly jump in and write the following code to test my concern.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Hello World\u0026quot;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eexplode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003earray_reverse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"nb\"\u003eimplode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"x\"\u003e\u003c/span\u003e\n\u003cspan class=\"x\"\u003e# =\u0026gt; ERROR\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThe reason for the error is because I've missed a semi colon off the end of line 2, to this I get the response, \u0026quot;well thats certainly not as nice as ruby.\u0026quot; Just because one little character is missing!\u003c/p\u003e\n\n\u003cp\u003eSo I fix the semi colon and run it again, now I get an error complaining about explode not being able to split by a missing delimiter (the empty string - \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e)  So I go hunting through the \u003ca href=\"http://php.net/\"\u003ephp.net\u003c/a\u003e docs and find \u003ccode\u003estr_split()\u003c/code\u003e, which does exactly what I want it to.\u003c/p\u003e\n\n\u003cp\u003eIn replacing \u003ccode\u003eexplode()\u003c/code\u003e with \u003ccode\u003estr_split()\u003c/code\u003e and running it via the \u003ccode\u003ephp\u003c/code\u003e command line binary, I realise that I haven't got any \u003ccode\u003e\\n\u003c/code\u003e (newlines) at the end of it, so it doesn't display nicely in the terminal.  I thus update the script to the following and show her the result:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Hello World\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eexplode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003earray_reverse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"nb\"\u003eimplode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"x\"\u003e\u003c/span\u003e\n\u003cspan class=\"x\"\u003e# =\u0026gt; \u0026quot;dlroW olleH\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd so she goes away seeing why I prefer Ruby to other languages for \u003cem\u003emost\u003c/em\u003e programming I do. There are things Ruby fails at (and don't get me started on why rails isn't going to replace php!) and other places where it succeeds very well.\u003c/p\u003e\n\n\u003cp\u003eBut each to their own, and my own favourite is Ruby!\u003c/p\u003e\n\n\u003ch3 id=\"update\"\u003eUpdate\u003c/h3\u003e\n\n\u003cp\u003eAs pointed out in the comments, if I had looked a bit further I would've found \u003ccode\u003estrrev()\u003c/code\u003e which does the same as the \u003ccode\u003ereverse\u003c/code\u003e method in Ruby.  So in fact the final code would be:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Hello World\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereverse\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003evs\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"nb\"\u003estrrev\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Hello World\u0026quot;\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"x\"\u003e\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eSo it turns out this was a bad way to show why I prefer Ruby to PHP code wise to mother, think I might have to just bite the bullet and write about why I prefer \u003ccode\u003eobject.method\u003c/code\u003e to \u003ccode\u003emethod( object )\u003c/code\u003e!\u003c/p\u003e\n"
+        "content_html" : "\n\n\u003cp\u003eSo mother (who can't program) just posed me the question\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhy is Ruby your favourite programming language?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eMe being a show off jumped straight into \u003ca href=\"http://macromates.com/\"\u003eTextMate\u003c/a\u003e and banged out some code in real time to show her.  First up, a quick little one-liner of Ruby code to output a String:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Hello World\u0026#34;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;Hello World\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo she goes, \u0026quot;Sure, but whats so brilliant about that?\u0026quot; So I just decide to reverse the string, have it output in reverse order:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Hello World\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereverse\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026#34;dlroW olleH\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen the next question comes, \u0026quot;So what makes that so much easier than in other languages?\u0026quot; Well now I was thinking on the spot about which other language I can bang out a quick example in without having to look up too much information.  PHP seems the logical choice, being the language I know best behind Ruby.\u003c/p\u003e\n\n\u003cp\u003eThinking about how to do it in PHP, I can't think of a function to reverse the content of a string, but I know that \u003ccode\u003earray_reverse()\u003c/code\u003e exists, so I just split it into an array and reverse that array.  Only problem is I can't remember how to split a string by \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e, I don't think \u003ccode\u003eexplode( \u0026quot;\u0026quot;, $var )\u003c/code\u003e does the job.  So I quickly jump in and write the following code to test my concern.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Hello World\u0026#34;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eexplode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003earray_reverse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"nx\"\u003eimplode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\u003c/span\u003e\u003cspan class=\"x\"\u003e# =\u0026gt; ERROR\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe reason for the error is because I've missed a semi colon off the end of line 2, to this I get the response, \u0026quot;well thats certainly not as nice as ruby.\u0026quot; Just because one little character is missing!\u003c/p\u003e\n\n\u003cp\u003eSo I fix the semi colon and run it again, now I get an error complaining about explode not being able to split by a missing delimiter (the empty string - \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e)  So I go hunting through the \u003ca href=\"http://php.net/\"\u003ephp.net\u003c/a\u003e docs and find \u003ccode\u003estr_split()\u003c/code\u003e, which does exactly what I want it to.\u003c/p\u003e\n\n\u003cp\u003eIn replacing \u003ccode\u003eexplode()\u003c/code\u003e with \u003ccode\u003estr_split()\u003c/code\u003e and running it via the \u003ccode\u003ephp\u003c/code\u003e command line binary, I realise that I haven't got any \u003ccode\u003e\\n\u003c/code\u003e (newlines) at the end of it, so it doesn't display nicely in the terminal.  I thus update the script to the following and show her the result:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Hello World\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eexplode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$a\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003earray_reverse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nv\"\u003e$b\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"nx\"\u003eimplode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$c\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"x\"\u003e\n\u003c/span\u003e\u003cspan class=\"x\"\u003e# =\u0026gt; \u0026#34;dlroW olleH\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd so she goes away seeing why I prefer Ruby to other languages for \u003cem\u003emost\u003c/em\u003e programming I do. There are things Ruby fails at (and don't get me started on why rails isn't going to replace php!) and other places where it succeeds very well.\u003c/p\u003e\n\n\u003cp\u003eBut each to their own, and my own favourite is Ruby!\u003c/p\u003e\n\n\u003ch3 id=\"update\"\u003eUpdate\u003c/h3\u003e\n\n\u003cp\u003eAs pointed out in the comments, if I had looked a bit further I would've found \u003ccode\u003estrrev()\u003c/code\u003e which does the same as the \u003ccode\u003ereverse\u003c/code\u003e method in Ruby.  So in fact the final code would be:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"nb\"\u003eputs\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Hello World\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereverse\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003evs\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"nx\"\u003estrrev\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Hello World\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo it turns out this was a bad way to show why I prefer Ruby to PHP code wise to mother, think I might have to just bite the bullet and write about why I prefer \u003ccode\u003eobject.method\u003c/code\u003e to \u003ccode\u003emethod( object )\u003c/code\u003e!\u003c/p\u003e\n"
     },
     {
         "title" : "UK Parking",
diff --git i/public/feed.xml w/public/feed.xml
index fae6331..8790597 100644
--- i/public/feed.xml
+++ w/public/feed.xml
@@ -16,32 +16,24 @@
       
       <guid>http://caiustheory.com/git-git-git-git-git/</guid>
       <description>&lt;p&gt;Ever found you&#39;ve accidentally entered too many &lt;code&gt;git&lt;/code&gt;s in your terminal and wondered if there&#39;s a solution to it? I quite often type &lt;code&gt;git&lt;/code&gt; then go away and come back, then type a full &lt;code&gt;git status&lt;/code&gt; after it. This leads to a lovely (annoying) error out the box:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git git status
-git: &lt;span class=&#34;s1&#34;&gt;&amp;#39;git&amp;#39;&lt;/span&gt; is not a git command. See &lt;span class=&#34;s1&#34;&gt;&amp;#39;git --help&amp;#39;&lt;/span&gt;.
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git git status
+git: &lt;span class=&#34;s1&#34;&gt;&amp;#39;git&amp;#39;&lt;/span&gt; is not a git command. See &lt;span class=&#34;s1&#34;&gt;&amp;#39;git --help&amp;#39;&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;What a git.&lt;/p&gt;
 
 &lt;p&gt;My initial thought was overriding the &lt;code&gt;git&lt;/code&gt; binary in my &lt;code&gt;$PATH&lt;/code&gt; and having it strip any leading arguments that match &lt;code&gt;git&lt;/code&gt;, so we end up running just the &lt;code&gt;git status&lt;/code&gt; at the end of the arguments. An easier way is to just use &lt;a href=&#34;https://git-scm.com/docs/git-config&#34;&gt;&lt;code&gt;git-config&lt;/code&gt;&lt;/a&gt;&#39;s &lt;code&gt;alias.*&lt;/code&gt; functionality to expand the first argument being &lt;code&gt;git&lt;/code&gt; to a shell command.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;git config --global alias.git &lt;span class=&#34;s1&#34;&gt;&amp;#39;!exec git&amp;#39;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git config --global alias.git &lt;span class=&#34;s1&#34;&gt;&amp;#39;!exec git&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Which adds the following git config to your &lt;code&gt;.gitconfig&lt;/code&gt; file&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;[alias]&lt;/span&gt;
-  &lt;span class=&#34;na&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;!exec git&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;k&#34;&gt;[alias]&lt;/span&gt;
+  &lt;span class=&#34;na&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;!exec git&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And then you&#39;ll find you can &lt;code&gt;git git&lt;/code&gt; to your heart&#39;s content&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git sha
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git sha
 cc9c642663c0b63fba3964297c13ce9b61209313
 
 $ git git sha
 cc9c642663c0b63fba3964297c13ce9b61209313
 
 $ git git git git git git git git git git git git git git git git git git git git git git git git git git sha
-cc9c642663c0b63fba3964297c13ce9b61209313
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+cc9c642663c0b63fba3964297c13ce9b61209313&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;(&lt;code&gt;git sha&lt;/code&gt; is an alias for &lt;code&gt;git rev-parse HEAD&lt;/code&gt;.)&lt;/p&gt;
 
 &lt;p&gt;See what other git alias&#39; I have in my &lt;a href=&#34;https://github.com/caius/zshrc/blob/master/dotfiles/gitconfig&#34;&gt;&lt;code&gt;~/.gitconfig&lt;/code&gt;&lt;/a&gt;, and laugh at all the typo corrections I have in there. (Yes, git provides autocorrection if you enable it, but I&#39;m used to these typos working!)&lt;/p&gt;
@@ -326,7 +318,7 @@ static domain_name_servers=8.8.8.8,8.8.4.4
 &lt;/code&gt;&lt;/pre&gt;
 
 &lt;p&gt;And then it&#39;s time to handle WAN -&amp;gt; LAN traffic and the reverse. Make sure you have packet forwarding enabled, and then setup the firewall to handle NAT and also keep out undesirable traffic.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;sysctl net.ipv4.ip_forward&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sysctl net.ipv4.ip_forward&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
 
 iptables -F
 iptables -X
@@ -341,9 +333,7 @@ iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP
 iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
 iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
 iptables -t nat -A POSTROUTING -o ppp0 -j MASQUERADE
-iptables -A INPUT -j DROP
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+iptables -A INPUT -j DROP&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Hey presto, you have a working emergency router. In testing I found my fibre connection (80/20Mb) was slower than the traffic the RPi could push, so didn&#39;t notice any difference vs my normal router. (Although I did disable a bunch of automated stuff, so there was less contention on the WAN link.)&lt;/p&gt;
 </description>
     </item>
@@ -380,15 +370,13 @@ iptables -A INPUT -j DROP
       
       <guid>http://caiustheory.com/bash-script-setup/</guid>
       <description>&lt;p&gt;Recently I&#39;ve been writing a bunch of bash scripts for various things. As some up-front safety checks I&#39;ve taken to opening every script with the following:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/usr/bin/env bash&lt;/span&gt;
-
-&lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TRACE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -o xtrace
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/usr/bin/env bash
+&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
+&lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TRACE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -o xtrace
 &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -o errexit
 &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -o nounset
 &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -o pipefail
-&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -o noclobber
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -o noclobber&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Other things I&#39;m also trying to be good about doing:&lt;/p&gt;
 
 &lt;ul&gt;
@@ -519,17 +507,17 @@ ESCROW  UUID                                                    TYPE USER
 &lt;p&gt;I figured I&#39;d cheat a little and eyeball the &lt;code&gt;Gemfile.lock&lt;/code&gt; to see which gems had an explicit dependency pinning rails (or actionpack, activejob, etc) to a version lower than I want to upgrade to, so I could get an idea of what needs to be upgraded without having to do them all one-by-one.&lt;/p&gt;
 
 &lt;p&gt;Then instead of eyeballing &lt;code&gt;Gemfile.lock&lt;/code&gt;, I wrote an awk script to pull out the interesting dependencies (ie, anything that depends on rails gems) so I just have to check which versions they depend on by hand.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-awk&#34; data-lang=&#34;awk&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Reads a Gemfile.lock and outputs all dependencies that depend on rails&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-awk&#34; data-lang=&#34;awk&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Reads a Gemfile.lock and outputs all dependencies that depend on rails&lt;/span&gt;
 
 &lt;span class=&#34;nb&#34;&gt;BEGIN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;nx&#34;&gt;parent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
   &lt;span class=&#34;nx&#34;&gt;parent_printed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
-  &lt;span class=&#34;nx&#34;&gt;rails_gems&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;^(rail(s|ties)|action(mailer|pack|view)|active(job|model|record|support))$&amp;quot;&lt;/span&gt;
+  &lt;span class=&#34;nx&#34;&gt;rails_gems&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;^(rail(s|ties)|action(mailer|pack|view)|active(job|model|record|support))$&amp;#34;&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 
 &lt;span class=&#34;c1&#34;&gt;# We only want the specs from the GEM section&lt;/span&gt;
 &lt;span class=&#34;nb&#34;&gt;NR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/GEM/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
+&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 
 &lt;span class=&#34;c1&#34;&gt;# Skip parent gems we don&amp;#39;t care about (rails itselfâ€¦)&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/^ {4}[^ ]/&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
@@ -558,13 +546,9 @@ ESCROW  UUID                                                    TYPE USER
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 
   &lt;span class=&#34;kr&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
-&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Run it against your &lt;code&gt;Gemfile.lock&lt;/code&gt; for the app you&#39;re upgrading:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;awk -f rails5.awk Gemfile.lock
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;awk -f rails5.awk Gemfile.lock&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And you&#39;ll get output like this, to run through and see if any of the dependencies are pinning to lower versions than you need.&lt;/p&gt;
 
 &lt;pre&gt;&lt;code&gt;    coffee-rails (4.0.1)
@@ -619,11 +603,9 @@ ESCROW  UUID                                                    TYPE USER
 &lt;p&gt;I brought the machine up, choosing the second option for recovery at the grub menu. Waited for a login prompt, then logged in with &lt;code&gt;root&lt;/code&gt;/&lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;
 
 &lt;p&gt;Realised quite quickly that &lt;code&gt;/usbkey&lt;/code&gt; must be persisted on the &lt;code&gt;zones&lt;/code&gt; zfs pool otherwise the configuration would be lost after shutdown, so imported the correct pool, created a directory to mount into and then mounted the zfs share.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;zpool import zones
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;zpool import zones
 mkdir /usbkey
-mount -F zfs zones/usbkey /usbkey
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-</description>
+mount -F zfs zones/usbkey /usbkey&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
     
     <item>
@@ -667,16 +649,12 @@ mount -F zfs zones/usbkey /usbkey
       <description>&lt;p&gt;Given a FreeBSD instance without a configured network interface that you&#39;d like to configure, first check what the name of the interface you want to configure is with &lt;code&gt;ifconfig&lt;/code&gt;. (Mine is &lt;code&gt;em0&lt;/code&gt; in this instance.)&lt;/p&gt;
 
 &lt;p&gt;Then we need to add the configuration telling services that we want to use DHCP for this interface, and setting up our default router (use your IP, not mine!) too:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;cat &amp;gt;&amp;gt; rc.conf &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;CONF&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;ifconfig_em0=&amp;quot;DHCP&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;default_router=&amp;quot;192.168.1.1&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;CONF&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cat &amp;gt;&amp;gt; rc.conf &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;CONF
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;ifconfig_em0=&amp;#34;DHCP&amp;#34;
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;default_router=&amp;#34;192.168.1.1&amp;#34;
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;CONF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And then we need to start &lt;code&gt;dhclient&lt;/code&gt; on the given interface:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;service dhclient start em0
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;service dhclient start em0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Hey presto, you should see dhclient finding a DHCP server and being handed an IP address for &lt;code&gt;em0&lt;/code&gt;.&lt;/p&gt;
 </description>
     </item>
@@ -714,22 +692,18 @@ window.location=%22http://feeds.soundcloud.com/users/soundcloud:%22+u+
 &lt;p&gt;As a simple example, I&#39;m going to exec &lt;code&gt;/bin/echo&lt;/code&gt; with a hardcoded string from the go binary. &lt;em&gt;The program built here is in the &lt;a href=&#34;https://github.com/caius/gecho&#34;&gt;gecho&lt;/a&gt; (Gecko, geddit?) git repo, which each stage as a commit.&lt;/em&gt;&lt;/p&gt;
 
 &lt;p&gt;In our main function lets setup some variables we&#39;re going to need for arguments to &lt;code&gt;syscall.Exec&lt;/code&gt;:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
-  &lt;span class=&#34;nx&#34;&gt;cmdPath&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/bin/echo&amp;quot;&lt;/span&gt;
-  &lt;span class=&#34;nx&#34;&gt;cmdArgs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
+  &lt;span class=&#34;nx&#34;&gt;cmdPath&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/bin/echo&amp;#34;&lt;/span&gt;
+  &lt;span class=&#34;nx&#34;&gt;cmdArgs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;nx&#34;&gt;cmdEnv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;    
-&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;&lt;em&gt;(We could use &lt;code&gt;os.Environ()&lt;/code&gt; for &lt;code&gt;cmdEnv&lt;/code&gt; to take the ENV from the go binary, but we don&#39;t require anything from the environmnt here so it doesn&#39;t matter that we aren&#39;t.)&lt;/em&gt;&lt;/p&gt;
 
 &lt;p&gt;Now we have the arguments for &lt;code&gt;syscall.Exec&lt;/code&gt;, lets add that in and see what happens:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;syscall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmdPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmdArgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmdEnv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;syscall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmdPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmdArgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmdEnv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
-&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And running the file (&lt;code&gt;go run gecho.go&lt;/code&gt; compiles &amp;amp; runs for us) gives the following output:&lt;/p&gt;
 
 &lt;pre&gt;&lt;code&gt;World
@@ -738,25 +712,21 @@ window.location=%22http://feeds.soundcloud.com/users/soundcloud:%22+u+
 &lt;p&gt;Err, say what now? Where&#39;s &amp;quot;Hello&amp;quot; gone?!&lt;/p&gt;
 
 &lt;p&gt;Took me a while to figure this out when I originally ran into this. The answer is staring us right in the face if we go look at the &lt;a href=&#34;http://golang.org/pkg/syscall/#Exec&#34;&gt;syscall.Exec docs&lt;/a&gt;. Lets have a look at the function signature, argument names and all:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;argv0&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;argv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;envv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;argv0&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;argv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;envv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Hmm. The first argument is &lt;code&gt;argv0&lt;/code&gt; (and a string), rather than &lt;code&gt;binaryPath&lt;/code&gt; or something similar. The second argument is then &lt;code&gt;argv&lt;/code&gt; and an array of strings.&lt;/p&gt;
 
 &lt;p&gt;&lt;em&gt;At this point I remember that the first element of &lt;code&gt;argv&lt;/code&gt; in other runtimes is the name of the binary or command invoked - &lt;code&gt;$0&lt;/code&gt; in a bash script is the name of the script for example.&lt;/em&gt;&lt;/p&gt;
 
 &lt;p&gt;The answer is simple. &lt;code&gt;cmdArgs&lt;/code&gt; in our script should have &lt;code&gt;/bin/echo&lt;/code&gt; as the first element, and then we pass &lt;code&gt;cmdArgs[0], cmdArgs&lt;/code&gt; as the first two arguments to &lt;code&gt;syscall.Exec&lt;/code&gt;. Lets give that a go:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
-  &lt;span class=&#34;nx&#34;&gt;cmdArgs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;/bin/echo&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
+  &lt;span class=&#34;nx&#34;&gt;cmdArgs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/bin/echo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;World&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   &lt;span class=&#34;nx&#34;&gt;cmdEnv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
 
   &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;syscall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmdArgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmdArgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmdEnv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And running it (&lt;code&gt;go run gecho.go&lt;/code&gt; remember) gives the expected output:&lt;/p&gt;
 
 &lt;pre&gt;&lt;code&gt;Hello World
@@ -790,9 +760,7 @@ window.location=%22http://feeds.soundcloud.com/users/soundcloud:%22+u+
 &lt;/ul&gt;
 
 &lt;p&gt;A quick way to do that is with &lt;code&gt;sed&lt;/code&gt; &lt;em&gt;(renaming &amp;quot;fred&amp;quot; to &amp;quot;beth&amp;quot; here)&lt;/em&gt;:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;sed -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/fred/beth/g&amp;#39;&lt;/span&gt; -i /etc/hosts /etc/nodename
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sed -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/fred/beth/g&amp;#39;&lt;/span&gt; -i /etc/hosts /etc/nodename&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Then shutdown &amp;amp; start the zone &lt;em&gt;(from my testing a restart doesn&#39;t apply it)&lt;/em&gt;.&lt;/p&gt;
 </description>
     </item>
@@ -1181,15 +1149,13 @@ Hello World 2
 &lt;p&gt;One quick stop in &amp;quot;Script Editor.app&amp;quot; later, and I had the Applescript dictionary open for Safari.app. Lo and behold, there is rather handily an Applescript command called &amp;quot;add reading list item&amp;quot;, which does &lt;strong&gt;exactly&lt;/strong&gt; what I want. It has a few different options you can call it with, depending on whether you want Safari to go populate the title &amp;amp; preview text, or if you want to specify it yourself at save-time.&lt;/p&gt;
 
 &lt;p&gt;As I want to be able to call this from multiple runtimes, I&#39;ve chosen to save it as an executable, which leans on &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/osascript.1.html&#34;&gt;&lt;code&gt;osascript&lt;/code&gt;&lt;/a&gt; to run the actual Applescript. And here it is:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-applescript&#34; data-lang=&#34;applescript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#!/usr/bin/env osascript&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-applescript&#34; data-lang=&#34;applescript&#34;&gt;&lt;span class=&#34;c&#34;&gt;#!/usr/bin/env osascript&lt;/span&gt;
 
 &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;argv&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
-        &lt;span class=&#34;k&#34;&gt;tell&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Safari&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;reading&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;argv&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
+        &lt;span class=&#34;k&#34;&gt;tell&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Safari&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;reading&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;argv&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;run&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;run&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Save it as whatever you want (eg. &lt;code&gt;add_to_reading_list&lt;/code&gt;), make it executable (&lt;code&gt;chmod +x add_to_reading_list&lt;/code&gt;), and then run it with the URL you want saving as the first argument.&lt;/p&gt;
 
 &lt;pre&gt;&lt;code&gt;$ add_to_reading_list &amp;quot;http://caius.name/&amp;quot;
@@ -1329,54 +1295,44 @@ Tipping my hat to all that I passed.&lt;/p&gt;
 &lt;p&gt;Sometimes (usually in a one-liner) I want to do some work with a value without assigning it to a variable. Chucking an &lt;code&gt;#instance_eval&lt;/code&gt; call in there will set &lt;code&gt;self&lt;/code&gt; to the value, which saves having to assign it to a local value. Pretty much only used by me in one-off scripts or cli commands.&lt;/p&gt;
 
 &lt;h4 id=&#34;good&#34;&gt;Good&lt;/h4&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;24 Dec 2011&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;23 Jan 2013&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start_date&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; to &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_i&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; days&amp;quot;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;start_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;24 Dec 2011&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;23 Jan 2013&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
+&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start_date&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; to &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_i&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; days&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h4 id=&#34;bad&#34;&gt;Bad&lt;/h4&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;24 Dec 2011&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;23 Jan 2013&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance_eval&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; to &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_i&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; days&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;24 Dec 2011&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;23 Jan 2013&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
+  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance_eval&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; to &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_i&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; days&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;See, way less code! &lt;em&gt;cough, cough&lt;/em&gt;&lt;/p&gt;
 
 &lt;h3 id=&#34;bonus-usage-misdirection&#34;&gt;Bonus usage: Misdirection&lt;/h3&gt;
 
 &lt;p&gt;I also dropped some instance_eval on our campfire bot at &lt;a href=&#34;https://emberads.com/&#34;&gt;EmberAds&lt;/a&gt; to always blame one person, but without the code reading as such.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;sx&#34;&gt;%w{Dom Mel Caius CBetta Baz}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sample&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance_eval&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
-  &lt;span class=&#34;s2&#34;&gt;&amp;quot;(4V5A8F5T=&amp;amp;$`&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unpack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;u&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;sx&#34;&gt;%w{Dom Mel Caius CBetta Baz}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sample&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance_eval&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
+  &lt;span class=&#34;s2&#34;&gt;&amp;#34;(4V5A8F5T=&amp;amp;$`&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unpack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;u&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;That does not return one of the array elements as you might think it does from quickly scanning the codeâ€¦&lt;/p&gt;
 
 &lt;h2 id=&#34;set-method-local-variables-in-default-arguments&#34;&gt;Set method-local variables in default arguments&lt;/h2&gt;
 
 &lt;p&gt;You have a method and it takes one argument, which has a default value of &lt;code&gt;nil&lt;/code&gt; specified. You then run into the situation where you need to know if &lt;code&gt;nil&lt;/code&gt; was passed to the method, or if you&#39;re getting the default value of &lt;code&gt;nil&lt;/code&gt;. You could change the default value to something you choose to be the &amp;quot;default value&amp;quot; and unlikely to be passed from elsewhere as the argument&#39;s value, and reset the parameter to &lt;code&gt;nil&lt;/code&gt; after checking it, like this:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:default_value&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:default_value&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:default_value&lt;/span&gt;
-    &lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;caius&amp;quot;&lt;/span&gt;
+    &lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;caius&amp;#34;&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
 
-  &lt;span class=&#34;s2&#34;&gt;&amp;quot;name: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inspect&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; -- default: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inspect&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
+  &lt;span class=&#34;s2&#34;&gt;&amp;#34;name: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inspect&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; -- default: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inspect&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
 
-&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;name: \&amp;quot;caius\&amp;quot; -- default: true&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;fred&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;name: \&amp;quot;fred\&amp;quot; -- default: nil&amp;quot;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;name: \&amp;#34;caius\&amp;#34; -- default: true&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;fred&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;name: \&amp;#34;fred\&amp;#34; -- default: nil&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;That&#39;s quite a lot of code added to the method just to find out if we passed a default value or not. And if we forget to reset the value when it&#39;s &lt;code&gt;:default_value&lt;/code&gt; then we end up leaking that into whatever the method does with that value. We also have the problem that one day the program &lt;em&gt;could&lt;/em&gt; possibly send that &amp;quot;default value&amp;quot; we&#39;ve chosen as the actual parameter, and we&#39;d blindly change it thinking it was set as the default value, not the passed argument.&lt;/p&gt;
 
 &lt;p&gt;Instead we could (ab)use the power of ruby, and have ruby decide to set &lt;code&gt;default = true&lt;/code&gt; for us when, and only when, the variable is set &lt;em&gt;to&lt;/em&gt; the default value.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;caius&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
-  &lt;span class=&#34;s2&#34;&gt;&amp;quot;name: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inspect&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; -- default: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inspect&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;caius&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
+  &lt;span class=&#34;s2&#34;&gt;&amp;#34;name: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inspect&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; -- default: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inspect&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
 
-&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;name: \&amp;quot;caius\&amp;quot; -- default: true&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;fred&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;name: \&amp;quot;fred\&amp;quot; -- default: nil&amp;quot;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;name: \&amp;#34;caius\&amp;#34; -- default: true&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;fred&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;name: \&amp;#34;fred\&amp;#34; -- default: nil&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;As you can see, the output is identical. Yet we have no extra code &lt;em&gt;inside&lt;/em&gt; the method to figure out if we were given the default value or not. And as a bonus to that, we no longer have to check for a specific value being passed and presume that is actually the default, and not one passed by the program elsewhere.&lt;/p&gt;
 
 &lt;p&gt;I posted this one in &lt;a href=&#34;https://gist.github.com/1528785&#34;&gt;a gist&lt;/a&gt; a while back (to show &lt;a href=&#34;http://avdi.org/&#34;&gt;Avdi&lt;/a&gt; it looks like), and people came up with some more insane things to do with it, including &lt;a href=&#34;https://gist.github.com/1528785#comment-71861&#34;&gt;returning early&lt;/a&gt;, &lt;a href=&#34;https://gist.github.com/1528785#comment-71862&#34;&gt;raising errors&lt;/a&gt; or even &lt;a href=&#34;https://gist.github.com/1528785#comment-71876&#34;&gt;redefining the current method&lt;/a&gt;, all from the argument list! I&#39;d suggest going to read them, it&#39;s a mixture of OMG HAHA and OMFG NO WAY WHYY?!?!.&lt;/p&gt;
@@ -1400,92 +1356,70 @@ Tipping my hat to all that I passed.&lt;/p&gt;
 &lt;h3 id=&#34;multiple-equality-comparisons&#34;&gt;Multiple equality comparisons&lt;/h3&gt;
 
 &lt;p&gt;Testing the equality of an object against another is fairly simple, just do &lt;code&gt;foo == &amp;quot;bar&amp;quot;&lt;/code&gt;. However, I usually try to test against multiple objects in a slightly different way. Your first thought might be that the easiest way is just to chain a series of &lt;code&gt;==&lt;/code&gt; with the OR (&lt;code&gt;||&lt;/code&gt;) operator.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:sed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;baz&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:sed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;I much prefer to flip it around, think of the objects I&#39;m testing against as a collection (&lt;code&gt;Array&lt;/code&gt;), and then ask them if they contain the object I&#39;m checking. And for that, I use &lt;code&gt;Array#include?&lt;/code&gt;&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:sed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;baz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:sed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;&lt;em&gt;(And if you&#39;re only testing against strings, you could use &lt;code&gt;%w(bar baz)&lt;/code&gt; as a shortcut to create the array. Here&#39;s more &lt;a href=&#34;http://caiustheory.com/ruby-shortcuts&#34;&gt;ruby shortcuts&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;
 
 &lt;h3 id=&#34;assigning-multiple-items-from-a-nested-hash-to-variables&#34;&gt;Assigning multiple items from a nested hash to variables&lt;/h3&gt;
 
 &lt;p&gt;Occasionally I find myself needing to be given a hash of a hash of data (most recently, an &lt;a href=&#34;https://github.com/intridea/omniauth/wiki&#34;&gt;omniauth&lt;/a&gt; auth hash) and assign some values from it to separate variables within my code. Given the following hash, containing a nested hash:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;details&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
-  &lt;span class=&#34;ss&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;details&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
+  &lt;span class=&#34;ss&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;12345&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
-    &lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Caius Durling&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
-    &lt;span class=&#34;ss&#34;&gt;nickname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;caius&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
+    &lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Caius Durling&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
+    &lt;span class=&#34;ss&#34;&gt;nickname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;caius&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
-&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Lets say we want to extract the name and nickname fields from &lt;code&gt;details[:info]&lt;/code&gt; hash into their own local variables (or instance variables within a class, more likely.) We should probably handle the case of &lt;code&gt;details[:info]&lt;/code&gt; not being a hash, and try not to read from it if that&#39;s the case - so we might end up with something like the following:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
 &lt;span class=&#34;n&#34;&gt;nickname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:nickname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
 
-&lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;Caius Durling&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;n&#34;&gt;nickname&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;caius&amp;quot;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;Caius Durling&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;n&#34;&gt;nickname&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;caius&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And then in the spirit of &lt;a href=&#34;http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;DRYing&lt;/a&gt; up our code, we see there&#39;s duplication in both lines in checking &lt;code&gt;details[:info]&lt;/code&gt; exists (not actually that it&#39;s a hash, but hey ho, we rely on upstream to send us &lt;code&gt;nil&lt;/code&gt; or a hash.) So we reduce it down using an if statement and give ourselves slightly less to type at the same time.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;details&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
   &lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;nickname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:nickname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
 
-&lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;Caius Durling&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;n&#34;&gt;nickname&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;caius&amp;quot;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;nb&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;Caius Durling&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;n&#34;&gt;nickname&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;caius&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h3 id=&#34;returning-two-values-conditionally&#34;&gt;Returning two values conditionally&lt;/h3&gt;
 
 &lt;p&gt;Sometimes a method will end with a ternary, where depending on a condition it&#39;ll either return one or another value. If this conditional returns true, then the first value is returned. Otherwise it returns the second value. You could quite easily write it out as an if/else longer-form block too.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;my_method&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;my_method&lt;/span&gt;
   &lt;span class=&#34;vi&#34;&gt;@blah&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:foo_matches&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:no_match&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;My brain finds picking the logic in this apart slightly harder mentally, than if I drop a &lt;a href=&#34;http://en.wikipedia.org/wiki/Return_early&#34;&gt;return early&lt;/a&gt; bomb on the method. Then it reads more akin to how I&#39;d think through the logic. Return the first value if this conditional returns true. Otherwise the method returns this second value. I think the second value being on a completely separate line helps me make this mental distinction quicker too.&lt;/p&gt;
 
 &lt;p&gt;So I&#39;d write it this way:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;my_method&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;my_method&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:foo_matches&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vi&#34;&gt;@blah&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:no_match&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h3 id=&#34;returning-nil-or-a-value-conditionally&#34;&gt;Returning nil or a value conditionally&lt;/h3&gt;
 
 &lt;p&gt;Following on from the last snippet, but taking advantage of the ruby runtime a bit more, is when you&#39;re wanting to return a value if a conditional is true, or otherwise false. The easy way is to just write &lt;code&gt;nil&lt;/code&gt; in the ternary:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;my_method&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;my_method&lt;/span&gt;
   &lt;span class=&#34;vi&#34;&gt;@foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:foo_matches&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;nil&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;However, we know ruby returns the result of the last expression in the method. And that if a single line conditional isn&#39;t met, it returns nil from the expression. Combining that, we can rewrite the previous example into this:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;my_method&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;my_method&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:foo_matches&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vi&#34;&gt;@foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:bar&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And it will still return nil in the case that &lt;code&gt;@foo&lt;/code&gt; doesn&#39;t match &lt;code&gt;:bar&lt;/code&gt;.&lt;/p&gt;
 
 &lt;h3 id=&#34;returning-a-boolean&#34;&gt;Returning a boolean&lt;/h3&gt;
 
 &lt;p&gt;Sometimes you have a method that returns the result of a conditional, but it&#39;s written to return true/false in a conditional instead.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;my_method&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;my_method&lt;/span&gt;
   &lt;span class=&#34;vi&#34;&gt;@foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;false&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;The really easy refactor here is to just remove the ternary and leave the conditional.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;my_method&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;my_method&lt;/span&gt;
   &lt;span class=&#34;vi&#34;&gt;@foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:bar&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And of course if you were returning &lt;code&gt;false&lt;/code&gt; when the conditional evaluates to &lt;code&gt;true&lt;/code&gt;, you can either negate the comparison (use &lt;code&gt;!=&lt;/code&gt; in that example), or negate the entire conditional result by prepending &lt;code&gt;!&lt;/code&gt; to the line.&lt;/p&gt;
 </description>
     </item>
@@ -1503,53 +1437,45 @@ Tipping my hat to all that I passed.&lt;/p&gt;
 &lt;p&gt;How can we use this, and why indeed do I love this fickle constant? I mostly use it for quick scripts where I need to process text data, rather than piping to STDIN.&lt;/p&gt;
 
 &lt;p&gt;Given a list of URLs that I want to open in my web browser and look at, I could do the following for instance:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;DATA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each_line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:chomp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
-  &lt;span class=&#34;sb&#34;&gt;`open &amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&amp;quot;`&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;no&#34;&gt;DATA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each_line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:chomp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
+  &lt;span class=&#34;sb&#34;&gt;`open &amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&amp;#34;`&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
 
-&lt;span class=&#34;cp&#34;&gt;__END__&lt;/span&gt;
-&lt;span class=&#34;cp&#34;&gt;http://google.com/&lt;/span&gt;
-&lt;span class=&#34;cp&#34;&gt;http://yahoo.com/&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;cp&#34;&gt;__END__
+&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;http://google.com/
+&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;http://yahoo.com/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;which upon running (on a mac) would open all the URLs listed in DATA in my default web browser. (For bonus points, use &lt;a href=&#34;https://github.com/copiousfreetime/launchy#readme&#34;&gt;Launchy&lt;/a&gt; for cross-platform compatibility.) Really handy &amp;amp; quick/simple when you&#39;ve got 500+ URLs to open at once to go through. (I once had a job that required me to do this daily. Fun.)&lt;/p&gt;
 
 &lt;p&gt;Or given a bunch of CSV data that you just want one column for, you could reach for &lt;code&gt;cut&lt;/code&gt; or &lt;code&gt;awk&lt;/code&gt; in the terminal, but ruby has a really good CSV library which I trust and know how to use already. Why not just use that &amp;amp; &lt;code&gt;DATA&lt;/code&gt; to pull out the field you want?&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;csv&amp;quot;&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;csv&amp;#34;&lt;/span&gt;
 
 &lt;span class=&#34;no&#34;&gt;CSV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;DATA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
-  &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;kName&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
+  &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kName&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
 
-&lt;span class=&#34;cp&#34;&gt;__END__&lt;/span&gt;
-&lt;span class=&#34;cp&#34;&gt;kId,kName,kURL&lt;/span&gt;
-&lt;span class=&#34;cp&#34;&gt;1,Google UK,http://google.co.uk&lt;/span&gt;
-&lt;span class=&#34;cp&#34;&gt;2,&amp;quot;Yahoo, UK&amp;quot;,http://yahoo.co.uk&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; Google UK&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; Yahoo, UK&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;cp&#34;&gt;__END__
+&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;kId,kName,kURL
+&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;1,Google UK,http://google.co.uk
+&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;2,&amp;#34;Yahoo, UK&amp;#34;,http://yahoo.co.uk&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; Google UK&lt;/span&gt;
+&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; Yahoo, UK&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;I find when the data I want to munge is already in my clipboard, and I can run ruby scripts directly from text editors without having to save a file, it saves having to write the data out to a file, have ruby read it back in, etc just to do something with the data. I can just write the script reading from &lt;code&gt;DATA&lt;/code&gt;, paste the data in and run it. Which also lets me run it iteratively and build up a slightly more complex script that I don&#39;t want to keep. Then do what I need with the output and close the file without saving it.&lt;/p&gt;
 
 &lt;p&gt;&lt;span id=&#34;fn1&#34;&gt;*&lt;/span&gt; technically DATA is an IO handler to read &lt;code&gt;__FILE__&lt;/code&gt;, which has been wound forward to the start of the first line after &lt;code&gt;__END__&lt;/code&gt; in the file. And it only exists for the first ruby file to be invoked by the interpreter.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;cat &amp;gt; tmp/data.rb &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;RUBY&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;p DATA.read&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;__END__&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;data.rb&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;RUBY&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cat &amp;gt; tmp/data.rb &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;RUBY
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;p DATA.read
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;__END__
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;data.rb
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;RUBY&lt;/span&gt;
 
 ruby tmp/data.rb
-&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;data.rb\n&amp;quot;&lt;/span&gt;
-
-cat &amp;gt; tmp/data-require.rb &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;RUBY&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;require &amp;quot;./tmp/data&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;RUBY&lt;/span&gt;
+&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;data.rb\n&amp;#34;
+&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
+cat &amp;gt; tmp/data-require.rb &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;RUBY
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;require &amp;#34;./tmp/data&amp;#34;
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;RUBY&lt;/span&gt;
 
 ruby tmp/data-require.rb
-&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; /Users/caius/tmp/data.rb:1:in `&amp;lt;top (required)&amp;gt;&amp;#39;: uninitialized constant DATA (NameError)&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+# &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; /Users/caius/tmp/data.rb:1:in &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&amp;lt;top &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;required&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&amp;gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;: uninitialized constant DATA &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;NameError&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And because it&#39;s a file handle pointing at the current file, you can rewind it and read the entire ruby script into itselfâ€¦&lt;/p&gt;
 
 &lt;pre&gt;&lt;code&gt;$ ruby tmp/readself.rb 
@@ -1573,26 +1499,22 @@ something goes here
 &lt;p&gt;Recently I was searching for something else to do with nginx and ran across &lt;a href=&#34;http://www.ruby-forum.com/topic/125810&#34;&gt;a mailing list thread&lt;/a&gt; about using the maxmind database with nginx&#39;s &lt;a href=&#34;http://wiki.nginx.org/NginxHttpGeoModule&#34;&gt;HTTP Geo module&lt;/a&gt; and do the lookup directly in nginx itself. Finally got a chance to sit down and work out the logistics of doing this. I&#39;ve done this on an ubuntu 12.04 box, with the expected config file layouts that come with ubuntu.&lt;/p&gt;
 
 &lt;p&gt;Run the following on your server (as someone with write access to nginx config files):&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Generate the text file for nginx to import&lt;/span&gt;
-perl &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;curl -s https://raw.github.com/nginx/nginx/master/contrib/geo2nginx.pl&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
-&amp;lt; &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;tempfile&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
-curl -so &lt;span class=&#34;nv&#34;&gt;$zip&lt;/span&gt; http://geolite.maxmind.com/download/geoip/database/GeoIPCountryCSV.zip &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
-&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; unzip -p &lt;span class=&#34;nv&#34;&gt;$zip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &amp;gt; /etc/nginx/nginx_ip_country.txt
-
-&lt;span class=&#34;c1&#34;&gt;# Tell nginx to work out the IP country and store in variable&lt;/span&gt;
-&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;geo $IP_COUNTRY {&lt;/span&gt;
-&lt;span class=&#34;s1&#34;&gt;  default --;&lt;/span&gt;
-&lt;span class=&#34;s1&#34;&gt;  include /etc/nginx/nginx_ip_country.txt;&lt;/span&gt;
-&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt; &amp;gt; /etc/nginx/conf.d/ip_country.conf
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Generate the text file for nginx to import
+&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;perl &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;curl -s https://raw.github.com/nginx/nginx/master/contrib/geo2nginx.pl&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
+&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&amp;lt; &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;tempfile&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
+&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;curl -so &lt;span class=&#34;nv&#34;&gt;$zip&lt;/span&gt; http://geolite.maxmind.com/download/geoip/database/GeoIPCountryCSV.zip &lt;span class=&#34;se&#34;&gt;\
+&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; unzip -p &lt;span class=&#34;nv&#34;&gt;$zip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &amp;gt; /etc/nginx/nginx_ip_country.txt
 
+&lt;span class=&#34;c1&#34;&gt;# Tell nginx to work out the IP country and store in variable
+&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;geo $IP_COUNTRY {
+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;  default --;
+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;  include /etc/nginx/nginx_ip_country.txt;
+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt; &amp;gt; /etc/nginx/conf.d/ip_country.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Now go find the http block for the vhost you want to have the header passed to, and assuming it&#39;s passenger, add the following:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# http {&lt;/span&gt;
-  &lt;span class=&#34;c1&#34;&gt;# server_name freddy.com;&lt;/span&gt;
-  &lt;span class=&#34;k&#34;&gt;passenger_set_cgi_param&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;HTTP_X_IP_COUNTRY&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$IP_COUNTRY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# }&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# http {
+&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# server_name freddy.com;
+&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;passenger_set_cgi_param&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;HTTP_X_IP_COUNTRY&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$IP_COUNTRY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
+&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;(If you don&#39;t use passenger, look at the docs for &lt;a href=&#34;http://wiki.nginx.org/HttpProxyModule#proxy_pass_header&#34;&gt;proxy_pass_header&lt;/a&gt; or &lt;a href=&#34;http://wiki.nginx.org/HttpFastcgiModule#fastcgi_pass_header&#34;&gt;fastcgi_pass_header&lt;/a&gt; to see which you&#39;ll require for your setup.)&lt;/p&gt;
 
 &lt;p&gt;Reload nginx, and behold, &lt;code&gt;request.env[&amp;quot;HTTP_X_IP_COUNTRY&amp;quot;]&lt;/code&gt; (assuming a rack app running under ruby) will be a two letter country code, or &lt;code&gt;&amp;quot;--&amp;quot;&lt;/code&gt;.&lt;/p&gt;
@@ -1745,19 +1667,17 @@ Past Caius&lt;/p&gt;
       <description>&lt;p&gt;OS X Lion comes with ruby 1.8.7-p249 installed, although it&#39;s compiled against libedit rather than libreadline. Whilst libedit is a mostly-compatible replacement for libreadline, I find there&#39;s a couple of settings I&#39;m used to that don&#39;t work in libedit. (Like &lt;code&gt;history-beginning-search-backward&lt;/code&gt;.)&lt;/p&gt;
 
 &lt;p&gt;Luckily you can grab the source of ruby and compile just the readline extension, and move it into the right place for it to just work. Here&#39;s what&#39;s been working for me:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Install readline using homebrew&lt;/span&gt;
-brew install readline
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Install readline using homebrew
+&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;brew install readline
 
-&lt;span class=&#34;c1&#34;&gt;# Download the ruby source and check out 1.8.7-p249&lt;/span&gt;
-mkdir ~/tmp &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/tmp
+&lt;span class=&#34;c1&#34;&gt;# Download the ruby source and check out 1.8.7-p249
+&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;mkdir ~/tmp &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/tmp
 git clone git://github.com/ruby/ruby
 &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ruby
 git checkout v1_8_7_249
 &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ext/readline
 ruby extconf.rb --with-readline-dir&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;brew --prefix readline&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; --disable-libedit
-make
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+make&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Now you should have &lt;code&gt;readline.bundle&lt;/code&gt; in the current directory, and it should be compiled against your homebrew-installed readline library, rather than libedit that comes with the system. We can quickly double-check that by using &lt;code&gt;otool&lt;/code&gt; to check what the binary is linked against.&lt;/p&gt;
 
 &lt;pre&gt;&lt;code&gt;$ otool -L readline.bundle
@@ -1769,18 +1689,14 @@ readline.bundle:
 &lt;/code&gt;&lt;/pre&gt;
 
 &lt;p&gt;And in the output you should see a line listing &amp;quot;libreadline&amp;quot;, and no lines listing &amp;quot;libedit&amp;quot;. Which that shows, we&#39;ve compiled it properly then. Now the bundle is built we need to move it into the right place so it&#39;s loaded when ruby is invoked.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;RL_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/universal-darwin11.0&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# Back up the original bundle, just in cases&lt;/span&gt;
-sudo mv &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$RL_PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/readline.bundle&amp;quot;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$RL_PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/readline.bundle.libedit&amp;quot;&lt;/span&gt;
-sudo mv readline.bundle &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$RL_PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/readline.bundle&amp;quot;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nv&#34;&gt;RL_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/universal-darwin11.0&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;c1&#34;&gt;# Back up the original bundle, just in cases
+&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;sudo mv &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$RL_PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/readline.bundle&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$RL_PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/readline.bundle.libedit&amp;#34;&lt;/span&gt;
+sudo mv readline.bundle &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$RL_PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/readline.bundle&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And that&#39;s it. You&#39;ve got a proper compiled-against-readline installed ruby 1.8.7-p249 on 10.7 now.&lt;/p&gt;
 
 &lt;p&gt;One gotcha I ran into was needing to pass the same arguments to rvm when installing any other version of 1.8.7 on the same machine. Simple enough, just need to remember to do it though.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gcc-4.2 rvm install &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.8.7-p357 -C --with-readline-dir&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;brew --prefix readline&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; --disable-libedit
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-</description>
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nv&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;gcc-4.2 rvm install &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;.8.7-p357 -C --with-readline-dir&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;brew --prefix readline&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; --disable-libedit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
     
     <item>
@@ -1837,24 +1753,18 @@ Annoyingly, for we know they are fake.&lt;/p&gt;
       
       <guid>http://caiustheory.com/defining-ruby-superclasses-on-the-fly/</guid>
       <description>&lt;p&gt;Any rubyist that&#39;s defined a class should understand the following class definition:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Object&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Object&lt;/span&gt;
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;It creates a new Constant (&lt;code&gt;Foo&lt;/code&gt;) that is a subclass of &lt;code&gt;Object&lt;/code&gt;. Pretty straightforward. But what you might not know is that ruby executes each line it reads in as it reads them. So we could do the following to show that:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Object&lt;/span&gt;
-  &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;we just defined object!&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Object&lt;/span&gt;
+  &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;we just defined object!&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And get the following output when we run that file:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; we just defined object!&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; we just defined object!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;So.. we know ruby is executing things on the fly whilst defining classes for us. How can we use this for profit and shenanigans?! (Err, use this for vanquishing evil and creating readable code I mean. Honest.)&lt;/p&gt;
 
 &lt;p&gt;How about if we&#39;ve got a couple of opinionated people who like to think they&#39;ve got the biggest ego in the interpreter? The last one to be loaded likes to have any new people ushered into the interpreter to be a subclass of themselves. Lets abuse a global for storing it in, and use a method to choose that on the fly when creating a new class.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;current_awkward_bugger&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;current_awkward_bugger&lt;/span&gt;
   &lt;span class=&#34;vg&#34;&gt;$awkward_bugger&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
 
@@ -1874,13 +1784,11 @@ Annoyingly, for we know they are fake.&lt;/p&gt;
 &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
 &lt;span class=&#34;no&#34;&gt;John&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;superclass&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; Harold&lt;/span&gt;
 
-&lt;span class=&#34;no&#34;&gt;Fred&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;superclass&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; Simon&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;no&#34;&gt;Fred&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;superclass&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; Simon&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Okay, so that looks a bit different to normally defined classes. We create &lt;code&gt;Simon&lt;/code&gt;, assign him to the awkward bugger global then create &lt;code&gt;Fred&lt;/code&gt;, who subclasses the return value of the &lt;code&gt;current_awkward_bugger&lt;/code&gt; method which happens to be &lt;code&gt;Simon&lt;/code&gt; currently. Then &lt;code&gt;Harold&lt;/code&gt; muscles his way into the interpreter and decides he&#39;s going to be the current awkward bugger, so poor &lt;code&gt;John&lt;/code&gt; gets to subclass &lt;code&gt;Harold&lt;/code&gt; even though he&#39;s defined in the same way as &lt;code&gt;Fred&lt;/code&gt;. (And as you can see on the last line, Fred&#39;s superclass is unchanged even though we changed the &lt;code&gt;awkward_bugger&lt;/code&gt; global.)&lt;/p&gt;
 
 &lt;p&gt;On a somewhat related note there&#39;s a lovely method called &lt;code&gt;const_missing&lt;/code&gt; that gets invoked when you call a Constant in ruby that isn&#39;t defined. (Much like &lt;code&gt;method_missing&lt;/code&gt; if you&#39;re familiar with that.) Means you can do even more shenanigans with non-existent superclasses for classes you&#39;re defining.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Simon&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Simon&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Harold&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
@@ -1897,9 +1805,7 @@ Annoyingly, for we know they are fake.&lt;/p&gt;
 
 &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Albert&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ArrogantBastard&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;span class=&#34;no&#34;&gt;Albert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;superclass&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; Harold&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;no&#34;&gt;Albert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;superclass&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; Harold&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;So here we&#39;re choosing from Simon and Harold on the fly each time a missing constant is referenced (in this case the aptly named &lt;code&gt;ArrogantBastard&lt;/code&gt; constant.) If you run this code yourself you&#39;ll see the superclasses change on each run according to what your computer picks that time.&lt;/p&gt;
 </description>
     </item>
@@ -1956,27 +1862,23 @@ From a bubble near Mars.&lt;/p&gt;
 &lt;p&gt;You should already have installed Xcode 4.2 from the app store, then basically the following steps are to grab the tarball from the &lt;a href=&#34;http://opensource.apple.com/release/developer-tools-41/&#34;&gt;4.1 developer tools source&lt;/a&gt;, unpack &amp;amp; compile it, then install it into the right places.&lt;/p&gt;
 
 &lt;p&gt;&lt;strong&gt;Update 2016-07-03:&lt;/strong&gt; I&#39;d suggest just using homebrew to install this these days:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;brew install homebrew/dupes/apple-gcc42
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;brew install homebrew/dupes/apple-gcc42&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h2 id=&#34;instructions&#34;&gt;Instructions&lt;/h2&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Grab and unpack the tarball&lt;/span&gt;
-mkdir ~/tmp &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/tmp
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Grab and unpack the tarball
+&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;mkdir ~/tmp &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/tmp
 curl -O http://opensource.apple.com/tarballs/gcc/gcc-5666.3.tar.gz
 tar zxf gcc-5666.3.tar.gz
 &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; gcc-5666.3
 
-&lt;span class=&#34;c1&#34;&gt;# Setup some stuff it requires&lt;/span&gt;
-mkdir -p build/obj build/dst build/sym
-&lt;span class=&#34;c1&#34;&gt;# And then build it. You should go make a cup of tea or five whilst this runs.&lt;/span&gt;
-gnumake install &lt;span class=&#34;nv&#34;&gt;RC_OS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;macos &lt;span class=&#34;nv&#34;&gt;RC_ARCHS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;i386 x86_64&amp;#39;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;TARGETS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;i386 x86_64&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
-  &lt;span class=&#34;nv&#34;&gt;SRCROOT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;OBJROOT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/build/obj &lt;span class=&#34;nv&#34;&gt;DSTROOT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/build/dst &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
-  &lt;span class=&#34;nv&#34;&gt;SYMROOT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/build/sym
-
-&lt;span class=&#34;c1&#34;&gt;# And finally install it&lt;/span&gt;
-sudo ditto build/dst /
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
+&lt;span class=&#34;c1&#34;&gt;# Setup some stuff it requires
+&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;mkdir -p build/obj build/dst build/sym
+&lt;span class=&#34;c1&#34;&gt;# And then build it. You should go make a cup of tea or five whilst this runs.
+&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;gnumake install &lt;span class=&#34;nv&#34;&gt;RC_OS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;macos &lt;span class=&#34;nv&#34;&gt;RC_ARCHS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;i386 x86_64&amp;#39;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;TARGETS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;i386 x86_64&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
+&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;SRCROOT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;OBJROOT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/build/obj &lt;span class=&#34;nv&#34;&gt;DSTROOT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/build/dst &lt;span class=&#34;se&#34;&gt;\
+&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;SYMROOT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/build/sym
 
+&lt;span class=&#34;c1&#34;&gt;# And finally install it
+&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;sudo ditto build/dst /&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And now you should have &lt;code&gt;gcc-4.2&lt;/code&gt; in your &lt;code&gt;$PATH&lt;/code&gt;, available to build all the things that &lt;code&gt;llvm-gcc&lt;/code&gt; fails to compile.&lt;/p&gt;
 </description>
     </item>
@@ -2010,12 +1912,10 @@ sudo ditto build/dst /
       <description>&lt;p&gt;Imagine you&#39;ve got a blogging app and it&#39;s currently generating URL paths like &lt;code&gt;posts/10&lt;/code&gt; for individual posts. You decide the path should contain the post title (in some form) to make your URLs friendlier when someone reads them. I know I certainly prefer to read &lt;a href=&#34;http://caiustheory.com/abusing-ruby-19-and-json-for-fun&#34;&gt;http://caiustheory.com/abusing-ruby-19-and-json-for-fun&lt;/a&gt; vs &lt;a href=&#34;http://caiustheory.com/?id=70&#34;&gt;http://caiustheory.com/?id=70&lt;/a&gt;. &lt;em&gt;(That&#39;s a fun blog post if you&#39;re into (ab)using ruby occasionally!)&lt;/em&gt;&lt;/p&gt;
 
 &lt;p&gt;Now you know &lt;em&gt;all&lt;/em&gt; about how to change the URL path that rails generatesâ€”just define &lt;code&gt;to_param&lt;/code&gt; in your app. Something simple that generates a slug consisting of hyphens and lowercase alphanumerical characters. For example:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 70-abusing-ruby-1-9-json-for-fun&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_param&lt;/span&gt;
-  &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gsub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/\W/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;squeeze&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;downcase&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 70-abusing-ruby-1-9-json-for-fun&lt;/span&gt;
+&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;to_param&lt;/span&gt;
+  &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gsub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/\W/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;squeeze&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;downcase&lt;/span&gt;
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;*&lt;strong&gt;NB&lt;/strong&gt;: You might want to go the route of storing the slug against the post record in the database and thus generating it before saving the record. In which case the rest of this post is sort of moot and you just need to search on that column. If not, then read on!*&lt;/p&gt;
 
 &lt;p&gt;Now we&#39;re generating a nice human-readable URL we need to change the way we find the post in the controller&#39;s show action. Up until now it&#39;s been a simple &lt;code&gt;@post = Post.find(params[:id])&lt;/code&gt; to grab the record out the database. Problem now is &lt;code&gt;params[:id]&lt;/code&gt; is &lt;code&gt;&amp;quot;70-abusing-ruby-1-9-json-for-fun&amp;quot;&lt;/code&gt;, rather than just &lt;code&gt;&amp;quot;70&amp;quot;&lt;/code&gt;. A quick check in the &lt;a href=&#34;http://ruby-doc.org/core/classes/String.html#M001149&#34;&gt;String#to_i&lt;/a&gt; docs reveals it &amp;quot;Returns the result of interpreting leading characters in str as an integer base base (between 2 and 36).&amp;quot; Basically it extracts the first number it comes across and returns it.&lt;/p&gt;
@@ -2027,16 +1927,14 @@ sudo ditto build/dst /
 &lt;p&gt;All we want to do is render the content if the id param matches the slug of the post exactly, and return a 404 page if it doesn&#39;t. We already know the id param (&lt;code&gt;params[:id]&lt;/code&gt;) and have pulled the Post object out of the database and stored it in an instance variable (&lt;code&gt;@post&lt;/code&gt;). The &lt;code&gt;@post&lt;/code&gt; knows how to generate it&#39;s own slug, using &lt;code&gt;#to_param&lt;/code&gt;.&lt;/p&gt;
 
 &lt;p&gt;So we end up with something like the following in our posts controller, which does all the above and correctly returns a 404 if someone enters an invalid slug (even if it starts with a valid post id):&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
   &lt;span class=&#34;vi&#34;&gt;@post&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;render_404&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;vi&#34;&gt;@post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_param&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
 
-&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;render_404&lt;/span&gt;
-  &lt;span class=&#34;n&#34;&gt;render&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;public/404.html&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:not_found&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;render_404&lt;/span&gt;
+  &lt;span class=&#34;n&#34;&gt;render&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Rails&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;public/404.html&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:not_found&lt;/span&gt;
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And going to an invalid path like &lt;code&gt;/posts/70-ruby-19-sucks-and-python-rules-4eva&lt;/code&gt; just renders the default rails 404 page with a 404 HTTP status. (If you want the id to appear at the end of the path, alter &lt;code&gt;to_param&lt;/code&gt; accordingly and do something like &lt;code&gt;params[:id].match(/\d+$/)&lt;/code&gt; to extract the Post&#39;s id to search on.)&lt;/p&gt;
 
 &lt;p&gt;Hey presto, we&#39;ve implemented human readable slugs that are tamper-proof (without storing them in the database.)&lt;/p&gt;
@@ -2095,23 +1993,17 @@ Caius&lt;/p&gt;
       <description>&lt;p&gt;Ever since I found out about the new hash syntax you can use in ruby 1.9, and how similar that syntax is to JSON, I&#39;ve been waiting for someone to realise you can just abuse &lt;code&gt;eval()&lt;/code&gt; for parsing (some) JSON now.&lt;/p&gt;
 
 &lt;p&gt;For example, lets say we have the following ruby hash, which could be generated by a RESTful api:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;thing&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;thing&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;ss&#34;&gt;:person&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
-        &lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;caius&amp;quot;&lt;/span&gt;
+        &lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;caius&amp;#34;&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;If we pull in the JSON gem and dump that out as a string, we get the following:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonstr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_json&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#39;{&amp;quot;person&amp;quot;:{&amp;quot;name&amp;quot;:&amp;quot;caius&amp;quot;}}&amp;#39;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;jsonstr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_json&lt;/span&gt;
+&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#39;{&amp;#34;person&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;caius&amp;#34;}}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;That&#39;s&amp;hellip; not quite what we wanted. It&#39;s not going to turn back into valid ruby as it is. Luckily javascript will parse objects without requiring the attributes to be wrapped in quotes, eg: &lt;code&gt;{some: &amp;quot;attribute&amp;quot;}&lt;/code&gt;. We could build a JSON emitter that does it properly, or we could just run it through a regular expression instead. &lt;em&gt;(Lets also add a space after the colon to aid readability.)&lt;/em&gt;&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonstr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gsub!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/&amp;quot;([^&amp;quot;]+)&amp;quot;: /&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;\1: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#39;{person: {name: &amp;quot;caius&amp;quot;}}&amp;#39;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;jsonstr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gsub!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/&amp;#34;([^&amp;#34;]+)&amp;#34;: /&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;\1: &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
+&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#39;{person: {name: &amp;#34;caius&amp;#34;}}&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Okay, so now we&#39;ve turned a ruby hash into a JSON hash, that can still be parsed by the browser. Here&#39;s a screenshot to prove that:&lt;/p&gt;
 
 &lt;p&gt;&lt;img src=&#34;http://farm6.static.flickr.com/5300/5425314597_43be5824cf_o.jpg&#34; alt=&#34;Valid JSON &#39;thing&#39;&#34; /&gt;&lt;/p&gt;
@@ -2121,12 +2013,10 @@ Caius&lt;/p&gt;
 &lt;p&gt;Now then, we&#39;ve proved that is successfully parsed into javascript objects by the browser, generated from a ruby hash. No great shakes there, that&#39;s fairly simple and has worked for ages. Now for my next trick, I&#39;m going to turn that string of JSON back into a ruby hash, all without going anywhere near the JSON gem.&lt;/p&gt;
 
 &lt;p&gt;Some of you might have guessed what I&#39;m about to do and have started hoping you&#39;ve guessed wrongly â€” just for the record I don&#39;t condone doing this except for fun and games. The JSON gem is there for a reason ;) With that little disclaimer out the way, here we go!&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;thing2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonstr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; {:person=&amp;gt;{:name=&amp;gt;&amp;quot;caius&amp;quot;}}&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;thing2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsonstr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
+&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; {:person=&amp;gt;{:name=&amp;gt;&amp;#34;caius&amp;#34;}}&lt;/span&gt;
 &lt;span class=&#34;n&#34;&gt;thing2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thing&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; true&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Oh snap! We just turned javascript objects back into valid ruby objects, in one simple method call. And we&#39;d be able to access the &amp;quot;caius&amp;quot; value by calling &lt;code&gt;thing2[:person][:name]&lt;/code&gt;, or creating OpenStructs from the hashes and calling &lt;code&gt;thing2.person.name&lt;/code&gt;. Which is uncannily like the JS!&lt;/p&gt;
 
 &lt;p&gt;&lt;strong&gt;Updated 2011-02-07&lt;/strong&gt;: &lt;a href=&#34;http://jens.ayton.se/&#34;&gt;Jens Ayton&lt;/a&gt; pointed out unquoted keys aren&#39;t strictly valid JSON, which is correct. Amended to say they&#39;re parsed as javascript objects instead, with no mention of it being valid JSON.&lt;/p&gt;
@@ -2146,9 +2036,7 @@ Caius&lt;/p&gt;
 &lt;p&gt;Had a quick look through &lt;code&gt;/Applications/App Store.app/Contents/MacOS/App Store&lt;/code&gt; with &lt;code&gt;strings&lt;/code&gt; (love that tool) and noted a few strings that looked interesting. (There&#39;s a full list &lt;a href=&#34;https://gist.github.com/768442&#34;&gt;in this gist&lt;/a&gt;.) There wasn&#39;t anything that explicitly stated it stopped it putting anything in the dock, but I did notice an option that stopped it showing &lt;strong&gt;install progress&lt;/strong&gt; in the dock.&lt;/p&gt;
 
 &lt;p&gt;Yank up a terminal window, bash out the following...&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;defaults write com.apple.appstore FRDebugShowInstallProgress -bool NO
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;defaults write com.apple.appstore FRDebugShowInstallProgress -bool NO&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;...head back to the MAS and install another (free) app, and hey presto, it&#39;s leaving my dock alone! Hopefully that&#39;s all I needed to continue using my Dock as I like. (Hidden, and left alone.)&lt;/p&gt;
 
 &lt;p&gt;&lt;strong&gt;Update 2011-01-06:&lt;/strong&gt;&lt;/p&gt;
@@ -2218,28 +2106,24 @@ Caius&lt;/p&gt;
 &lt;p&gt;The main place I&#39;ve seen it used (and used it myself) is in &lt;a href=&#34;http://www.culater.net/software/SIMBL/SIMBL.php&#34;&gt;SIMBL&lt;/a&gt; plugins. A SIMBL plugin is an NSBundle that contains code which is loaded (injected) into a running application shortly after said application is launched. It lets you extend (or &amp;quot;fix&amp;quot;) cocoa applications with additional features. So you have this bundle of code, that gets loaded into a running application some point after it starts, and you want to run some code as the bundle is loaded - usually to kick off doing whatever you want to do in the plugin. This is where &lt;code&gt;load&lt;/code&gt; becomes useful.&lt;/p&gt;
 
 &lt;p&gt;Here&#39;s a quick implementation that just logs to the console:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;@implementation&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MainController&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;    @implementation MainController
     
-    &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;load&lt;/span&gt;
-    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
-        &lt;span class=&#34;n&#34;&gt;NSlog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;@&amp;quot;MainController#load called&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
-    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+    + (void) load
+    {
+        NSlog(@&amp;#34;MainController#load called&amp;#34;);
+    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h3 id=&#34;now-where-does-macruby-come-into-this&#34;&gt;Now where does MacRuby come into this?&lt;/h3&gt;
 
 &lt;p&gt;Well I came across a need to do the same in ruby, have some code triggered when the class is loaded into the runtime. Tried implementing &lt;code&gt;Class.load&lt;/code&gt; but to no avail. Then remembered MacRuby is just ruby! And I can call any code from within my ruby class definition.&lt;/p&gt;
 
 &lt;p&gt;For continuity I still call it &lt;code&gt;Class.load&lt;/code&gt;, but then call it as soon as I&#39;ve defined it in the class. Eg:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MainController&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MainController&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;load&lt;/span&gt;
-    &lt;span class=&#34;no&#34;&gt;NSLog&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;MainController#load called&amp;quot;&lt;/span&gt;
+    &lt;span class=&#34;no&#34;&gt;NSLog&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;MainController#load called&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
 
   &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Of course, I&#39;m not sure when the Objective-C method is called, it&#39;s probably after the entire class has been defined rather than as soon as &lt;code&gt;load&lt;/code&gt; has been loaded into the runtime. So you might want to move the &lt;code&gt;self.load&lt;/code&gt; call to just before the closing &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;
 </description>
     </item>
@@ -2253,15 +2137,15 @@ Caius&lt;/p&gt;
       <description>&lt;p&gt;Ran into a problem today where I have a class with a few attributes on it, but I only want a certain three of those attributes to appear in the YAML dump of a class instance.&lt;/p&gt;
 
 &lt;p&gt;Diving straight into a code example--lets say we have a &lt;code&gt;Contact&lt;/code&gt; class, and we only want to dump the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;website&lt;/code&gt; attributes.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;yaml&amp;quot;&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;yaml&amp;#34;&lt;/span&gt;
 
 &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Contact&lt;/span&gt;
   &lt;span class=&#34;kp&#34;&gt;attr_accessor&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:telephone&lt;/span&gt;
 
   &lt;span class=&#34;c1&#34;&gt;# helper method to make setting up easy&lt;/span&gt;
-  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;
+  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
-      &lt;span class=&#34;n&#34;&gt;meffod&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_s&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;=&amp;quot;&lt;/span&gt;
+      &lt;span class=&#34;n&#34;&gt;meffod&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_s&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;=&amp;#34;&lt;/span&gt;
       &lt;span class=&#34;nb&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;meffod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;respond_to?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;meffod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
@@ -2269,40 +2153,32 @@ Caius&lt;/p&gt;
 
 &lt;span class=&#34;c1&#34;&gt;# And create an instance for us to play with&lt;/span&gt;
 &lt;span class=&#34;n&#34;&gt;caius&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Contact&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
-  &lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Caius&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
-  &lt;span class=&#34;ss&#34;&gt;:email&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;dev@caius.name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
-  &lt;span class=&#34;ss&#34;&gt;:website&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;http://caius.name/&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
-  &lt;span class=&#34;ss&#34;&gt;:telephone&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+  &lt;span class=&#34;ss&#34;&gt;:name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Caius&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
+  &lt;span class=&#34;ss&#34;&gt;:email&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dev@caius.name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
+  &lt;span class=&#34;ss&#34;&gt;:website&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://caius.name/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
+  &lt;span class=&#34;ss&#34;&gt;:telephone&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;12345&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;As we&#39;d expect when dumping this, all instance variables get dumped out:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;caius&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_yaml&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;caius&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_yaml&lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; --- !ruby/object:Contact &lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; email: dev@caius.name&lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; name: Caius&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; telephone: &amp;quot;12345&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; website: http://caius.name/&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; telephone: &amp;#34;12345&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; website: http://caius.name/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Initially I tried to override &lt;code&gt;to_yaml&lt;/code&gt; and unset the instance variables I didn&#39;t want showing up, but that just made them show up empty. After digging around a bit more, I happened across the &lt;a href=&#34;http://yaml4r.sourceforge.net/doc/page/type_families.htm&#34;&gt;Type Families&lt;/a&gt; page in the yaml4r docs, which right at the bottom mentions &lt;code&gt;to_yaml_properties&lt;/code&gt;.&lt;/p&gt;
 
 &lt;p&gt;Turns out &lt;code&gt;to_yaml_properties&lt;/code&gt; returns an array of instance variable names (as strings) that should be dumped out as part of the object. A quick method definition later, and we&#39;re only dumping the variables we want. (&lt;em&gt;See my &lt;a href=&#34;http://caiustheory.com/ruby-shortcuts&#34;&gt;Ruby Shortcuts&lt;/a&gt; post if you don&#39;t know what &lt;code&gt;%w()&lt;/code&gt; does&lt;/em&gt;)&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Contact&lt;/span&gt;
-  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;to_yaml_properties&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Contact&lt;/span&gt;
+  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;to_yaml_properties&lt;/span&gt;
     &lt;span class=&#34;sx&#34;&gt;%w(@name @email @website)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And now we dump the class, expecting only the three attributes to be outputted:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;caius&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_yaml&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;caius&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_yaml&lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; --- !ruby/object:Contact &lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; name: Caius&lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; email: dev@caius.name&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; website: http://caius.name/&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; website: http://caius.name/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Success!&lt;/p&gt;
 </description>
     </item>
@@ -2322,52 +2198,40 @@ Caius&lt;/p&gt;
 &lt;h3 id=&#34;strings&#34;&gt;Strings&lt;/h3&gt;
 
 &lt;p&gt;&lt;code&gt;%&lt;/code&gt; and &lt;code&gt;%Q&lt;/code&gt; are the same as using double quotes, including string interpolation. Really useful when you want to create a string that contains double quotes, but without the hassle of escaping them.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;sx&#34;&gt;%{}&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;sx&#34;&gt;%Q{}&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;&amp;quot;&lt;/span&gt;
-
-&lt;span class=&#34;sx&#34;&gt;%{caius}&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;caius&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;sx&#34;&gt;%{caius &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sx&#34;&gt;}&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;caius 5&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;sx&#34;&gt;%{some &amp;quot;foo&amp;quot; thing}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;some \&amp;quot;foo\&amp;quot; thing&amp;quot;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;sx&#34;&gt;%{}&lt;/span&gt;                 &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;sx&#34;&gt;%Q{}&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;&amp;#34;&lt;/span&gt;
 
+&lt;span class=&#34;sx&#34;&gt;%{caius}&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;caius&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;sx&#34;&gt;%{caius &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sx&#34;&gt;}&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;caius 5&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;sx&#34;&gt;%{some &amp;#34;foo&amp;#34; thing}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;some \&amp;#34;foo\&amp;#34; thing&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;&lt;code&gt;%q&lt;/code&gt; is equivalent to using single quotes. Behaves exactly the same, no string interpolation.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;sx&#34;&gt;%q{}&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#39;&amp;#39;&lt;/span&gt;
-&lt;span class=&#34;sx&#34;&gt;%q{caius}&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;caius&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;sx&#34;&gt;%q{caius #{5}}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;caius \#{5}&amp;quot;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;sx&#34;&gt;%q{}&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#39;&amp;#39;&lt;/span&gt;
+&lt;span class=&#34;sx&#34;&gt;%q{caius}&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;caius&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;sx&#34;&gt;%q{caius #{5}}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;caius \#{5}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h3 id=&#34;arrays&#34;&gt;Arrays&lt;/h3&gt;
 
 &lt;p&gt;&lt;code&gt;%w&lt;/code&gt; is the equivalent of using String#split. It takes a string and splits it on whitespace. With the added bonus of being able to escape whitespace too. &lt;code&gt;%W&lt;/code&gt; allows string interpolation.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;sx&#34;&gt;%w(foo bar sed)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; [&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;sed&amp;quot;]&lt;/span&gt;
-&lt;span class=&#34;sx&#34;&gt;%w(foo\ bar sed)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; [&amp;quot;foo bar&amp;quot;, &amp;quot;sed&amp;quot;]&lt;/span&gt;
-&lt;span class=&#34;sx&#34;&gt;%W(foo &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sx&#34;&gt; bar)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; [&amp;quot;foo&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;bar&amp;quot;]&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;sx&#34;&gt;%w(foo bar sed)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; [&amp;#34;foo&amp;#34;, &amp;#34;bar&amp;#34;, &amp;#34;sed&amp;#34;]&lt;/span&gt;
+&lt;span class=&#34;sx&#34;&gt;%w(foo\ bar sed)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; [&amp;#34;foo bar&amp;#34;, &amp;#34;sed&amp;#34;]&lt;/span&gt;
+&lt;span class=&#34;sx&#34;&gt;%W(foo &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sx&#34;&gt; bar)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; [&amp;#34;foo&amp;#34;, &amp;#34;5&amp;#34;, &amp;#34;bar&amp;#34;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h3 id=&#34;regexes&#34;&gt;Regexes&lt;/h3&gt;
 
 &lt;p&gt;&lt;code&gt;%r&lt;/code&gt; is just like using &lt;code&gt;//&lt;/code&gt; to create a regexp object. Comes in handy when you&#39;re writing a regex containing &lt;code&gt;/&lt;/code&gt; as you don&#39;t have to continually escape it.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;%r{foo|bar}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; /foo|bar/&lt;/span&gt;
-&lt;span class=&#34;sr&#34;&gt;%r{foo/bar}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; /foo\/bar/&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;sr&#34;&gt;%r{foo|bar}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; /foo|bar/&lt;/span&gt;
+&lt;span class=&#34;sr&#34;&gt;%r{foo/bar}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; /foo\/bar/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h3 id=&#34;symbols&#34;&gt;Symbols&lt;/h3&gt;
 
 &lt;p&gt;&lt;code&gt;%s&lt;/code&gt; creates a symbol, just like writing &lt;code&gt;:foo&lt;/code&gt; manually. It takes care of escaping the symbol, but unlike &lt;code&gt;:&amp;quot;&amp;quot;&lt;/code&gt; it doesn&#39;t allow string interpolation however.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;sx&#34;&gt;%s{foo}&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; :foo&lt;/span&gt;
-&lt;span class=&#34;sx&#34;&gt;%s{foo/bar}&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; :&amp;quot;foo/bar&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;ss&#34;&gt;:&amp;quot;foo-&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;&amp;quot;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; :&amp;quot;foo-5&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;sx&#34;&gt;%s{foo-#{5}}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; :&amp;quot;foo-\#{5}&amp;quot;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;sx&#34;&gt;%s{foo}&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; :foo&lt;/span&gt;
+&lt;span class=&#34;sx&#34;&gt;%s{foo/bar}&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; :&amp;#34;foo/bar&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;ss&#34;&gt;:&amp;#34;foo-&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;&amp;#34;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; :&amp;#34;foo-5&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;sx&#34;&gt;%s{foo-#{5}}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; :&amp;#34;foo-\#{5}&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h3 id=&#34;shelling-out&#34;&gt;Shelling out&lt;/h3&gt;
 
 &lt;p&gt;&lt;code&gt;%x&lt;/code&gt; is the same as backticks (&lt;code&gt;``&lt;/code&gt;), executes the command in a shell and returns the output as a string. And just like backticks it supports string interpolation.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`echo hi`&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;hi\n&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;sx&#34;&gt;%x{echo hi}&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;hi\n&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;sx&#34;&gt;%x{echo &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sx&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;5\n&amp;quot;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-</description>
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;sb&#34;&gt;`echo hi`&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;hi\n&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;sx&#34;&gt;%x{echo hi}&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;hi\n&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;sx&#34;&gt;%x{echo &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sx&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;5\n&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
     
     <item>
@@ -2416,13 +2280,9 @@ Thoughts?&lt;/p&gt;
       <description>&lt;p&gt;I recently came across the &lt;a href=&#34;http://developer.apple.com/mac/library/DOCUMENTATION/Darwin/Reference/ManPages/man1/at.1.html&#34;&gt;&lt;code&gt;at(1)&lt;/code&gt;&lt;/a&gt; command, and wondered why it wasn&#39;t executing jobs I gave it on my machine. Had a poke around the man pages, and discovered in &lt;a href=&#34;http://developer.apple.com/mac/library/documentation/Darwin/Reference/ManPages/man8/atrun.8.html&#34;&gt;&lt;code&gt;atrun(8)&lt;/code&gt;&lt;/a&gt; that by default &lt;code&gt;launchd(8)&lt;/code&gt; has the &lt;code&gt;atrun&lt;/code&gt; entry disabled.&lt;/p&gt;
 
 &lt;p&gt;To enable it (and have &lt;code&gt;at&lt;/code&gt; jobs fire) you simply need to run the following command once:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.atrun.plist
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.atrun.plist&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Personally I&#39;ve taken to using this to sleep my machine after a custom amount of time, mainly because my alarm clock/sleep timer of choice (&lt;a href=&#34;http://embraceware.com/awaken/&#34;&gt;Awaken&lt;/a&gt;) can&#39;t handle playing &lt;a href=&#34;http://www.spotify.com/&#34;&gt;Spotify&lt;/a&gt; for x minutes and then sleeping the machine. The following command puts the machine to sleep, which (quite effectively) silences spotify.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;osascript -e &amp;#39;tell app \&amp;quot;Finder\&amp;quot; to sleep&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; at &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;:00am
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;osascript -e &amp;#39;tell app \&amp;#34;Finder\&amp;#34; to sleep&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; at &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;:00am&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;See the &lt;a href=&#34;http://developer.apple.com/mac/library/DOCUMENTATION/Darwin/Reference/ManPages/man1/at.1.html&#34;&gt;&lt;code&gt;at(1)&lt;/code&gt;&lt;/a&gt; manpage for how to specify the time, but as I&#39;m only ever scheduling it on the same day (usually 20 minutes or so in advance), just passing the time works fine.&lt;/p&gt;
 </description>
     </item>
@@ -2515,12 +2375,10 @@ Thoughts?&lt;/p&gt;
 &lt;p&gt;The answer is quite simple really, just use &lt;code&gt;NSFileHandle&lt;/code&gt;. More specifically &lt;code&gt;+[NSFileHandle fileHandleWithStandardInput]&lt;/code&gt;. You can then read all data currently in &lt;code&gt;STDIN&lt;/code&gt;, monitor it for new data and anything else you can do with a normal &lt;code&gt;NSFileHandle&lt;/code&gt;.&lt;/p&gt;
 
 &lt;p&gt;And here&#39;s some example code, reads all data from &lt;code&gt;STDIN&lt;/code&gt; and stores it into an NSString:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSFileHandle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSFileHandle&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileHandleWithStandardInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
-&lt;span class=&#34;bp&#34;&gt;NSData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSData&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;dataWithData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;readDataToEndOfFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]];&lt;/span&gt;
-&lt;span class=&#34;bp&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
-  &lt;span class=&#34;nl&#34;&gt;initWithData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputData&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;NSFileHandle *input = [NSFileHandle fileHandleWithStandardInput];
+NSData *inputData = [NSData dataWithData:[input readDataToEndOfFile]];
+NSString *inputString = [[NSString alloc]
+  initWithData:inputData encoding:NSUTF8StringEncoding];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;&lt;em&gt;I&#39;m using this in GarbageCollected apps, memory management without GC is left as an exercise to the user.&lt;/em&gt;&lt;/p&gt;
 </description>
     </item>
@@ -2626,9 +2484,7 @@ nothing added to commit but untracked files present (use &amp;quot;git add&amp;q
 &lt;p&gt;My text editor &lt;a href=&#34;http://macromates.com/&#34;&gt;TextMate&lt;/a&gt; has a nice feature called &amp;quot;Filter through command&amp;quot; whereby you can filter the current document through a command.&lt;/p&gt;
 
 &lt;p&gt;Anyway, I&#39;ve never used it before, but today I had a text file with 30 or so url&#39;s in, each on a new line, so I thought I&#39;d test it out.  I selected it to input the document &amp;amp; to not replace the output.  I then entered the following command, which is a ruby command to take each line that isn&#39;t blank, and run the shell command &lt;code&gt;open $url&lt;/code&gt;.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;ruby -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;a = ARGF.read.scan(/\S+/); a.each { |x| `open #{x}` }&amp;#39;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ruby -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;a = ARGF.read.scan(/\S+/); a.each { |x| `open #{x}` }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;What this does is take ARGF (the document) and read it in line by line, but only the non-whitespace characters (so newlines, space, etc are ignored.)  And it assigns it to an array called &lt;code&gt;a&lt;/code&gt;.  What I then do is for each item of &lt;code&gt;a&lt;/code&gt;, we run it past the shell command &lt;code&gt;open&lt;/code&gt;, which on OS X if you pass it a URL it just opens that URL in the default browser.&lt;/p&gt;
 
 &lt;p&gt;My browser is Safari, and its set to open new links in a new tab in the foremost window.  So I ran the command, and hey presto, within a few seconds I had all the URL&#39;s loading in seperate tabs in Safari&#39;s foremost window!&lt;/p&gt;
@@ -2638,9 +2494,7 @@ nothing added to commit but untracked files present (use &amp;quot;git add&amp;q
 &lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
 
 &lt;p&gt;I just realised if you change the regex to scan for http://.* then it&#39;ll select all website URLs.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;ruby -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;a = ARGF.read.scan(/^http://.*$/); a.each { |url| `open #{url}` }&amp;#39;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-</description>
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ruby -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;a = ARGF.read.scan(/^http://.*$/); a.each { |url| `open #{url}` }&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
     
     <item>
@@ -2737,10 +2591,8 @@ $ plutil -convert xml1 SpringBoard.strings
 &lt;/code&gt;&lt;/pre&gt;
 
 &lt;p&gt;Then opening the file in TextMate was a bit more successful! I can actually understand what its defining now. Search through the file for &amp;quot;ringer&amp;quot; and I found the following lines:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RINGER_VOLUME&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
-&lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;ringer&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RINGER_VOLUME&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
+&lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;ringer&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Change the &amp;quot;ringer&amp;quot; to &amp;quot;Ringer&amp;quot; between the &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt; and my editing work is complete! Yes, it really is that easy to edit an interface string that is defined in a &lt;code&gt;.string&lt;/code&gt;. Now I just need to convert the file back to binary, and copy it back to the phone. Converting back to binary file is one line, just change the &lt;code&gt;xml1&lt;/code&gt; in the previous command to &lt;code&gt;binary1&lt;/code&gt;.&lt;/p&gt;
 
 &lt;pre&gt;&lt;code&gt;# On the mac
@@ -2780,37 +2632,31 @@ $ cp ~/SpringBoard.strings SpringBoard.strings
 &lt;p&gt;Currently I just do that by only validating if &lt;code&gt;ENV[&amp;quot;VALIDATION&amp;quot;]&lt;/code&gt; is set to anything, so a normal run of my cucumber stories will just test the app does what its supposed to do. If I run them with &lt;code&gt;VALIDATION=true&lt;/code&gt; then it will check my markup is valid as well.&lt;/p&gt;
 
 &lt;p&gt;&lt;strong&gt;features/support/env.rb&lt;/strong&gt;&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;markup_validity&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ENV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;VALIDATION&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;markup_validity&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ENV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;VALIDATION&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;&lt;strong&gt;features/step_definitions/general_steps.rb&lt;/strong&gt;&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Then&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;%r/the page is valid XHTML/&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
-  &lt;span class=&#34;vg&#34;&gt;$browser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;should&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;be_xhtml_strict&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ENV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;VALIDATION&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;no&#34;&gt;Then&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;%r/the page is valid XHTML/&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
+  &lt;span class=&#34;vg&#34;&gt;$browser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;should&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;be_xhtml_strict&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ENV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;VALIDATION&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;&lt;strong&gt;features/logging_in.feature&lt;/strong&gt;&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-cucumber&#34; data-lang=&#34;cucumber&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Feature:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt; Logging in&lt;/span&gt;
-&lt;span class=&#34;nf&#34;&gt;  In order to do stuff&lt;/span&gt;
-&lt;span class=&#34;nf&#34;&gt;  As a registered user&lt;/span&gt;
-&lt;span class=&#34;nf&#34;&gt;  I want to login&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cucumber&#34; data-lang=&#34;cucumber&#34;&gt;Feature: Logging in
+  In order to do stuff
+  As a registered user
+  I want to login
 
-&lt;span class=&#34;nf&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Scenario:&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt; Successful Login&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;    Given &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;there is a user called &amp;quot;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;Caius&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&amp;quot;&lt;/span&gt;
+  Scenario: Successful Login
+    Given there is a user called &amp;#34;Caius&amp;#34;
 
-&lt;span class=&#34;nf&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;When &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;I goto the homepage&lt;/span&gt;
-&lt;span class=&#34;nf&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Then &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;the page is valid XHTML&lt;/span&gt;
+    When I goto the homepage
+    Then the page is valid XHTML
 
-&lt;span class=&#34;nf&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;When &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;I click on the &amp;quot;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;Login&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&amp;quot; link&lt;/span&gt;
-&lt;span class=&#34;nf&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Then &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;I am redirected to the login page&lt;/span&gt;
-&lt;span class=&#34;nf&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;And &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;the page is valid XHTML&lt;/span&gt;
-
-&lt;span class=&#34;nf&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;When &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;I enter my login details&lt;/span&gt;
-&lt;span class=&#34;nf&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;And &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;I click &amp;quot;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;Login&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;nf&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Then &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;I am redirected to my dashboard&lt;/span&gt;
-&lt;span class=&#34;nf&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;And &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;the page is valid XHTML&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
+    When I click on the &amp;#34;Login&amp;#34; link
+    Then I am redirected to the login page
+    And the page is valid XHTML
 
+    When I enter my login details
+    And I click &amp;#34;Login&amp;#34;
+    Then I am redirected to my dashboard
+    And the page is valid XHTML&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Now when I run &lt;code&gt;cucumber features/logging_in.feature&lt;/code&gt;, it doesn&#39;t validate the HTML, it just makes sure that I can login as my user and that I am redirected to the right places. But if I run &lt;code&gt;VALIDATION=true cucumber features/logging_in.feature&lt;/code&gt;, then it &lt;em&gt;does&lt;/em&gt; validate my XHTML on the homepage, the login page and on the user&#39;s dashboard. If it fails validation then it gives you a fairly helpful error message as to what it was expecting and what it found instead.&lt;/p&gt;
 
 &lt;p&gt;From a quick run against a couple of stories in my app I discovered that I&#39;ve not been wrapping form elements in an enclosing element, so they&#39;ve been quickly fixed and now they validate. Now I realise this gem is only testing XHTML output, and doesn&#39;t include CSS or JS validation, but from a quick peek at the gem&#39;s source it should be fairly easy to add both of those in I think, although again they aren&#39;t major errors for me yet in this app.&lt;/p&gt;
@@ -2963,21 +2809,13 @@ To ssh://myserver/home/caius/git/somesite.git
 &lt;h2 id=&#34;testing-our-expectations&#34;&gt;Testing our expectations&lt;/h2&gt;
 
 &lt;p&gt;Lets say we want to validate the string as a username for our app. A username is 5 characters long and consists only of lowercase letters.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/^[a-z]{5}$/&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/^[a-z]{5}$/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;First we make sure it matches the data we want it to:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;caius&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; true&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;caius&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Excellent, that validated. Now we&#39;ll try a shorter string, which we expect to fail.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;cai&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; false&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cai&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Once more, it behaves how we expected it to. The shorter string was rejected as we wanted it to be. Now, what happens if we test a string with a newline character in it? We&#39;ll make sure the data before the &lt;code&gt;\n&lt;/code&gt; is valid, and then add some more data after the newline.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;caius&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;foo&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; true&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;caius&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Uh oh! That validated and would&#39;ve been saved as a username?!&lt;/p&gt;
 
 &lt;p&gt;Lets have a look at exactly what&#39;s happening there, the &lt;code&gt;$&lt;/code&gt; matches the &lt;code&gt;\n&lt;/code&gt; character, so the regex is only matching the first 5 characters of the string, and just ignores anything after the &lt;code&gt;\n&lt;/code&gt;. As it turns out, this is exactly what we&#39;ve asked the regex to match, but we didn&#39;t want this behaviour.&lt;/p&gt;
@@ -2985,9 +2823,7 @@ To ssh://myserver/home/caius/git/somesite.git
 &lt;p&gt;Now you might be thinking, &amp;quot;So what? someone can have a username with a newline in it.&amp;quot; For starters this will probably display weirdly anywhere you use their username, but more importantly it opens your application to an injection attack. Suppose they took advantage of this by setting their username to include some javascript on the page which stole your login cookie and sent it to them. You view their account in the admin section and oh no! They can login as your admin account and do what they want.&lt;/p&gt;
 
 &lt;p&gt;Simple example of this is just having it output an alert dialog. &lt;em&gt;(This is actually the code I&#39;ll use to test an application as its not malicious, but blindingly obvious if the javascript is executed or not.)&lt;/em&gt;&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;caius&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;lt;script&amp;gt;alert(&amp;#39;hello&amp;#39;)&amp;lt;/script&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; true&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;caius&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;lt;script&amp;gt;alert(&amp;#39;hello&amp;#39;)&amp;lt;/script&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Ok, so that was the result we were expecting this time, although it&#39;s still not the outcome we wanted. Anytime their username is viewed (providing you aren&#39;t escaping the data to HTML entities) you&#39;ll see the following:&lt;/p&gt;
 
 &lt;p&gt;&lt;img src=&#34;http://caius.name/images/qs/javascript-alert-dialog.png&#34; alt=&#34;javascript alert dialog&#34; /&gt;&lt;/p&gt;
@@ -2997,36 +2833,26 @@ To ssh://myserver/home/caius/git/somesite.git
 &lt;p&gt;Having realised from our testing above that ^$ matches the beginning/end of a &lt;em&gt;line&lt;/em&gt; in ruby not the beginning and end of a &lt;em&gt;string&lt;/em&gt;, I hear you cry, &amp;quot;How do we make sure we&#39;re matching the entire string?!&amp;quot;&lt;/p&gt;
 
 &lt;p&gt;The answer is pretty simple. Just swap out &lt;code&gt;^$&lt;/code&gt; for &lt;code&gt;\A\z&lt;/code&gt;. Lets go ahead and try this with the same data as we have above, but with the modified regular expression.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_regex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/\A[a-z]{5}\z/&lt;/span&gt;
-&lt;span class=&#34;s2&#34;&gt;&amp;quot;caius&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; true&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;new_regex&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/\A[a-z]{5}\z/&lt;/span&gt;
+&lt;span class=&#34;s2&#34;&gt;&amp;#34;caius&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;That&#39;s a good start, the valid string still matches.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;cai&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; false&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cai&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Looks like it&#39;s going well, invalid string is invalid.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;caius&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;foo&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; false&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;caius&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Oh Excellent! It&#39;s validating this one correctly now.&lt;/p&gt;
 
 &lt;p&gt;And just for consistency, lets test it with a more likely attack string.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;caius&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;lt;script&amp;gt;alert(&amp;#39;hello&amp;#39;)&amp;lt;/script&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; false&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;caius&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;lt;script&amp;gt;alert(&amp;#39;hello&amp;#39;)&amp;lt;/script&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;validate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Fantastic! We&#39;ve fixed the security hole in our validation of the user&#39;s username.&lt;/p&gt;
 
 &lt;hr /&gt;
 
 &lt;p&gt;If you want to actually run the code above you&#39;ll need the following at the start of the ruby script to patch the validate method into String.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt;
-  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;validate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;String&lt;/span&gt;
+  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;validate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;
     &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nil?&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;&lt;strong&gt;&lt;em&gt;Update:&lt;/em&gt;&lt;/strong&gt; I had &lt;code&gt;\Z&lt;/code&gt; in the &lt;code&gt;new_regex&lt;/code&gt; rather than the &lt;code&gt;\z&lt;/code&gt; it should&#39;ve been. Thanks &lt;a href=&#34;http://ciaranwal.sh/&#34;&gt;CiarÃ¡n&lt;/a&gt;.&lt;/p&gt;
 </description>
     </item>
@@ -3140,9 +2966,7 @@ $ defaults write com.apple.Safari DebugSafari4LoadProgressStyle -bool NO
       <description>&lt;p&gt;So I just installed ruby 1.9.1 through &lt;a href=&#34;http://macports.org/&#34;&gt;MacPorts&lt;/a&gt; and wanted to easily migrate my rubygems across from 1.8 to see which ones would fail to install.&lt;/p&gt;
 
 &lt;p&gt;Thought about it for a while, then came up with the following bash one-liner to do it:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;gem list &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{ print $1 }&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs -L &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; gem1.9 install
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gem list &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{ print $1 }&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs -L &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; gem1.9 install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; Installing Ruby 1.9.1 through macports &lt;code&gt;sudo port install ruby19&lt;/code&gt; means I get &lt;code&gt;ruby1.9&lt;/code&gt;, &lt;code&gt;gem1.9&lt;/code&gt; and &lt;code&gt;rake1.9&lt;/code&gt; installed alongside my usual 1.8 &lt;code&gt;ruby&lt;/code&gt;, &lt;code&gt;gem&lt;/code&gt; and &lt;code&gt;rake&lt;/code&gt;.&lt;/p&gt;
 
 &lt;p&gt;That grabs the list of installed gems from &lt;code&gt;gem&lt;/code&gt;, searches for lines containing &amp;quot;(&amp;quot; so it only grabs the gem names, spits out the first section of the line, which is the name of the gem, and finally calls &lt;code&gt;gem1.9 install&lt;/code&gt; for each line via &lt;code&gt;xargs -L 1&lt;/code&gt;. Make sure to run it as root or prefix &lt;code&gt;gem1.9&lt;/code&gt; with &lt;code&gt;sudo&lt;/code&gt;. &lt;em&gt;(Or let it install in your home folder, but I hate that.)&lt;/em&gt;&lt;/p&gt;
@@ -3237,15 +3061,11 @@ Amen&lt;/p&gt;
       <description>
 
 &lt;p&gt;So, I keep having to reinstall mysql5 and rubygems from time to time for various reasons. I always install mysql5 through &lt;a href=&#34;http://macports.org/&#34;&gt;MacPorts&lt;/a&gt; as a dependency for the php5 port (along with various other bits for the LA*P stack).&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo port install php5 +mysql5 +pear +readline +sockets +apache2 +sqlite
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo port install php5 +mysql5 +pear +readline +sockets +apache2 +sqlite&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Once this is installed then I have &lt;code&gt;mysql&lt;/code&gt; and can setup my databases, etc.&lt;/p&gt;
 
 &lt;p&gt;Ignoring the rest of the LAMP stack, I then need to connect Ruby to the Mysql I just installed through MacPorts. Its quite simple to do, once you know the right argument to pass to it. The easiest way is to just tell it where the &lt;code&gt;mysql5_conf&lt;/code&gt; file is and let it figure out the rest for itself.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo gem install mysql -- --with-mysql-config&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/opt/local/bin/mysql_config5
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo gem install mysql -- --with-mysql-config&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/opt/local/bin/mysql_config5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Hopefully this will save me 10 minutes of googling next time I need to do this!&lt;/p&gt;
 
 &lt;h3 id=&#34;update-2009-01-21&#34;&gt;Update 2009-01-21&lt;/h3&gt;
@@ -3255,10 +3075,8 @@ Amen&lt;/p&gt;
 &lt;h3 id=&#34;update-2009-10-19&#34;&gt;Update 2009-10-19&lt;/h3&gt;
 
 &lt;p&gt;On Snow Leopard I needed to tell rubygems to install the gem as a 64-bit binary. Hattip to &lt;a href=&#34;http://www.schmidp.com/2009/06/14/rubyrails-and-mysql-on-snow-leopard-10a380/comment-page-1/&#34;&gt;Philipp&lt;/a&gt;&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo env &lt;span class=&#34;nv&#34;&gt;ARCHFLAGS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;-arch x86_64&amp;quot;&lt;/span&gt; gem install mysql -- &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
-  --with-mysql-config&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/opt/local/bin/mysql_config5
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-</description>
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo env &lt;span class=&#34;nv&#34;&gt;ARCHFLAGS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-arch x86_64&amp;#34;&lt;/span&gt; gem install mysql -- &lt;span class=&#34;se&#34;&gt;\
+&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --with-mysql-config&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/opt/local/bin/mysql_config5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
     
     <item>
@@ -3270,13 +3088,11 @@ Amen&lt;/p&gt;
       <description>&lt;p&gt;I finally wrapped up some code I&#39;ve been meaning to write for a while, its a wrapper for the &lt;a href=&#34;http://translate.google.com/&#34;&gt;Google Translate API&lt;/a&gt;. Its also the first serious time I&#39;ve used &lt;code&gt;method_missing&lt;/code&gt; in a class, in this case its to add methods for translating between all the various languages.&lt;/p&gt;
 
 &lt;p&gt;Its fairly simple to use, there is an &lt;a href=&#34;http://github.com/caius/gtranslate/tree/master/examples.rb&#34;&gt;examples.rb&lt;/a&gt; included with it, but the basic usage is just this:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Convert from english to french&lt;/span&gt;
-&lt;span class=&#34;no&#34;&gt;Google&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Translate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;english_to_french&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;Bonjour&amp;quot;&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Convert from english to french&lt;/span&gt;
+&lt;span class=&#34;no&#34;&gt;Google&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Translate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;english_to_french&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;Bonjour&amp;#34;&lt;/span&gt;
 
 &lt;span class=&#34;c1&#34;&gt;# There is also a short(er)-hand version&lt;/span&gt;
-&lt;span class=&#34;no&#34;&gt;Google&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Tr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;en_to_fr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;no&#34;&gt;Google&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Tr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;en_to_fr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;As per usual with all my code its available on my &lt;a href=&#34;http://github.com/caius/&#34;&gt;github account&lt;/a&gt;, as the &lt;a href=&#34;http://github.com/caius/gtranslate/&#34;&gt;GTranslate&lt;/a&gt; project. I&#39;ll throw some specs together for it and package it up as a gem soon.&lt;/p&gt;
 </description>
     </item>
@@ -3290,10 +3106,8 @@ Amen&lt;/p&gt;
       <description>&lt;p&gt;I ran across &lt;a href=&#34;http://lstoll.net/2008/04/shell-meme/&#34;&gt;The Shell Meme&lt;/a&gt; on &lt;a href=&#34;http://lstoll.net/&#34;&gt;Lincoln Stoll&#39;s&lt;/a&gt; blog, and figured I&#39;d, uh, &lt;em&gt;borrow&lt;/em&gt; it.&lt;/p&gt;
 
 &lt;p&gt;Run this command in a new shell:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;history&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{ a[$2]++ } END { for(i in a){printf &amp;quot;%5d\t%s\n &amp;quot;,a[i],i} }&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
-  sort -rn &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nb&#34;&gt;history&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{ a[$2]++ } END { for(i in a){printf &amp;#34;%5d\t%s\n &amp;#34;,a[i],i} }&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
+&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  sort -rn &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;I get this as the output&lt;/p&gt;
 
 &lt;pre&gt;&lt;code&gt;379    git
@@ -3321,36 +3135,28 @@ Amen&lt;/p&gt;
       <description>&lt;p&gt;Lets imagine we&#39;ve got an array of strings, and we want to print it out as a list of strings using printf. &lt;em&gt;(If you&#39;re complaining about my logic here, hold fire for just a second good sir/madam.)&lt;/em&gt;&lt;/p&gt;
 
 &lt;p&gt;So we start off with the array of strings, and then pass it to printf with the right amount of &lt;code&gt;%s&lt;/code&gt;&#39;s in the format string:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
 
-&lt;span class=&#34;nb&#34;&gt;printf&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;%s, %s, %s&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;
+&lt;span class=&#34;nb&#34;&gt;printf&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;%s, %s, %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;# ~&amp;gt; -:3:in `printf&amp;#39;: too few arguments (ArgumentError)&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# ~&amp;gt;     from -:3&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;c1&#34;&gt;# ~&amp;gt;     from -:3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Oh whoops, we&#39;ve actually only passed &lt;code&gt;&amp;quot;%s, %s, %s&amp;quot;, [&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;]&lt;/code&gt; to printf. So of course it whinges about not getting enough arguments. Now how do we fix this, how &lt;strong&gt;do&lt;/strong&gt; we pass an array with each element a seperate argument to a method?&lt;/p&gt;
 
 &lt;p&gt;We use the &lt;code&gt;*&lt;/code&gt; of course! Just prefix the variable name with &lt;code&gt;*&lt;/code&gt; and the method is passed each element as separate arguments, rather than the whole array as one arguement.&lt;/p&gt;
 
 &lt;p&gt;Going back to our &lt;code&gt;printf&lt;/code&gt; example above, we simply insert one character &lt;em&gt;(the lowly &lt;code&gt;*&lt;/code&gt;)&lt;/em&gt; and end up with a string being outputted.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;printf&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;%s, %s, %s&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; one, two, three&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;printf&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;%s, %s, %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;
+&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; one, two, three&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Now I realise this is a partially stupid example, but it serves to explain the point I wanted to make. If you were complaining about my choice of printf earlier, here is the way I think most rubyists would solve this problem instead.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
-
-&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; one two three&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
 
+&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
+&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt; one two three&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And if I wanted to be slightly cleverer with the &lt;code&gt;printf&lt;/code&gt; version, and print out an array containing an unknown number of strings, but of a set width, then I could do the following. &lt;em&gt;(NB: This is actually how I ran into this problem.)&lt;/em&gt;&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
-
-&lt;span class=&#34;nb&#34;&gt;printf&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;%6s&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt;    one   two three&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
 
+&lt;span class=&#34;nb&#34;&gt;printf&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;%6s&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;
+&lt;span class=&#34;c1&#34;&gt;# &amp;gt;&amp;gt;    one   two three&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And that is where the lowly &lt;code&gt;*&lt;/code&gt; comes in.&lt;/p&gt;
 </description>
     </item>
@@ -3366,49 +3172,41 @@ Amen&lt;/p&gt;
 &lt;p&gt;Just a few examples of the same test written in a few languages. Its testing setting the date on an object that is created in the tests&#39; setup method already. These fall under the unit testing, rather than full-stack testing.&lt;/p&gt;
 
 &lt;h3 id=&#34;testing-in-objc-with-ocunit-http-www-sente-ch-software-ocunit&#34;&gt;Testing in ObjC with &lt;a href=&#34;http://www.sente.ch/software/ocunit/&#34;&gt;OCUnit&lt;/a&gt;&lt;/h3&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Add a date and time&lt;/span&gt;
-&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;testSettingDate&lt;/span&gt;
-&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
-    &lt;span class=&#34;bp&#34;&gt;NSDate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;theDate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSDate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;        
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;// Add a date and time
+- (void)testSettingDate
+{    
+    NSDate *theDate = [NSDate date];        
     
-    &lt;span class=&#34;n&#34;&gt;STAssertNoThrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;setDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;theDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;@&amp;quot;Shouldn&amp;#39;t raise an exception&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
-    &lt;span class=&#34;c1&#34;&gt;// And it should match when pulled out as well&lt;/span&gt;
-    &lt;span class=&#34;n&#34;&gt;STAssertEqualObjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;theDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
-                         &lt;span class=&#34;s&#34;&gt;@&amp;quot;%@ should match %@&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
-                         &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;calc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;theDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
-
-&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
+    STAssertNoThrow([calc setDate:theDate], @&amp;#34;Shouldn&amp;#39;t raise an exception&amp;#34;);
+    // And it should match when pulled out as well
+    STAssertEqualObjects([calc date], theDate,
+                         @&amp;#34;%@ should match %@&amp;#34;,
+                         [calc date], theDate);
 
+}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h3 id=&#34;testing-in-ruby-using-rspec-http-rspec-info&#34;&gt;Testing in Ruby using &lt;a href=&#34;http://rspec.info/&#34;&gt;RSpec&lt;/a&gt;&lt;/h3&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;should set the date successfully&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;should set the date successfully&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;the_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;today&lt;/span&gt;
 
   &lt;span class=&#34;vi&#34;&gt;@calc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the_date&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;# And it should match when pulled out as well&lt;/span&gt;
   &lt;span class=&#34;vi&#34;&gt;@calc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;should&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the_date&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h3 id=&#34;testing-in-ruby-using-test-unit-http-www-ruby-doc-org-stdlib-libdoc-test-unit-rdoc-classes-test-unit-html&#34;&gt;Testing in Ruby using &lt;a href=&#34;http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/classes/Test/Unit.html&#34;&gt;Test::Unit&lt;/a&gt;&lt;/h3&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test_setting_date&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;test_setting_date&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;the_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;today&lt;/span&gt;
   &lt;span class=&#34;vi&#34;&gt;@calc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the_date&lt;/span&gt;
   &lt;span class=&#34;c1&#34;&gt;# And it should match when pulled out as well&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;assert_equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vi&#34;&gt;@calc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;h3 id=&#34;testing-in-php-using-phpunit-http-phpun-it&#34;&gt;Testing in PHP using &lt;a href=&#34;http://phpun.it/&#34;&gt;PHPUnit&lt;/a&gt;&lt;/h3&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;function testSettingDate()&lt;/span&gt;
-&lt;span class=&#34;x&#34;&gt;{&lt;/span&gt;
-&lt;span class=&#34;x&#34;&gt;    $date = date();&lt;/span&gt;
-&lt;span class=&#34;x&#34;&gt;    $calc-&amp;gt;date = $date;&lt;/span&gt;
-&lt;span class=&#34;x&#34;&gt;    # And it should match when pulled out as well&lt;/span&gt;
-&lt;span class=&#34;x&#34;&gt;    $this-&amp;gt;assertEquals($calc-&amp;gt;date, $date);&lt;/span&gt;
-&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-</description>
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;x&#34;&gt;function testSettingDate()
+&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;{
+&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $date = date();
+&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $calc-&amp;gt;date = $date;
+&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    # And it should match when pulled out as well
+&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $this-&amp;gt;assertEquals($calc-&amp;gt;date, $date);
+&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
     
     <item>
@@ -3609,11 +3407,9 @@ See git-config(1) for details.
 &lt;/code&gt;&lt;/pre&gt;
 
 &lt;p&gt;The answer is to do what it says funnily enough, and add the remote refs tracking to the config file. The easiest way I&#39;ve found of doing this is to edit &lt;code&gt;.git/config&lt;/code&gt; and add the following at the bottom of it.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;[branch &amp;quot;master&amp;quot;]&lt;/span&gt;
-    &lt;span class=&#34;na&#34;&gt;remote&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;origin&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;    merge = refs/heads/master&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;k&#34;&gt;[branch &amp;#34;master&amp;#34;]&lt;/span&gt;
+    &lt;span class=&#34;na&#34;&gt;remote&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;origin
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    merge = refs/heads/master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;&lt;em&gt;Remember to change the branch or remote names if you need to.&lt;/em&gt;&lt;/p&gt;
 
 &lt;p&gt;Once you&#39;ve added that to the config you can run &lt;code&gt;git pull&lt;/code&gt; on the master branch and it&#39;ll do the usual automagical thing and pull the remote master branch changes into the local one!&lt;/p&gt;
@@ -3706,10 +3502,8 @@ tmp/*
 &lt;/code&gt;&lt;/pre&gt;
 
 &lt;p&gt;Then to make sure &lt;code&gt;log/&lt;/code&gt; and &lt;code&gt;tmp/&lt;/code&gt; are tracked, convention is to add a blank &lt;code&gt;.gitkeep&lt;/code&gt; file in them.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;touch log/.gitkeep
-touch tmp/.gitkeep
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-</description>
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;touch log/.gitkeep
+touch tmp/.gitkeep&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
     
     <item>
@@ -3848,10 +3642,10 @@ git ci -m &amp;quot;Adding jRails to replace Prototype&amp;quot;
       
       <guid>http://caiustheory.com/another-concise-code-example/</guid>
       <description>&lt;p&gt;This is just another example showing how I refactor code down to its bare minimum. The reason why I do this so much (and indeed I think why ruby is so easy to read compared to other languages) is because it makes my code more readable and less of a bugger to pick up after a while.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Page&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Page&lt;/span&gt;
   &lt;span class=&#34;kp&#34;&gt;attr_accessor&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:parent_id&lt;/span&gt;
         
-  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;old_parent&lt;/span&gt;
+  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;old_parent&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent?&lt;/span&gt;
       &lt;span class=&#34;no&#34;&gt;Page&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
@@ -3859,14 +3653,12 @@ git ci -m &amp;quot;Adding jRails to replace Prototype&amp;quot;
     &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
 
-  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;parent&lt;/span&gt;
+  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;parent&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Page&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent_id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent?&lt;/span&gt;
     &lt;span class=&#34;kp&#34;&gt;false&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
     
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;&lt;code&gt;old_parent&lt;/code&gt; and &lt;code&gt;parent&lt;/code&gt; return exactly the same, but one is 2 lines compared to 5 and easier to read.&lt;/p&gt;
 
 &lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href=&#34;http://ciaranwal.sh/&#34;&gt;Ciaran&lt;/a&gt; pointed out that the Page.parent method would only ever return false. Added the return statement to it to fix the bug.&lt;/p&gt;
@@ -3913,47 +3705,35 @@ git ci -m &amp;quot;Adding jRails to replace Prototype&amp;quot;
 &lt;p&gt;To search your php.ini file quickly and easily with the option to use regular expressions, I tend to drop back to the &lt;acronym title=&#34;command line interface&#34;&gt;cli&lt;/acronym&gt;.  The reason for this is I can easily parse the output of &lt;code&gt;phpinfo()&lt;/code&gt; with &lt;code&gt;grep&lt;/code&gt;, and can do various things with the output, could even pass it to a script if I really wanted to.&lt;/p&gt;
 
 &lt;p&gt;Here is the line I use to search &lt;code&gt;phpinfo()&lt;/code&gt;&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;lt;?php phpinfo() ?&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; php &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -i &lt;span class=&#34;nv&#34;&gt;$search_string&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;?php phpinfo() ?&amp;gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; php &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -i &lt;span class=&#34;nv&#34;&gt;$search_string&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;It passes the string through the php interpreter and then searches through it with grep.&lt;/p&gt;
 
 &lt;p&gt;You can also do other nifty things with the shell &amp;amp; php + ruby especially (though I imagine python &amp;amp; perl work in the same way.) For instance I wanted to see if the following ruby would return the number of seconds since the &lt;a href=&#34;http:/en.wikipedia.org/wiki/Unix_Time&#34;&gt;epoch&lt;/a&gt; till now.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_i&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_i&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Now I could fire up a PHP page and do something like the following&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
-  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;php: &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
-  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;ruby: &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`ruby -e &amp;#39;print Time.now.to_i&amp;#39;`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
-&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
+  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;php: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
+  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ruby: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`ruby -e &amp;#39;print Time.now.to_i&amp;#39;`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
+&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;But what if I&#39;ve not got a web server with PHP running on the machine I&#39;m using? Well then I could drop back to the shell and run it through &lt;code&gt;php&lt;/code&gt; using &lt;code&gt;cat&lt;/code&gt; as a way to insert multiple lines, and it would look like the following&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;PHP | php&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;&amp;lt;?php&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;  echo &amp;quot;php: &amp;quot; . time() . &amp;quot;\n&amp;quot;;&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;  echo &amp;quot;ruby: &amp;quot; . `ruby -e &amp;#39;print Time.now.to_i&amp;#39;` . &amp;quot;\n&amp;quot;;&lt;/span&gt;
-&lt;span class=&#34;s&#34;&gt;PHP&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cat &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;PHP | php
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;?php
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  echo &amp;#34;php: &amp;#34; . time() . &amp;#34;\n&amp;#34;;
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  echo &amp;#34;ruby: &amp;#34; . `ruby -e &amp;#39;print Time.now.to_i&amp;#39;` . &amp;#34;\n&amp;#34;;
+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;PHP&lt;/span&gt;
 
 php: &lt;span class=&#34;m&#34;&gt;1203004463&lt;/span&gt;
-ruby: &lt;span class=&#34;m&#34;&gt;1203004463&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+ruby: &lt;span class=&#34;m&#34;&gt;1203004463&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Now this works, but why do I want to remember all that php, and seeing as I have to drop back to the shell to access the ruby statement, why not just let the shell do all the work? So after a few seconds thinking, I came up with this&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;ruby -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;puts &amp;quot;ruby: #{Time.now.to_i}&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
-  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;?php echo &amp;quot;PHP: &amp;quot; . time() . &amp;quot;\n&amp;quot; ?&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; php
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ruby -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;puts &amp;#34;ruby: #{Time.now.to_i}&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
+&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;?php echo &amp;#34;PHP: &amp;#34; . time() . &amp;#34;\n&amp;#34; ?&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; php&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;This runs the ruby code through &lt;code&gt;ruby&lt;/code&gt; and the php code through &lt;code&gt;php&lt;/code&gt; without dropping back to the shell from within a language interpreter :)&lt;/p&gt;
 
 &lt;h3 id=&#34;update&#34;&gt;Update:&lt;/h3&gt;
 
 &lt;p&gt;Fangel pointed out &lt;code&gt;php -r&lt;/code&gt; is the equivilent of &lt;code&gt;ruby -e&lt;/code&gt; so the final commands could just be:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span&gt;&lt;/span&gt;ruby -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;puts &amp;quot;ruby: #{Time.now.to_i}&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
-php -r &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo &amp;quot;PHP: &amp;quot;.time().&amp;quot;\n&amp;quot;;&amp;#39;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-</description>
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ruby -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;puts &amp;#34;ruby: #{Time.now.to_i}&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
+&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;php -r &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo &amp;#34;PHP: &amp;#34;.time().&amp;#34;\n&amp;#34;;&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
     
     <item>
@@ -3967,79 +3747,65 @@ php -r &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo &amp;quot;PHP: &amp;quot;.ti
 &lt;p&gt;The show object has an id passed in using the &lt;code&gt;params&lt;/code&gt; Hash, I want to check if that post exists in the database first.  If it does, then render the page, and if it doesn&#39;t return a 404 error page.&lt;/p&gt;
 
 &lt;p&gt;So I start off by writing this in &lt;em&gt;longhand&lt;/em&gt; ruby, I&#39;m using the &lt;a href=&#34;http://merbivore.com/&#34;&gt;merb&lt;/a&gt; framework with &lt;a href=&#34;http://datamapper.com/&#34;&gt;DataMapper&lt;/a&gt; ORM by the way.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
   &lt;span class=&#34;vi&#34;&gt;@post&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vi&#34;&gt;@post&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;render&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
-    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;404 - Not found&amp;quot;&lt;/span&gt;
+    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;404 - Not found&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Now whilst theres nothing wrong with this code, it just doesn&#39;t look right to me. There is a big if/else statement in there whilst I&#39;m sure there doesn&#39;t need to be.&lt;/p&gt;
 
 &lt;p&gt;Now I know if I return at any point in a ruby method, it exits the method at that point. So the first thing to is to refactor the &lt;code&gt;if&lt;/code&gt; test to remove a line of code. I shall assign &lt;code&gt;@post&lt;/code&gt; to the result of the DB as the actual if statement&#39;s test.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vi&#34;&gt;@post&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;render&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
-    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;404 - Not found&amp;quot;&lt;/span&gt;
+    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;404 - Not found&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;So thats reading slightly better, and also is a line less of code. Now I wonder if I can use a &lt;code&gt;return true&lt;/code&gt; in there to stop me having to explicitly state an &lt;code&gt;else&lt;/code&gt; clause.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vi&#34;&gt;@post&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
     &lt;span class=&#34;n&#34;&gt;render&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-  &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;404 - Not found&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+  &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;404 - Not found&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Now the eagerest amongst you will be wondering what the advantage of that code is. It doesn&#39;t appear any more readable (slightly less in fact as you have to figure out its an implicit else) and is exactly the same amount of lines as the previous example. But what if we change the &lt;code&gt;if&lt;/code&gt; to an &lt;code&gt;if !&lt;/code&gt; and flip the code logic around?&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vi&#34;&gt;@post&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
-    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;404 - not found&amp;quot;&lt;/span&gt;
+    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;404 - not found&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;render&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Now a raise will stop the code executing, and in the real application you would in fact just redirect to your 404 error page. The problem now is the &lt;code&gt;if !&lt;/code&gt; looks ugly and isn&#39;t easily readable.&lt;/p&gt;
 
 &lt;p&gt;All &lt;code&gt;unless&lt;/code&gt; does is &lt;code&gt;if !&lt;/code&gt;, that is, if the inverse of the result of the test statement is true, then invoke the block given to it. A quick example for you:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# without unless&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# without unless&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;vi&#34;&gt;@user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logged_in?&lt;/span&gt;
-  &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Please login.&amp;quot;&lt;/span&gt;
+  &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please login.&amp;#34;&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
     
 &lt;span class=&#34;c1&#34;&gt;# using unless&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;vi&#34;&gt;@user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;logged_in?&lt;/span&gt;
-  &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Please login.&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+  &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Please login.&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Now whilst &lt;code&gt;if !&lt;/code&gt; doesn&#39;t seem that bad compared to &lt;code&gt;unless&lt;/code&gt;, the readablility of the code increases. It reads more as a flow of logic, and is quicker for the human brain to walk through (my brain anyway!)&lt;/p&gt;
 
 &lt;p&gt;So using unless we get 4 lines of code that is easily readable.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vi&#34;&gt;@post&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
-    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;404 - Not found&amp;quot;&lt;/span&gt;
+    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;404 - Not found&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;render&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Now what if we go one step further and use the unless shorthand way of testing and exectuting one line of code?&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
-  &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;404 - Not found&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vi&#34;&gt;@post&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;show&lt;/span&gt;
+  &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;404 - Not found&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vi&#34;&gt;@post&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Post&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;render&lt;/span&gt;
-&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And that is generally how I write my code logically.  Of course for something simple like this I&#39;d probably jump in at the last block having refactored it in my head first, but for more complex things I tend to write them exlicitly and then refactor them down whilst maintaining readability of my code.&lt;/p&gt;
 </description>
     </item>
@@ -4114,41 +3880,33 @@ mate lib/merb/sessions/data_mapper_session.rb
 &lt;/blockquote&gt;
 
 &lt;p&gt;Me being a show off jumped straight into &lt;a href=&#34;http://macromates.com/&#34;&gt;TextMate&lt;/a&gt; and banged out some code in real time to show her.  First up, a quick little one-liner of Ruby code to output a String:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;Hello World&amp;quot;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
+&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;So she goes, &amp;quot;Sure, but whats so brilliant about that?&amp;quot; So I just decide to reverse the string, have it output in reverse order:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;
-&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;quot;dlroW olleH&amp;quot;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;
+&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; &amp;#34;dlroW olleH&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;Then the next question comes, &amp;quot;So what makes that so much easier than in other languages?&amp;quot; Well now I was thinking on the spot about which other language I can bang out a quick example in without having to look up too much information.  PHP seems the logical choice, being the language I know best behind Ruby.&lt;/p&gt;
 
 &lt;p&gt;Thinking about how to do it in PHP, I can&#39;t think of a function to reverse the content of a string, but I know that &lt;code&gt;array_reverse()&lt;/code&gt; exists, so I just split it into an array and reverse that array.  Only problem is I can&#39;t remember how to split a string by &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;, I don&#39;t think &lt;code&gt;explode( &amp;quot;&amp;quot;, $var )&lt;/code&gt; does the job.  So I quickly jump in and write the following code to test my concern.&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
-  &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
-  &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;explode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
-  &lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;array_reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
-  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;implode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
-&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
-&lt;span class=&#34;x&#34;&gt;# =&amp;gt; ERROR&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
+  &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
+  &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;explode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
+  &lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array_reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
+  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;implode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
+&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
+&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;# =&amp;gt; ERROR&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;The reason for the error is because I&#39;ve missed a semi colon off the end of line 2, to this I get the response, &amp;quot;well thats certainly not as nice as ruby.&amp;quot; Just because one little character is missing!&lt;/p&gt;
 
 &lt;p&gt;So I fix the semi colon and run it again, now I get an error complaining about explode not being able to split by a missing delimiter (the empty string - &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;)  So I go hunting through the &lt;a href=&#34;http://php.net/&#34;&gt;php.net&lt;/a&gt; docs and find &lt;code&gt;str_split()&lt;/code&gt;, which does exactly what I want it to.&lt;/p&gt;
 
 &lt;p&gt;In replacing &lt;code&gt;explode()&lt;/code&gt; with &lt;code&gt;str_split()&lt;/code&gt; and running it via the &lt;code&gt;php&lt;/code&gt; command line binary, I realise that I haven&#39;t got any &lt;code&gt;\n&lt;/code&gt; (newlines) at the end of it, so it doesn&#39;t display nicely in the terminal.  I thus update the script to the following and show her the result:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
-  &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
-  &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;explode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
-  &lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;array_reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
-  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;implode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
-&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
-&lt;span class=&#34;x&#34;&gt;# =&amp;gt; &amp;quot;dlroW olleH&amp;quot;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
+  &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
+  &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;explode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
+  &lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array_reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
+  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;implode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
+&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
+&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;# =&amp;gt; &amp;#34;dlroW olleH&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;And so she goes away seeing why I prefer Ruby to other languages for &lt;em&gt;most&lt;/em&gt; programming I do. There are things Ruby fails at (and don&#39;t get me started on why rails isn&#39;t going to replace php!) and other places where it succeeds very well.&lt;/p&gt;
 
 &lt;p&gt;But each to their own, and my own favourite is Ruby!&lt;/p&gt;
@@ -4156,15 +3914,11 @@ mate lib/merb/sessions/data_mapper_session.rb
 &lt;h3 id=&#34;update&#34;&gt;Update&lt;/h3&gt;
 
 &lt;p&gt;As pointed out in the comments, if I had looked a bit further I would&#39;ve found &lt;code&gt;strrev()&lt;/code&gt; which does the same as the &lt;code&gt;reverse&lt;/code&gt; method in Ruby.  So in fact the final code would be:&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;vs&lt;/p&gt;
-&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
-  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;strrev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
-&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
-
+&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?php&lt;/span&gt;
+  &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strrev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
+&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 &lt;p&gt;So it turns out this was a bad way to show why I prefer Ruby to PHP code wise to mother, think I might have to just bite the bullet and write about why I prefer &lt;code&gt;object.method&lt;/code&gt; to &lt;code&gt;method( object )&lt;/code&gt;!&lt;/p&gt;
 </description>
     </item>
diff --git i/public/filter-through-command/index.html w/public/filter-through-command/index.html
index 773d855..3a33dc7 100644
--- i/public/filter-through-command/index.html
+++ w/public/filter-through-command/index.html
@@ -25,9 +25,7 @@
 <p>My text editor <a href="http://macromates.com/">TextMate</a> has a nice feature called &quot;Filter through command&quot; whereby you can filter the current document through a command.</p>
 
 <p>Anyway, I've never used it before, but today I had a text file with 30 or so url's in, each on a new line, so I thought I'd test it out.  I selected it to input the document &amp; to not replace the output.  I then entered the following command, which is a ruby command to take each line that isn't blank, and run the shell command <code>open $url</code>.</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>ruby -e <span class="s1">&#39;a = ARGF.read.scan(/\S+/); a.each { |x| `open #{x}` }&#39;</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ruby -e <span class="s1">&#39;a = ARGF.read.scan(/\S+/); a.each { |x| `open #{x}` }&#39;</span></code></pre></div>
 <p>What this does is take ARGF (the document) and read it in line by line, but only the non-whitespace characters (so newlines, space, etc are ignored.)  And it assigns it to an array called <code>a</code>.  What I then do is for each item of <code>a</code>, we run it past the shell command <code>open</code>, which on OS X if you pass it a URL it just opens that URL in the default browser.</p>
 
 <p>My browser is Safari, and its set to open new links in a new tab in the foremost window.  So I ran the command, and hey presto, within a few seconds I had all the URL's loading in seperate tabs in Safari's foremost window!</p>
@@ -37,9 +35,7 @@
 <p><strong>Update</strong></p>
 
 <p>I just realised if you change the regex to scan for http://.* then it'll select all website URLs.</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>ruby -e <span class="s1">&#39;a = ARGF.read.scan(/^http://.*$/); a.each { |url| `open #{url}` }&#39;</span>
-</code></pre></div>
-<footer><p class="tags">
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">ruby -e <span class="s1">&#39;a = ARGF.read.scan(/^http://.*$/); a.each { |url| `open #{url}` }&#39;</span></code></pre></div><footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/apple">apple</a>, <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/mac">mac</a>, <a class="button is-link" href="/tag/os-x">os x</a>, <a class="button is-link" href="/tag/ruby">ruby</a> and <a class="button is-link" href="/tag/textmate">textmate</a>
 </p>
 <p class="license">
diff --git i/public/find-dependencies-blocking-rails-upgrades/index.html w/public/find-dependencies-blocking-rails-upgrades/index.html
index e3407c9..a794d12 100644
--- i/public/find-dependencies-blocking-rails-upgrades/index.html
+++ w/public/find-dependencies-blocking-rails-upgrades/index.html
@@ -25,17 +25,17 @@
 <p>I figured I'd cheat a little and eyeball the <code>Gemfile.lock</code> to see which gems had an explicit dependency pinning rails (or actionpack, activejob, etc) to a version lower than I want to upgrade to, so I could get an idea of what needs to be upgraded without having to do them all one-by-one.</p>
 
 <p>Then instead of eyeballing <code>Gemfile.lock</code>, I wrote an awk script to pull out the interesting dependencies (ie, anything that depends on rails gems) so I just have to check which versions they depend on by hand.</p>
-<div class="highlight"><pre><code class="language-awk" data-lang="awk"><span></span><span class="c1"># Reads a Gemfile.lock and outputs all dependencies that depend on rails</span>
+<div class="highlight"><pre class="chroma"><code class="language-awk" data-lang="awk"><span class="c1"># Reads a Gemfile.lock and outputs all dependencies that depend on rails</span>
 
 <span class="nb">BEGIN</span> <span class="p">{</span>
   <span class="nx">parent</span> <span class="o">=</span> <span class="mi">0</span>
   <span class="nx">parent_printed</span> <span class="o">=</span> <span class="mi">0</span>
-  <span class="nx">rails_gems</span> <span class="o">=</span> <span class="s2">&quot;^(rail(s|ties)|action(mailer|pack|view)|active(job|model|record|support))$&quot;</span>
+  <span class="nx">rails_gems</span> <span class="o">=</span> <span class="s2">&#34;^(rail(s|ties)|action(mailer|pack|view)|active(job|model|record|support))$&#34;</span>
 <span class="p">}</span>
 
 <span class="c1"># We only want the specs from the GEM section</span>
 <span class="nb">NR</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="o">$</span><span class="mi">1</span> <span class="o">~</span> <span class="sr">/GEM/</span> <span class="p">{</span> <span class="kr">next</span> <span class="p">}</span>
-<span class="o">$</span><span class="mi">1</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span> <span class="p">{</span> <span class="k">exit</span> <span class="p">}</span>
+<span class="o">$</span><span class="mi">1</span> <span class="o">==</span> <span class="s2">&#34;&#34;</span> <span class="p">{</span> <span class="k">exit</span> <span class="p">}</span>
 
 <span class="c1"># Skip parent gems we don&#39;t care about (rails itselfâ€¦)</span>
 <span class="o">$</span><span class="mi">0</span> <span class="o">~</span> <span class="sr">/^ {4}[^ ]/</span> <span class="o">&amp;&amp;</span>
@@ -64,13 +64,9 @@
   <span class="p">}</span>
 
   <span class="kr">print</span> <span class="o">$</span><span class="mi">0</span>
-<span class="p">}</span>
-</code></pre></div>
-
+<span class="p">}</span></code></pre></div>
 <p>Run it against your <code>Gemfile.lock</code> for the app you're upgrading:</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>awk -f rails5.awk Gemfile.lock
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">awk -f rails5.awk Gemfile.lock</code></pre></div>
 <p>And you'll get output like this, to run through and see if any of the dependencies are pinning to lower versions than you need.</p>
 
 <pre><code>    coffee-rails (4.0.1)
diff --git i/public/geolocation-in-nginx/index.html w/public/geolocation-in-nginx/index.html
index 5610e60..65b9937 100644
--- i/public/geolocation-in-nginx/index.html
+++ w/public/geolocation-in-nginx/index.html
@@ -25,26 +25,22 @@
 <p>Recently I was searching for something else to do with nginx and ran across <a href="http://www.ruby-forum.com/topic/125810">a mailing list thread</a> about using the maxmind database with nginx's <a href="http://wiki.nginx.org/NginxHttpGeoModule">HTTP Geo module</a> and do the lookup directly in nginx itself. Finally got a chance to sit down and work out the logistics of doing this. I've done this on an ubuntu 12.04 box, with the expected config file layouts that come with ubuntu.</p>
 
 <p>Run the following on your server (as someone with write access to nginx config files):</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span><span class="c1"># Generate the text file for nginx to import</span>
-perl &lt;<span class="o">(</span>curl -s https://raw.github.com/nginx/nginx/master/contrib/geo2nginx.pl<span class="o">)</span> <span class="se">\</span>
-&lt; &lt;<span class="o">(</span><span class="nv">zip</span><span class="o">=</span><span class="k">$(</span>tempfile<span class="k">)</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
-curl -so <span class="nv">$zip</span> http://geolite.maxmind.com/download/geoip/database/GeoIPCountryCSV.zip <span class="se">\</span>
-<span class="o">&amp;&amp;</span> unzip -p <span class="nv">$zip</span><span class="o">)</span> &gt; /etc/nginx/nginx_ip_country.txt
-
-<span class="c1"># Tell nginx to work out the IP country and store in variable</span>
-<span class="nb">echo</span> <span class="s1">&#39;geo $IP_COUNTRY {</span>
-<span class="s1">  default --;</span>
-<span class="s1">  include /etc/nginx/nginx_ip_country.txt;</span>
-<span class="s1">}&#39;</span> &gt; /etc/nginx/conf.d/ip_country.conf
-</code></pre></div>
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># Generate the text file for nginx to import
+</span><span class="c1"></span>perl &lt;<span class="o">(</span>curl -s https://raw.github.com/nginx/nginx/master/contrib/geo2nginx.pl<span class="o">)</span> <span class="se">\
+</span><span class="se"></span>&lt; &lt;<span class="o">(</span><span class="nv">zip</span><span class="o">=</span><span class="k">$(</span>tempfile<span class="k">)</span> <span class="o">&amp;&amp;</span> <span class="se">\
+</span><span class="se"></span>curl -so <span class="nv">$zip</span> http://geolite.maxmind.com/download/geoip/database/GeoIPCountryCSV.zip <span class="se">\
+</span><span class="se"></span><span class="o">&amp;&amp;</span> unzip -p <span class="nv">$zip</span><span class="o">)</span> &gt; /etc/nginx/nginx_ip_country.txt
 
+<span class="c1"># Tell nginx to work out the IP country and store in variable
+</span><span class="c1"></span><span class="nb">echo</span> <span class="s1">&#39;geo $IP_COUNTRY {
+</span><span class="s1">  default --;
+</span><span class="s1">  include /etc/nginx/nginx_ip_country.txt;
+</span><span class="s1">}&#39;</span> &gt; /etc/nginx/conf.d/ip_country.conf</code></pre></div>
 <p>Now go find the http block for the vhost you want to have the header passed to, and assuming it's passenger, add the following:</p>
-<div class="highlight"><pre><code class="language-nginx" data-lang="nginx"><span></span><span class="c1"># http {</span>
-  <span class="c1"># server_name freddy.com;</span>
-  <span class="k">passenger_set_cgi_param</span> <span class="s">HTTP_X_IP_COUNTRY</span> <span class="nv">$IP_COUNTRY</span><span class="p">;</span>
-<span class="c1"># }</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-nginx" data-lang="nginx"><span class="c1"># http {
+</span><span class="c1"></span>  <span class="c1"># server_name freddy.com;
+</span><span class="c1"></span>  <span class="k">passenger_set_cgi_param</span> <span class="s">HTTP_X_IP_COUNTRY</span> <span class="nv">$IP_COUNTRY</span><span class="p">;</span>
+<span class="err">#</span> <span class="k">}</span></code></pre></div>
 <p>(If you don't use passenger, look at the docs for <a href="http://wiki.nginx.org/HttpProxyModule#proxy_pass_header">proxy_pass_header</a> or <a href="http://wiki.nginx.org/HttpFastcgiModule#fastcgi_pass_header">fastcgi_pass_header</a> to see which you'll require for your setup.)</p>
 
 <p>Reload nginx, and behold, <code>request.env[&quot;HTTP_X_IP_COUNTRY&quot;]</code> (assuming a rack app running under ruby) will be a two letter country code, or <code>&quot;--&quot;</code>.</p>
diff --git i/public/git-git-git-git-git/index.html w/public/git-git-git-git-git/index.html
index 1bd9a6b..9616b26 100644
--- i/public/git-git-git-git-git/index.html
+++ w/public/git-git-git-git-git/index.html
@@ -21,32 +21,24 @@
     <h1><a href="/git-git-git-git-git/">git git git git git</a></h1>
     <time datetime="2017-09-26 11:00:23 &#43;0000 UTC">2017-09-26 11:00:23</time>
   </header><p>Ever found you've accidentally entered too many <code>git</code>s in your terminal and wondered if there's a solution to it? I quite often type <code>git</code> then go away and come back, then type a full <code>git status</code> after it. This leads to a lovely (annoying) error out the box:</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>$ git git status
-git: <span class="s1">&#39;git&#39;</span> is not a git command. See <span class="s1">&#39;git --help&#39;</span>.
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ git git status
+git: <span class="s1">&#39;git&#39;</span> is not a git command. See <span class="s1">&#39;git --help&#39;</span>.</code></pre></div>
 <p>What a git.</p>
 
 <p>My initial thought was overriding the <code>git</code> binary in my <code>$PATH</code> and having it strip any leading arguments that match <code>git</code>, so we end up running just the <code>git status</code> at the end of the arguments. An easier way is to just use <a href="https://git-scm.com/docs/git-config"><code>git-config</code></a>'s <code>alias.*</code> functionality to expand the first argument being <code>git</code> to a shell command.</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>git config --global alias.git <span class="s1">&#39;!exec git&#39;</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">git config --global alias.git <span class="s1">&#39;!exec git&#39;</span></code></pre></div>
 <p>Which adds the following git config to your <code>.gitconfig</code> file</p>
-<div class="highlight"><pre><code class="language-ini" data-lang="ini"><span></span><span class="k">[alias]</span>
-  <span class="na">git</span> <span class="o">=</span> <span class="s">!exec git</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ini" data-lang="ini"><span class="k">[alias]</span>
+  <span class="na">git</span> <span class="o">=</span> <span class="s">!exec git</span></code></pre></div>
 <p>And then you'll find you can <code>git git</code> to your heart's content</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>$ git sha
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">$ git sha
 cc9c642663c0b63fba3964297c13ce9b61209313
 
 $ git git sha
 cc9c642663c0b63fba3964297c13ce9b61209313
 
 $ git git git git git git git git git git git git git git git git git git git git git git git git git git sha
-cc9c642663c0b63fba3964297c13ce9b61209313
-</code></pre></div>
-
+cc9c642663c0b63fba3964297c13ce9b61209313</code></pre></div>
 <p>(<code>git sha</code> is an alias for <code>git rev-parse HEAD</code>.)</p>
 
 <p>See what other git alias' I have in my <a href="https://github.com/caius/zshrc/blob/master/dotfiles/gitconfig"><code>~/.gitconfig</code></a>, and laugh at all the typo corrections I have in there. (Yes, git provides autocorrection if you enable it, but I'm used to these typos working!)</p>
diff --git i/public/gtranslate/index.html w/public/gtranslate/index.html
index 3e43f23..e9b75a4 100644
--- i/public/gtranslate/index.html
+++ w/public/gtranslate/index.html
@@ -23,13 +23,11 @@
   </header><p>I finally wrapped up some code I've been meaning to write for a while, its a wrapper for the <a href="http://translate.google.com/">Google Translate API</a>. Its also the first serious time I've used <code>method_missing</code> in a class, in this case its to add methods for translating between all the various languages.</p>
 
 <p>Its fairly simple to use, there is an <a href="http://github.com/caius/gtranslate/tree/master/examples.rb">examples.rb</a> included with it, but the basic usage is just this:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="c1"># Convert from english to french</span>
-<span class="no">Google</span><span class="o">::</span><span class="no">Translate</span><span class="o">.</span><span class="n">english_to_french</span><span class="p">(</span> <span class="s2">&quot;Hello&quot;</span> <span class="p">)</span> <span class="c1"># =&gt; &quot;Bonjour&quot;</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="c1"># Convert from english to french</span>
+<span class="no">Google</span><span class="o">::</span><span class="no">Translate</span><span class="o">.</span><span class="n">english_to_french</span><span class="p">(</span> <span class="s2">&#34;Hello&#34;</span> <span class="p">)</span> <span class="c1"># =&gt; &#34;Bonjour&#34;</span>
 
 <span class="c1"># There is also a short(er)-hand version</span>
-<span class="no">Google</span><span class="o">::</span><span class="no">Tr</span><span class="o">.</span><span class="n">en_to_fr</span><span class="p">(</span> <span class="s2">&quot;Hello&quot;</span> <span class="p">)</span>
-</code></pre></div>
-
+<span class="no">Google</span><span class="o">::</span><span class="no">Tr</span><span class="o">.</span><span class="n">en_to_fr</span><span class="p">(</span> <span class="s2">&#34;Hello&#34;</span> <span class="p">)</span></code></pre></div>
 <p>As per usual with all my code its available on my <a href="http://github.com/caius/">github account</a>, as the <a href="http://github.com/caius/gtranslate/">GTranslate</a> project. I'll throw some specs together for it and package it up as a gem soon.</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/google">google</a>, <a class="button is-link" href="/tag/gtranslate">gtranslate</a>, <a class="button is-link" href="/tag/programming">programming</a>, <a class="button is-link" href="/tag/ruby">ruby</a> and <a class="button is-link" href="/tag/translation">translation</a>
diff --git i/public/index.html w/public/index.html
index 633d6ce..6ed25dc 100644
--- i/public/index.html
+++ w/public/index.html
@@ -1,7 +1,7 @@
 <!DOCTYPE HTML>
 <html lang="en">
   <head>
-	<meta name="generator" content="Hugo 0.26" />
+	<meta name="generator" content="Hugo 0.30.2" />
     <meta charset="utf-8">
     <title>Latest - CaiusTheory</title>
 
diff --git i/public/install-gcc-421-apple-build-56663-with-xcode-42/index.html w/public/install-gcc-421-apple-build-56663-with-xcode-42/index.html
index e1e8ab3..f80a67b 100644
--- i/public/install-gcc-421-apple-build-56663-with-xcode-42/index.html
+++ w/public/install-gcc-421-apple-build-56663-with-xcode-42/index.html
@@ -27,27 +27,23 @@
 <p>You should already have installed Xcode 4.2 from the app store, then basically the following steps are to grab the tarball from the <a href="http://opensource.apple.com/release/developer-tools-41/">4.1 developer tools source</a>, unpack &amp; compile it, then install it into the right places.</p>
 
 <p><strong>Update 2016-07-03:</strong> I'd suggest just using homebrew to install this these days:</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>brew install homebrew/dupes/apple-gcc42
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">brew install homebrew/dupes/apple-gcc42</code></pre></div>
 <h2 id="instructions">Instructions</h2>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span><span class="c1"># Grab and unpack the tarball</span>
-mkdir ~/tmp <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ~/tmp
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># Grab and unpack the tarball
+</span><span class="c1"></span>mkdir ~/tmp <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ~/tmp
 curl -O http://opensource.apple.com/tarballs/gcc/gcc-5666.3.tar.gz
 tar zxf gcc-5666.3.tar.gz
 <span class="nb">cd</span> gcc-5666.3
 
-<span class="c1"># Setup some stuff it requires</span>
-mkdir -p build/obj build/dst build/sym
-<span class="c1"># And then build it. You should go make a cup of tea or five whilst this runs.</span>
-gnumake install <span class="nv">RC_OS</span><span class="o">=</span>macos <span class="nv">RC_ARCHS</span><span class="o">=</span><span class="s1">&#39;i386 x86_64&#39;</span> <span class="nv">TARGETS</span><span class="o">=</span><span class="s1">&#39;i386 x86_64&#39;</span> <span class="se">\</span>
-  <span class="nv">SRCROOT</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span> <span class="nv">OBJROOT</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/build/obj <span class="nv">DSTROOT</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/build/dst <span class="se">\</span>
-  <span class="nv">SYMROOT</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/build/sym
-
-<span class="c1"># And finally install it</span>
-sudo ditto build/dst /
-</code></pre></div>
+<span class="c1"># Setup some stuff it requires
+</span><span class="c1"></span>mkdir -p build/obj build/dst build/sym
+<span class="c1"># And then build it. You should go make a cup of tea or five whilst this runs.
+</span><span class="c1"></span>gnumake install <span class="nv">RC_OS</span><span class="o">=</span>macos <span class="nv">RC_ARCHS</span><span class="o">=</span><span class="s1">&#39;i386 x86_64&#39;</span> <span class="nv">TARGETS</span><span class="o">=</span><span class="s1">&#39;i386 x86_64&#39;</span> <span class="se">\
+</span><span class="se"></span>  <span class="nv">SRCROOT</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span> <span class="nv">OBJROOT</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/build/obj <span class="nv">DSTROOT</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/build/dst <span class="se">\
+</span><span class="se"></span>  <span class="nv">SYMROOT</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/build/sym
 
+<span class="c1"># And finally install it
+</span><span class="c1"></span>sudo ditto build/dst /</code></pre></div>
 <p>And now you should have <code>gcc-4.2</code> in your <code>$PATH</code>, available to build all the things that <code>llvm-gcc</code> fails to compile.</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/apple">apple</a>, <a class="button is-link" href="/tag/cli">cli</a>, <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/fix">fix</a>, <a class="button is-link" href="/tag/gcc">gcc</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/installing">installing</a>, <a class="button is-link" href="/tag/llvm">llvm</a>, <a class="button is-link" href="/tag/mac">mac</a>, <a class="button is-link" href="/tag/mac-app-store">mac app store</a>, <a class="button is-link" href="/tag/os-x">os x</a>, <a class="button is-link" href="/tag/programming">programming</a> and <a class="button is-link" href="/tag/tech">tech</a>
diff --git i/public/install-mysql-gem-on-leopard/index.html w/public/install-mysql-gem-on-leopard/index.html
index d67ea76..cd3f25c 100644
--- i/public/install-mysql-gem-on-leopard/index.html
+++ w/public/install-mysql-gem-on-leopard/index.html
@@ -23,15 +23,11 @@
   </header>
 
 <p>So, I keep having to reinstall mysql5 and rubygems from time to time for various reasons. I always install mysql5 through <a href="http://macports.org/">MacPorts</a> as a dependency for the php5 port (along with various other bits for the LA*P stack).</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>sudo port install php5 +mysql5 +pear +readline +sockets +apache2 +sqlite
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">sudo port install php5 +mysql5 +pear +readline +sockets +apache2 +sqlite</code></pre></div>
 <p>Once this is installed then I have <code>mysql</code> and can setup my databases, etc.</p>
 
 <p>Ignoring the rest of the LAMP stack, I then need to connect Ruby to the Mysql I just installed through MacPorts. Its quite simple to do, once you know the right argument to pass to it. The easiest way is to just tell it where the <code>mysql5_conf</code> file is and let it figure out the rest for itself.</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>sudo gem install mysql -- --with-mysql-config<span class="o">=</span>/opt/local/bin/mysql_config5
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">sudo gem install mysql -- --with-mysql-config<span class="o">=</span>/opt/local/bin/mysql_config5</code></pre></div>
 <p>Hopefully this will save me 10 minutes of googling next time I need to do this!</p>
 
 <h3 id="update-2009-01-21">Update 2009-01-21</h3>
@@ -41,10 +37,8 @@ <h3 id="update-2009-01-21">Update 2009-01-21</h3>
 <h3 id="update-2009-10-19">Update 2009-10-19</h3>
 
 <p>On Snow Leopard I needed to tell rubygems to install the gem as a 64-bit binary. Hattip to <a href="http://www.schmidp.com/2009/06/14/rubyrails-and-mysql-on-snow-leopard-10a380/comment-page-1/">Philipp</a></p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>sudo env <span class="nv">ARCHFLAGS</span><span class="o">=</span><span class="s2">&quot;-arch x86_64&quot;</span> gem install mysql -- <span class="se">\</span>
-  --with-mysql-config<span class="o">=</span>/opt/local/bin/mysql_config5
-</code></pre></div>
-<footer><p class="tags">
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">sudo env <span class="nv">ARCHFLAGS</span><span class="o">=</span><span class="s2">&#34;-arch x86_64&#34;</span> gem install mysql -- <span class="se">\
+</span><span class="se"></span>  --with-mysql-config<span class="o">=</span>/opt/local/bin/mysql_config5</code></pre></div><footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/bash">bash</a>, <a class="button is-link" href="/tag/cli">cli</a>, <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/fix">fix</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/gem">gem</a>, <a class="button is-link" href="/tag/google">google</a>, <a class="button is-link" href="/tag/installing">installing</a>, <a class="button is-link" href="/tag/macports">macports</a>, <a class="button is-link" href="/tag/mysql">mysql</a>, <a class="button is-link" href="/tag/programming">programming</a>, <a class="button is-link" href="/tag/rails">rails</a>, <a class="button is-link" href="/tag/ruby">ruby</a> and <a class="button is-link" href="/tag/rubygems">rubygems</a>
 </p>
 <p class="license">
diff --git i/public/merry-testing/index.html w/public/merry-testing/index.html
index d1ef7c9..fdba4ea 100644
--- i/public/merry-testing/index.html
+++ w/public/merry-testing/index.html
@@ -25,49 +25,41 @@
 <p>Just a few examples of the same test written in a few languages. Its testing setting the date on an object that is created in the tests' setup method already. These fall under the unit testing, rather than full-stack testing.</p>
 
 <h3 id="testing-in-objc-with-ocunit-http-www-sente-ch-software-ocunit">Testing in ObjC with <a href="http://www.sente.ch/software/ocunit/">OCUnit</a></h3>
-<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span></span><span class="c1">// Add a date and time</span>
-<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testSettingDate</span>
-<span class="p">{</span>    
-    <span class="bp">NSDate</span> <span class="o">*</span><span class="n">theDate</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">];</span>        
+<div class="highlight"><pre class="chroma"><code class="language-objc" data-lang="objc">// Add a date and time
+- (void)testSettingDate
+{    
+    NSDate *theDate = [NSDate date];        
     
-    <span class="n">STAssertNoThrow</span><span class="p">([</span><span class="n">calc</span> <span class="nl">setDate</span><span class="p">:</span><span class="n">theDate</span><span class="p">],</span> <span class="s">@&quot;Shouldn&#39;t raise an exception&quot;</span><span class="p">);</span>
-    <span class="c1">// And it should match when pulled out as well</span>
-    <span class="n">STAssertEqualObjects</span><span class="p">([</span><span class="n">calc</span> <span class="n">date</span><span class="p">],</span> <span class="n">theDate</span><span class="p">,</span>
-                         <span class="s">@&quot;%@ should match %@&quot;</span><span class="p">,</span>
-                         <span class="p">[</span><span class="n">calc</span> <span class="n">date</span><span class="p">],</span> <span class="n">theDate</span><span class="p">);</span>
-
-<span class="p">}</span>
-</code></pre></div>
+    STAssertNoThrow([calc setDate:theDate], @&#34;Shouldn&#39;t raise an exception&#34;);
+    // And it should match when pulled out as well
+    STAssertEqualObjects([calc date], theDate,
+                         @&#34;%@ should match %@&#34;,
+                         [calc date], theDate);
 
+}</code></pre></div>
 <h3 id="testing-in-ruby-using-rspec-http-rspec-info">Testing in Ruby using <a href="http://rspec.info/">RSpec</a></h3>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="n">it</span> <span class="s2">&quot;should set the date successfully&quot;</span> <span class="k">do</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">it</span> <span class="s2">&#34;should set the date successfully&#34;</span> <span class="k">do</span>
   <span class="n">the_date</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span>
 
   <span class="vi">@calc</span><span class="o">.</span><span class="n">date</span> <span class="o">=</span> <span class="n">the_date</span>
   <span class="c1"># And it should match when pulled out as well</span>
   <span class="vi">@calc</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="n">the_date</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <h3 id="testing-in-ruby-using-test-unit-http-www-ruby-doc-org-stdlib-libdoc-test-unit-rdoc-classes-test-unit-html">Testing in Ruby using <a href="http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/classes/Test/Unit.html">Test::Unit</a></h3>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">test_setting_date</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">test_setting_date</span>
   <span class="n">the_date</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span>
   <span class="vi">@calc</span><span class="o">.</span><span class="n">date</span> <span class="o">=</span> <span class="n">the_date</span>
   <span class="c1"># And it should match when pulled out as well</span>
   <span class="n">assert_equal</span><span class="p">(</span><span class="vi">@calc</span><span class="o">.</span><span class="n">date</span><span class="p">,</span> <span class="n">the_date</span><span class="p">)</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <h3 id="testing-in-php-using-phpunit-http-phpun-it">Testing in PHP using <a href="http://phpun.it/">PHPUnit</a></h3>
-<div class="highlight"><pre><code class="language-php" data-lang="php"><span></span><span class="x">function testSettingDate()</span>
-<span class="x">{</span>
-<span class="x">    $date = date();</span>
-<span class="x">    $calc-&gt;date = $date;</span>
-<span class="x">    # And it should match when pulled out as well</span>
-<span class="x">    $this-&gt;assertEquals($calc-&gt;date, $date);</span>
-<span class="x">}</span>
-</code></pre></div>
-<footer><p class="tags">
+<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="x">function testSettingDate()
+</span><span class="x">{
+</span><span class="x">    $date = date();
+</span><span class="x">    $calc-&gt;date = $date;
+</span><span class="x">    # And it should match when pulled out as well
+</span><span class="x">    $this-&gt;assertEquals($calc-&gt;date, $date);
+</span><span class="x">}</span></code></pre></div><footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/objective-c">objective-c</a>, <a class="button is-link" href="/tag/ocunit">ocunit</a>, <a class="button is-link" href="/tag/php">php</a>, <a class="button is-link" href="/tag/phpunit">phpunit</a>, <a class="button is-link" href="/tag/programming">programming</a>, <a class="button is-link" href="/tag/rspec">rspec</a>, <a class="button is-link" href="/tag/ruby">ruby</a>, <a class="button is-link" href="/tag/tech">tech</a> and <a class="button is-link" href="/tag/testunit">test::unit</a>
 </p>
 <p class="license">
diff --git i/public/migrating-rubygems-to-ruby-19x/index.html w/public/migrating-rubygems-to-ruby-19x/index.html
index 27a400d..25db810 100644
--- i/public/migrating-rubygems-to-ruby-19x/index.html
+++ w/public/migrating-rubygems-to-ruby-19x/index.html
@@ -23,9 +23,7 @@
   </header><p>So I just installed ruby 1.9.1 through <a href="http://macports.org/">MacPorts</a> and wanted to easily migrate my rubygems across from 1.8 to see which ones would fail to install.</p>
 
 <p>Thought about it for a while, then came up with the following bash one-liner to do it:</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>gem list <span class="p">|</span> grep <span class="s2">&quot;(&quot;</span> <span class="p">|</span> awk <span class="s1">&#39;{ print $1 }&#39;</span> <span class="p">|</span> xargs -L <span class="m">1</span> gem1.9 install
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">gem list <span class="p">|</span> grep <span class="s2">&#34;(&#34;</span> <span class="p">|</span> awk <span class="s1">&#39;{ print $1 }&#39;</span> <span class="p">|</span> xargs -L <span class="m">1</span> gem1.9 install</code></pre></div>
 <p><strong>NB:</strong> Installing Ruby 1.9.1 through macports <code>sudo port install ruby19</code> means I get <code>ruby1.9</code>, <code>gem1.9</code> and <code>rake1.9</code> installed alongside my usual 1.8 <code>ruby</code>, <code>gem</code> and <code>rake</code>.</p>
 
 <p>That grabs the list of installed gems from <code>gem</code>, searches for lines containing &quot;(&quot; so it only grabs the gem names, spits out the first section of the line, which is the name of the gem, and finally calls <code>gem1.9 install</code> for each line via <code>xargs -L 1</code>. Make sure to run it as root or prefix <code>gem1.9</code> with <code>sudo</code>. <em>(Or let it install in your home folder, but I hate that.)</em></p>
diff --git i/public/nsobject-load-in-macruby/index.html w/public/nsobject-load-in-macruby/index.html
index 10d8f7c..b3064c3 100644
--- i/public/nsobject-load-in-macruby/index.html
+++ w/public/nsobject-load-in-macruby/index.html
@@ -37,28 +37,24 @@ <h3 id="what-is-nsobject-load">What is +[NSObject load]?</h3>
 <p>The main place I've seen it used (and used it myself) is in <a href="http://www.culater.net/software/SIMBL/SIMBL.php">SIMBL</a> plugins. A SIMBL plugin is an NSBundle that contains code which is loaded (injected) into a running application shortly after said application is launched. It lets you extend (or &quot;fix&quot;) cocoa applications with additional features. So you have this bundle of code, that gets loaded into a running application some point after it starts, and you want to run some code as the bundle is loaded - usually to kick off doing whatever you want to do in the plugin. This is where <code>load</code> becomes useful.</p>
 
 <p>Here's a quick implementation that just logs to the console:</p>
-<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span></span>    <span class="k">@implementation</span> <span class="nc">MainController</span>
+<div class="highlight"><pre class="chroma"><code class="language-objc" data-lang="objc">    @implementation MainController
     
-    <span class="o">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">load</span>
-    <span class="p">{</span>
-        <span class="n">NSlog</span><span class="p">(</span><span class="s">@&quot;MainController#load called&quot;</span><span class="p">);</span>
-    <span class="p">}</span>
-</code></pre></div>
-
+    + (void) load
+    {
+        NSlog(@&#34;MainController#load called&#34;);
+    }</code></pre></div>
 <h3 id="now-where-does-macruby-come-into-this">Now where does MacRuby come into this?</h3>
 
 <p>Well I came across a need to do the same in ruby, have some code triggered when the class is loaded into the runtime. Tried implementing <code>Class.load</code> but to no avail. Then remembered MacRuby is just ruby! And I can call any code from within my ruby class definition.</p>
 
 <p>For continuity I still call it <code>Class.load</code>, but then call it as soon as I've defined it in the class. Eg:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">class</span> <span class="nc">MainController</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MainController</span>
   <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">load</span>
-    <span class="no">NSLog</span> <span class="s2">&quot;MainController#load called&quot;</span>
+    <span class="no">NSLog</span> <span class="s2">&#34;MainController#load called&#34;</span>
   <span class="k">end</span>
 
   <span class="nb">self</span><span class="o">.</span><span class="n">load</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p>Of course, I'm not sure when the Objective-C method is called, it's probably after the entire class has been defined rather than as soon as <code>load</code> has been loaded into the runtime. So you might want to move the <code>self.load</code> call to just before the closing <code>end</code>.</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/macruby">MacRuby</a>, <a class="button is-link" href="/tag/simbl">SIMBL</a>, <a class="button is-link" href="/tag/apple">apple</a>, <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/mac">mac</a>, <a class="button is-link" href="/tag/objc">objc</a>, <a class="button is-link" href="/tag/objective-c">objective-c</a>, <a class="button is-link" href="/tag/os-x">os x</a>, <a class="button is-link" href="/tag/programming">programming</a>, <a class="button is-link" href="/tag/ruby">ruby</a>, <a class="button is-link" href="/tag/ruby1.9">ruby1.9</a> and <a class="button is-link" href="/tag/tech">tech</a>
diff --git i/public/potty-training-yaml/index.html w/public/potty-training-yaml/index.html
index 923ee61..0db9988 100644
--- i/public/potty-training-yaml/index.html
+++ w/public/potty-training-yaml/index.html
@@ -23,15 +23,15 @@
   </header><p>Ran into a problem today where I have a class with a few attributes on it, but I only want a certain three of those attributes to appear in the YAML dump of a class instance.</p>
 
 <p>Diving straight into a code example--lets say we have a <code>Contact</code> class, and we only want to dump the <code>name</code>, <code>email</code> and <code>website</code> attributes.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="nb">require</span> <span class="s2">&quot;yaml&quot;</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">&#34;yaml&#34;</span>
 
 <span class="k">class</span> <span class="nc">Contact</span>
   <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:website</span><span class="p">,</span> <span class="ss">:telephone</span>
 
   <span class="c1"># helper method to make setting up easy</span>
-  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">params</span><span class="o">=</span><span class="p">{})</span>
+  <span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">initialize</span><span class="p">(</span><span class="n">params</span><span class="o">=</span><span class="p">{})</span>
     <span class="n">params</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
-      <span class="n">meffod</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">=&quot;</span>
+      <span class="n">meffod</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">key</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">=&#34;</span>
       <span class="nb">send</span><span class="p">(</span><span class="n">meffod</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="n">meffod</span><span class="p">)</span>
     <span class="k">end</span>
   <span class="k">end</span>
@@ -39,40 +39,32 @@
 
 <span class="c1"># And create an instance for us to play with</span>
 <span class="n">caius</span> <span class="o">=</span> <span class="no">Contact</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
-  <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Caius&quot;</span><span class="p">,</span>
-  <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;dev@caius.name&quot;</span><span class="p">,</span>
-  <span class="ss">:website</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://caius.name/&quot;</span><span class="p">,</span>
-  <span class="ss">:telephone</span> <span class="o">=&gt;</span> <span class="s2">&quot;12345&quot;</span>
-<span class="p">)</span>
-</code></pre></div>
-
+  <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&#34;Caius&#34;</span><span class="p">,</span>
+  <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&#34;dev@caius.name&#34;</span><span class="p">,</span>
+  <span class="ss">:website</span> <span class="o">=&gt;</span> <span class="s2">&#34;http://caius.name/&#34;</span><span class="p">,</span>
+  <span class="ss">:telephone</span> <span class="o">=&gt;</span> <span class="s2">&#34;12345&#34;</span>
+<span class="p">)</span></code></pre></div>
 <p>As we'd expect when dumping this, all instance variables get dumped out:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="nb">print</span> <span class="n">caius</span><span class="o">.</span><span class="n">to_yaml</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">print</span> <span class="n">caius</span><span class="o">.</span><span class="n">to_yaml</span>
 <span class="c1"># &gt;&gt; --- !ruby/object:Contact </span>
 <span class="c1"># &gt;&gt; email: dev@caius.name</span>
 <span class="c1"># &gt;&gt; name: Caius</span>
-<span class="c1"># &gt;&gt; telephone: &quot;12345&quot;</span>
-<span class="c1"># &gt;&gt; website: http://caius.name/</span>
-</code></pre></div>
-
+<span class="c1"># &gt;&gt; telephone: &#34;12345&#34;</span>
+<span class="c1"># &gt;&gt; website: http://caius.name/</span></code></pre></div>
 <p>Initially I tried to override <code>to_yaml</code> and unset the instance variables I didn't want showing up, but that just made them show up empty. After digging around a bit more, I happened across the <a href="http://yaml4r.sourceforge.net/doc/page/type_families.htm">Type Families</a> page in the yaml4r docs, which right at the bottom mentions <code>to_yaml_properties</code>.</p>
 
 <p>Turns out <code>to_yaml_properties</code> returns an array of instance variable names (as strings) that should be dumped out as part of the object. A quick method definition later, and we're only dumping the variables we want. (<em>See my <a href="http://caiustheory.com/ruby-shortcuts">Ruby Shortcuts</a> post if you don't know what <code>%w()</code> does</em>)</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">class</span> <span class="nc">Contact</span>
-  <span class="k">def</span> <span class="nf">to_yaml_properties</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Contact</span>
+  <span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">to_yaml_properties</span>
     <span class="sx">%w(@name @email @website)</span>
   <span class="k">end</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p>And now we dump the class, expecting only the three attributes to be outputted:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="nb">print</span> <span class="n">caius</span><span class="o">.</span><span class="n">to_yaml</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">print</span> <span class="n">caius</span><span class="o">.</span><span class="n">to_yaml</span>
 <span class="c1"># &gt;&gt; --- !ruby/object:Contact </span>
 <span class="c1"># &gt;&gt; name: Caius</span>
 <span class="c1"># &gt;&gt; email: dev@caius.name</span>
-<span class="c1"># &gt;&gt; website: http://caius.name/</span>
-</code></pre></div>
-
+<span class="c1"># &gt;&gt; website: http://caius.name/</span></code></pre></div>
 <p>Success!</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/yaml">YAML</a>, <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/fix">fix</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/link">link</a>, <a class="button is-link" href="/tag/potty-training">potty training</a>, <a class="button is-link" href="/tag/programming">programming</a>, <a class="button is-link" href="/tag/ruby">ruby</a> and <a class="button is-link" href="/tag/troubleshooting">troubleshooting</a>
diff --git i/public/raspberry-pi-3-as-an-emergency-router/index.html w/public/raspberry-pi-3-as-an-emergency-router/index.html
index 50e8b0f..c08a88f 100644
--- i/public/raspberry-pi-3-as-an-emergency-router/index.html
+++ w/public/raspberry-pi-3-as-an-emergency-router/index.html
@@ -48,7 +48,7 @@
 </code></pre>
 
 <p>And then it's time to handle WAN -&gt; LAN traffic and the reverse. Make sure you have packet forwarding enabled, and then setup the firewall to handle NAT and also keep out undesirable traffic.</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>sysctl net.ipv4.ip_forward<span class="o">=</span><span class="m">1</span>
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">sysctl net.ipv4.ip_forward<span class="o">=</span><span class="m">1</span>
 
 iptables -F
 iptables -X
@@ -63,9 +63,7 @@
 iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
 iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
 iptables -t nat -A POSTROUTING -o ppp0 -j MASQUERADE
-iptables -A INPUT -j DROP
-</code></pre></div>
-
+iptables -A INPUT -j DROP</code></pre></div>
 <p>Hey presto, you have a working emergency router. In testing I found my fibre connection (80/20Mb) was slower than the traffic the RPi could push, so didn't notice any difference vs my normal router. (Although I did disable a bunch of automated stuff, so there was less contention on the WAN link.)</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/rpi">RPi</a>, <a class="button is-link" href="/tag/networking">networking</a> and <a class="button is-link" href="/tag/unix">unix</a>
diff --git i/public/read-standard-input-using-objective-c/index.html w/public/read-standard-input-using-objective-c/index.html
index 9e2962e..f8c2829 100644
--- i/public/read-standard-input-using-objective-c/index.html
+++ w/public/read-standard-input-using-objective-c/index.html
@@ -25,12 +25,10 @@
 <p>The answer is quite simple really, just use <code>NSFileHandle</code>. More specifically <code>+[NSFileHandle fileHandleWithStandardInput]</code>. You can then read all data currently in <code>STDIN</code>, monitor it for new data and anything else you can do with a normal <code>NSFileHandle</code>.</p>
 
 <p>And here's some example code, reads all data from <code>STDIN</code> and stores it into an NSString:</p>
-<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span></span><span class="bp">NSFileHandle</span> <span class="o">*</span><span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSFileHandle</span> <span class="n">fileHandleWithStandardInput</span><span class="p">];</span>
-<span class="bp">NSData</span> <span class="o">*</span><span class="n">inputData</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSData</span> <span class="nl">dataWithData</span><span class="p">:[</span><span class="n">input</span> <span class="n">readDataToEndOfFile</span><span class="p">]];</span>
-<span class="bp">NSString</span> <span class="o">*</span><span class="n">inputString</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSString</span> <span class="n">alloc</span><span class="p">]</span>
-  <span class="nl">initWithData</span><span class="p">:</span><span class="n">inputData</span> <span class="nl">encoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-objc" data-lang="objc">NSFileHandle *input = [NSFileHandle fileHandleWithStandardInput];
+NSData *inputData = [NSData dataWithData:[input readDataToEndOfFile]];
+NSString *inputString = [[NSString alloc]
+  initWithData:inputData encoding:NSUTF8StringEncoding];</code></pre></div>
 <p><em>I'm using this in GarbageCollected apps, memory management without GC is left as an exercise to the user.</em></p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/cli">cli</a>, <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/google">google</a>, <a class="button is-link" href="/tag/objc">objc</a>, <a class="button is-link" href="/tag/objective-c">objective-c</a> and <a class="button is-link" href="/tag/programming">programming</a>
diff --git i/public/refactoring-code-logically/index.html w/public/refactoring-code-logically/index.html
index b02b1b8..dee993c 100644
--- i/public/refactoring-code-logically/index.html
+++ w/public/refactoring-code-logically/index.html
@@ -25,79 +25,65 @@
 <p>The show object has an id passed in using the <code>params</code> Hash, I want to check if that post exists in the database first.  If it does, then render the page, and if it doesn't return a 404 error page.</p>
 
 <p>So I start off by writing this in <em>longhand</em> ruby, I'm using the <a href="http://merbivore.com/">merb</a> framework with <a href="http://datamapper.com/">DataMapper</a> ORM by the way.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">show</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">show</span>
   <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
   <span class="k">if</span> <span class="vi">@post</span>
     <span class="n">render</span>
   <span class="k">else</span>
-    <span class="k">raise</span> <span class="s2">&quot;404 - Not found&quot;</span>
+    <span class="k">raise</span> <span class="s2">&#34;404 - Not found&#34;</span>
   <span class="k">end</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p>Now whilst theres nothing wrong with this code, it just doesn't look right to me. There is a big if/else statement in there whilst I'm sure there doesn't need to be.</p>
 
 <p>Now I know if I return at any point in a ruby method, it exits the method at that point. So the first thing to is to refactor the <code>if</code> test to remove a line of code. I shall assign <code>@post</code> to the result of the DB as the actual if statement's test.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">show</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">show</span>
   <span class="k">if</span> <span class="p">(</span><span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">))</span>
     <span class="n">render</span>
   <span class="k">else</span>
-    <span class="k">raise</span> <span class="s2">&quot;404 - Not found&quot;</span>
+    <span class="k">raise</span> <span class="s2">&#34;404 - Not found&#34;</span>
   <span class="k">end</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p>So thats reading slightly better, and also is a line less of code. Now I wonder if I can use a <code>return true</code> in there to stop me having to explicitly state an <code>else</code> clause.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">show</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">show</span>
   <span class="k">if</span> <span class="p">(</span><span class="vi">@post</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">))</span>
     <span class="n">render</span>
     <span class="k">return</span> <span class="kp">true</span>
   <span class="k">end</span>
-  <span class="k">raise</span> <span class="s2">&quot;404 - Not found&quot;</span>
-<span class="k">end</span>
-</code></pre></div>
-
+  <span class="k">raise</span> <span class="s2">&#34;404 - Not found&#34;</span>
+<span class="k">end</span></code></pre></div>
 <p>Now the eagerest amongst you will be wondering what the advantage of that code is. It doesn't appear any more readable (slightly less in fact as you have to figure out its an implicit else) and is exactly the same amount of lines as the previous example. But what if we change the <code>if</code> to an <code>if !</code> and flip the code logic around?</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">show</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">show</span>
   <span class="k">if</span> <span class="o">!</span> <span class="p">(</span><span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">))</span>
-    <span class="k">raise</span> <span class="s2">&quot;404 - not found&quot;</span>
+    <span class="k">raise</span> <span class="s2">&#34;404 - not found&#34;</span>
   <span class="k">end</span>
   <span class="n">render</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p>Now a raise will stop the code executing, and in the real application you would in fact just redirect to your 404 error page. The problem now is the <code>if !</code> looks ugly and isn't easily readable.</p>
 
 <p>All <code>unless</code> does is <code>if !</code>, that is, if the inverse of the result of the test statement is true, then invoke the block given to it. A quick example for you:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="c1"># without unless</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="c1"># without unless</span>
 <span class="k">if</span> <span class="o">!</span><span class="vi">@user</span><span class="o">.</span><span class="n">logged_in?</span>
-  <span class="nb">puts</span> <span class="s2">&quot;Please login.&quot;</span>
+  <span class="nb">puts</span> <span class="s2">&#34;Please login.&#34;</span>
 <span class="k">end</span>
     
 <span class="c1"># using unless</span>
 <span class="k">unless</span> <span class="vi">@user</span><span class="o">.</span><span class="n">logged_in?</span>
-  <span class="nb">puts</span> <span class="s2">&quot;Please login.&quot;</span>
-<span class="k">end</span>
-</code></pre></div>
-
+  <span class="nb">puts</span> <span class="s2">&#34;Please login.&#34;</span>
+<span class="k">end</span></code></pre></div>
 <p>Now whilst <code>if !</code> doesn't seem that bad compared to <code>unless</code>, the readablility of the code increases. It reads more as a flow of logic, and is quicker for the human brain to walk through (my brain anyway!)</p>
 
 <p>So using unless we get 4 lines of code that is easily readable.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">show</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">show</span>
   <span class="k">unless</span> <span class="p">(</span><span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">))</span>
-    <span class="k">raise</span> <span class="s2">&quot;404 - Not found&quot;</span>
+    <span class="k">raise</span> <span class="s2">&#34;404 - Not found&#34;</span>
   <span class="k">end</span>
   <span class="n">render</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p>Now what if we go one step further and use the unless shorthand way of testing and exectuting one line of code?</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">show</span>
-  <span class="k">raise</span> <span class="s2">&quot;404 - Not found&quot;</span> <span class="k">unless</span> <span class="p">(</span><span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">))</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">show</span>
+  <span class="k">raise</span> <span class="s2">&#34;404 - Not found&#34;</span> <span class="k">unless</span> <span class="p">(</span><span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">))</span>
   <span class="n">render</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p>And that is generally how I write my code logically.  Of course for something simple like this I'd probably jump in at the last block having refactored it in my head first, but for more complex things I tend to write them exlicitly and then refactor them down whilst maintaining readability of my code.</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/datamapper">datamapper</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/merb">merb</a>, <a class="button is-link" href="/tag/programming">programming</a>, <a class="button is-link" href="/tag/ruby">ruby</a> and <a class="button is-link" href="/tag/tech">tech</a>
diff --git i/public/ruby-shortcuts/index.html w/public/ruby-shortcuts/index.html
index 7ece7b6..cac0bd9 100644
--- i/public/ruby-shortcuts/index.html
+++ w/public/ruby-shortcuts/index.html
@@ -29,52 +29,40 @@
 <h3 id="strings">Strings</h3>
 
 <p><code>%</code> and <code>%Q</code> are the same as using double quotes, including string interpolation. Really useful when you want to create a string that contains double quotes, but without the hassle of escaping them.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="sx">%{}</span>                 <span class="c1"># =&gt; &quot;&quot;</span>
-<span class="sx">%Q{}</span>                <span class="c1"># =&gt; &quot;&quot;</span>
-
-<span class="sx">%{caius}</span>            <span class="c1"># =&gt; &quot;caius&quot;</span>
-<span class="sx">%{caius </span><span class="si">#{</span><span class="mi">5</span><span class="si">}</span><span class="sx">}</span>       <span class="c1"># =&gt; &quot;caius 5&quot;</span>
-<span class="sx">%{some &quot;foo&quot; thing}</span> <span class="c1"># =&gt; &quot;some \&quot;foo\&quot; thing&quot;</span>
-</code></pre></div>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="sx">%{}</span>                 <span class="c1"># =&gt; &#34;&#34;</span>
+<span class="sx">%Q{}</span>                <span class="c1"># =&gt; &#34;&#34;</span>
 
+<span class="sx">%{caius}</span>            <span class="c1"># =&gt; &#34;caius&#34;</span>
+<span class="sx">%{caius </span><span class="si">#{</span><span class="mi">5</span><span class="o"></span><span class="si">}</span><span class="sx">}</span>       <span class="c1"># =&gt; &#34;caius 5&#34;</span>
+<span class="sx">%{some &#34;foo&#34; thing}</span> <span class="c1"># =&gt; &#34;some \&#34;foo\&#34; thing&#34;</span></code></pre></div>
 <p><code>%q</code> is equivalent to using single quotes. Behaves exactly the same, no string interpolation.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="sx">%q{}</span>           <span class="c1"># =&gt; &#39;&#39;</span>
-<span class="sx">%q{caius}</span>      <span class="c1"># =&gt; &quot;caius&quot;</span>
-<span class="sx">%q{caius #{5}}</span> <span class="c1"># =&gt; &quot;caius \#{5}&quot;</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="sx">%q{}</span>           <span class="c1"># =&gt; &#39;&#39;</span>
+<span class="sx">%q{caius}</span>      <span class="c1"># =&gt; &#34;caius&#34;</span>
+<span class="sx">%q{caius #{5}}</span> <span class="c1"># =&gt; &#34;caius \#{5}&#34;</span></code></pre></div>
 <h3 id="arrays">Arrays</h3>
 
 <p><code>%w</code> is the equivalent of using String#split. It takes a string and splits it on whitespace. With the added bonus of being able to escape whitespace too. <code>%W</code> allows string interpolation.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="sx">%w(foo bar sed)</span>  <span class="c1"># =&gt; [&quot;foo&quot;, &quot;bar&quot;, &quot;sed&quot;]</span>
-<span class="sx">%w(foo\ bar sed)</span> <span class="c1"># =&gt; [&quot;foo bar&quot;, &quot;sed&quot;]</span>
-<span class="sx">%W(foo </span><span class="si">#{</span><span class="mi">5</span><span class="si">}</span><span class="sx"> bar)</span> <span class="c1"># =&gt; [&quot;foo&quot;, &quot;5&quot;, &quot;bar&quot;]</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="sx">%w(foo bar sed)</span>  <span class="c1"># =&gt; [&#34;foo&#34;, &#34;bar&#34;, &#34;sed&#34;]</span>
+<span class="sx">%w(foo\ bar sed)</span> <span class="c1"># =&gt; [&#34;foo bar&#34;, &#34;sed&#34;]</span>
+<span class="sx">%W(foo </span><span class="si">#{</span><span class="mi">5</span><span class="o"></span><span class="si">}</span><span class="sx"> bar)</span> <span class="c1"># =&gt; [&#34;foo&#34;, &#34;5&#34;, &#34;bar&#34;]</span></code></pre></div>
 <h3 id="regexes">Regexes</h3>
 
 <p><code>%r</code> is just like using <code>//</code> to create a regexp object. Comes in handy when you're writing a regex containing <code>/</code> as you don't have to continually escape it.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="sr">%r{foo|bar}</span> <span class="c1"># =&gt; /foo|bar/</span>
-<span class="sr">%r{foo/bar}</span> <span class="c1"># =&gt; /foo\/bar/</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="sr">%r{foo|bar}</span> <span class="c1"># =&gt; /foo|bar/</span>
+<span class="sr">%r{foo/bar}</span> <span class="c1"># =&gt; /foo\/bar/</span></code></pre></div>
 <h3 id="symbols">Symbols</h3>
 
 <p><code>%s</code> creates a symbol, just like writing <code>:foo</code> manually. It takes care of escaping the symbol, but unlike <code>:&quot;&quot;</code> it doesn't allow string interpolation however.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="sx">%s{foo}</span>      <span class="c1"># =&gt; :foo</span>
-<span class="sx">%s{foo/bar}</span>  <span class="c1"># =&gt; :&quot;foo/bar&quot;</span>
-<span class="ss">:&quot;foo-</span><span class="si">#{</span><span class="mi">5</span><span class="si">}</span><span class="ss">&quot;</span>  <span class="c1"># =&gt; :&quot;foo-5&quot;</span>
-<span class="sx">%s{foo-#{5}}</span> <span class="c1"># =&gt; :&quot;foo-\#{5}&quot;</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="sx">%s{foo}</span>      <span class="c1"># =&gt; :foo</span>
+<span class="sx">%s{foo/bar}</span>  <span class="c1"># =&gt; :&#34;foo/bar&#34;</span>
+<span class="ss">:&#34;foo-</span><span class="si">#{</span><span class="mi">5</span><span class="o"></span><span class="si">}</span><span class="ss">&#34;</span>  <span class="c1"># =&gt; :&#34;foo-5&#34;</span>
+<span class="sx">%s{foo-#{5}}</span> <span class="c1"># =&gt; :&#34;foo-\#{5}&#34;</span></code></pre></div>
 <h3 id="shelling-out">Shelling out</h3>
 
 <p><code>%x</code> is the same as backticks (<code>``</code>), executes the command in a shell and returns the output as a string. And just like backticks it supports string interpolation.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="sb">`echo hi`</span>     <span class="c1"># =&gt; &quot;hi\n&quot;</span>
-<span class="sx">%x{echo hi}</span>   <span class="c1"># =&gt; &quot;hi\n&quot;</span>
-<span class="sx">%x{echo </span><span class="si">#{</span><span class="mi">5</span><span class="si">}</span><span class="sx">}</span> <span class="c1"># =&gt; &quot;5\n&quot;</span>
-</code></pre></div>
-<footer><p class="tags">
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="sb">`echo hi`</span>     <span class="c1"># =&gt; &#34;hi\n&#34;</span>
+<span class="sx">%x{echo hi}</span>   <span class="c1"># =&gt; &#34;hi\n&#34;</span>
+<span class="sx">%x{echo </span><span class="si">#{</span><span class="mi">5</span><span class="o"></span><span class="si">}</span><span class="sx">}</span> <span class="c1"># =&gt; &#34;5\n&#34;</span></code></pre></div><footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/programming">programming</a>, <a class="button is-link" href="/tag/ruby">ruby</a>, <a class="button is-link" href="/tag/tech">tech</a> and <a class="button is-link" href="/tag/tips">tips</a>
 </p>
 <p class="license">
diff --git i/public/sending-array-elements-as-individual-arguments-in-ruby/index.html w/public/sending-array-elements-as-individual-arguments-in-ruby/index.html
index ca2f101..ecdc4bc 100644
--- i/public/sending-array-elements-as-individual-arguments-in-ruby/index.html
+++ w/public/sending-array-elements-as-individual-arguments-in-ruby/index.html
@@ -23,36 +23,28 @@
   </header><p>Lets imagine we've got an array of strings, and we want to print it out as a list of strings using printf. <em>(If you're complaining about my logic here, hold fire for just a second good sir/madam.)</em></p>
 
 <p>So we start off with the array of strings, and then pass it to printf with the right amount of <code>%s</code>'s in the format string:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;one&quot;</span><span class="p">,</span> <span class="s2">&quot;two&quot;</span><span class="p">,</span> <span class="s2">&quot;three&quot;</span><span class="o">]</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;one&#34;</span><span class="p">,</span> <span class="s2">&#34;two&#34;</span><span class="p">,</span> <span class="s2">&#34;three&#34;</span><span class="o">]</span>
 
-<span class="nb">printf</span> <span class="s2">&quot;%s, %s, %s&quot;</span><span class="p">,</span> <span class="n">arr</span>
+<span class="nb">printf</span> <span class="s2">&#34;%s, %s, %s&#34;</span><span class="p">,</span> <span class="n">arr</span>
 <span class="c1"># ~&gt; -:3:in `printf&#39;: too few arguments (ArgumentError)</span>
-<span class="c1"># ~&gt;     from -:3</span>
-</code></pre></div>
-
+<span class="c1"># ~&gt;     from -:3</span></code></pre></div>
 <p>Oh whoops, we've actually only passed <code>&quot;%s, %s, %s&quot;, [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</code> to printf. So of course it whinges about not getting enough arguments. Now how do we fix this, how <strong>do</strong> we pass an array with each element a seperate argument to a method?</p>
 
 <p>We use the <code>*</code> of course! Just prefix the variable name with <code>*</code> and the method is passed each element as separate arguments, rather than the whole array as one arguement.</p>
 
 <p>Going back to our <code>printf</code> example above, we simply insert one character <em>(the lowly <code>*</code>)</em> and end up with a string being outputted.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="nb">printf</span> <span class="s2">&quot;%s, %s, %s&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">arr</span>
-<span class="c1"># &gt;&gt; one, two, three</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">printf</span> <span class="s2">&#34;%s, %s, %s&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">arr</span>
+<span class="c1"># &gt;&gt; one, two, three</span></code></pre></div>
 <p>Now I realise this is a partially stupid example, but it serves to explain the point I wanted to make. If you were complaining about my choice of printf earlier, here is the way I think most rubyists would solve this problem instead.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;one&quot;</span><span class="p">,</span> <span class="s2">&quot;two&quot;</span><span class="p">,</span> <span class="s2">&quot;three&quot;</span><span class="o">]</span>
-
-<span class="nb">print</span> <span class="n">arr</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
-<span class="c1"># &gt;&gt; one two three</span>
-</code></pre></div>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;one&#34;</span><span class="p">,</span> <span class="s2">&#34;two&#34;</span><span class="p">,</span> <span class="s2">&#34;three&#34;</span><span class="o">]</span>
 
+<span class="nb">print</span> <span class="n">arr</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&#34; &#34;</span><span class="p">)</span>
+<span class="c1"># &gt;&gt; one two three</span></code></pre></div>
 <p>And if I wanted to be slightly cleverer with the <code>printf</code> version, and print out an array containing an unknown number of strings, but of a set width, then I could do the following. <em>(NB: This is actually how I ran into this problem.)</em></p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;one&quot;</span><span class="p">,</span> <span class="s2">&quot;two&quot;</span><span class="p">,</span> <span class="s2">&quot;three&quot;</span><span class="o">]</span>
-
-<span class="nb">printf</span> <span class="n">arr</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="s2">&quot;%6s&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">,</span> <span class="o">*</span><span class="n">arr</span>
-<span class="c1"># &gt;&gt;    one   two three</span>
-</code></pre></div>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;one&#34;</span><span class="p">,</span> <span class="s2">&#34;two&#34;</span><span class="p">,</span> <span class="s2">&#34;three&#34;</span><span class="o">]</span>
 
+<span class="nb">printf</span> <span class="n">arr</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="s2">&#34;%6s&#34;</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">,</span> <span class="o">*</span><span class="n">arr</span>
+<span class="c1"># &gt;&gt;    one   two three</span></code></pre></div>
 <p>And that is where the lowly <code>*</code> comes in.</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/programming">programming</a> and <a class="button is-link" href="/tag/ruby">ruby</a>
diff --git i/public/setting-up-git-with-rails-apps/index.html w/public/setting-up-git-with-rails-apps/index.html
index df8b438..fb0aa0d 100644
--- i/public/setting-up-git-with-rails-apps/index.html
+++ w/public/setting-up-git-with-rails-apps/index.html
@@ -38,10 +38,8 @@ <h4 id="gitignore">.gitignore</h4>
 </code></pre>
 
 <p>Then to make sure <code>log/</code> and <code>tmp/</code> are tracked, convention is to add a blank <code>.gitkeep</code> file in them.</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>touch log/.gitkeep
-touch tmp/.gitkeep
-</code></pre></div>
-<footer><p class="tags">
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">touch log/.gitkeep
+touch tmp/.gitkeep</code></pre></div><footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/git">git</a>, <a class="button is-link" href="/tag/programming">programming</a>, <a class="button is-link" href="/tag/rails">rails</a>, <a class="button is-link" href="/tag/ruby">ruby</a> and <a class="button is-link" href="/tag/tech">tech</a>
 </p>
 <p class="license">
diff --git i/public/setup-dhcp-interface-in-freebsd/index.html w/public/setup-dhcp-interface-in-freebsd/index.html
index 92fe871..2d99964 100644
--- i/public/setup-dhcp-interface-in-freebsd/index.html
+++ w/public/setup-dhcp-interface-in-freebsd/index.html
@@ -23,16 +23,12 @@
   </header><p>Given a FreeBSD instance without a configured network interface that you'd like to configure, first check what the name of the interface you want to configure is with <code>ifconfig</code>. (Mine is <code>em0</code> in this instance.)</p>
 
 <p>Then we need to add the configuration telling services that we want to use DHCP for this interface, and setting up our default router (use your IP, not mine!) too:</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>cat &gt;&gt; rc.conf <span class="s">&lt;&lt;CONF</span>
-<span class="s">ifconfig_em0=&quot;DHCP&quot;</span>
-<span class="s">default_router=&quot;192.168.1.1&quot;</span>
-<span class="s">CONF</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">cat &gt;&gt; rc.conf <span class="s">&lt;&lt;CONF
+</span><span class="s">ifconfig_em0=&#34;DHCP&#34;
+</span><span class="s">default_router=&#34;192.168.1.1&#34;
+</span><span class="s">CONF</span></code></pre></div>
 <p>And then we need to start <code>dhclient</code> on the given interface:</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>service dhclient start em0
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">service dhclient start em0</code></pre></div>
 <p>Hey presto, you should see dhclient finding a DHCP server and being handed an IP address for <code>em0</code>.</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/freebsd">FreeBSD</a>, <a class="button is-link" href="/tag/geek">geek</a> and <a class="button is-link" href="/tag/network">network</a>
diff --git i/public/smartos-recovery-mount-usbkey/index.html w/public/smartos-recovery-mount-usbkey/index.html
index da54877..3547472 100644
--- i/public/smartos-recovery-mount-usbkey/index.html
+++ w/public/smartos-recovery-mount-usbkey/index.html
@@ -33,11 +33,9 @@
 <p>I brought the machine up, choosing the second option for recovery at the grub menu. Waited for a login prompt, then logged in with <code>root</code>/<code>root</code>.</p>
 
 <p>Realised quite quickly that <code>/usbkey</code> must be persisted on the <code>zones</code> zfs pool otherwise the configuration would be lost after shutdown, so imported the correct pool, created a directory to mount into and then mounted the zfs share.</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>zpool import zones
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">zpool import zones
 mkdir /usbkey
-mount -F zfs zones/usbkey /usbkey
-</code></pre></div>
-<footer><p class="tags">
+mount -F zfs zones/usbkey /usbkey</code></pre></div><footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/smartos">SmartOS</a>, <a class="button is-link" href="/tag/fix">fix</a> and <a class="button is-link" href="/tag/geek">geek</a>
 </p>
 <p class="license">
diff --git i/public/some-small-refactorings-in-ruby/index.html w/public/some-small-refactorings-in-ruby/index.html
index d9e8d50..5eed13e 100644
--- i/public/some-small-refactorings-in-ruby/index.html
+++ w/public/some-small-refactorings-in-ruby/index.html
@@ -27,92 +27,70 @@
 <h3 id="multiple-equality-comparisons">Multiple equality comparisons</h3>
 
 <p>Testing the equality of an object against another is fairly simple, just do <code>foo == &quot;bar&quot;</code>. However, I usually try to test against multiple objects in a slightly different way. Your first thought might be that the easiest way is just to chain a series of <code>==</code> with the OR (<code>||</code>) operator.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="n">foo</span> <span class="o">==</span> <span class="s2">&quot;bar&quot;</span> <span class="o">||</span> <span class="n">foo</span> <span class="o">==</span> <span class="s2">&quot;baz&quot;</span> <span class="o">||</span> <span class="n">foo</span> <span class="o">==</span> <span class="ss">:sed</span> <span class="o">||</span> <span class="n">foo</span> <span class="o">==</span> <span class="mi">5</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">foo</span> <span class="o">==</span> <span class="s2">&#34;bar&#34;</span> <span class="o">||</span> <span class="n">foo</span> <span class="o">==</span> <span class="s2">&#34;baz&#34;</span> <span class="o">||</span> <span class="n">foo</span> <span class="o">==</span> <span class="ss">:sed</span> <span class="o">||</span> <span class="n">foo</span> <span class="o">==</span> <span class="mi">5</span><span class="o"></span></code></pre></div>
 <p>I much prefer to flip it around, think of the objects I'm testing against as a collection (<code>Array</code>), and then ask them if they contain the object I'm checking. And for that, I use <code>Array#include?</code></p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="o">[</span><span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;baz&quot;</span><span class="p">,</span> <span class="ss">:sed</span><span class="p">,</span> <span class="mi">5</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="o">[</span><span class="s2">&#34;bar&#34;</span><span class="p">,</span> <span class="s2">&#34;baz&#34;</span><span class="p">,</span> <span class="ss">:sed</span><span class="p">,</span> <span class="mi">5</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span></code></pre></div>
 <p><em>(And if you're only testing against strings, you could use <code>%w(bar baz)</code> as a shortcut to create the array. Here's more <a href="http://caiustheory.com/ruby-shortcuts">ruby shortcuts</a>.)</em></p>
 
 <h3 id="assigning-multiple-items-from-a-nested-hash-to-variables">Assigning multiple items from a nested hash to variables</h3>
 
 <p>Occasionally I find myself needing to be given a hash of a hash of data (most recently, an <a href="https://github.com/intridea/omniauth/wiki">omniauth</a> auth hash) and assign some values from it to separate variables within my code. Given the following hash, containing a nested hash:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="n">details</span> <span class="o">=</span> <span class="p">{</span>
-  <span class="ss">uid</span><span class="p">:</span> <span class="s2">&quot;12345&quot;</span><span class="p">,</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">details</span> <span class="o">=</span> <span class="p">{</span>
+  <span class="ss">uid</span><span class="p">:</span> <span class="s2">&#34;12345&#34;</span><span class="p">,</span>
   <span class="ss">info</span><span class="p">:</span> <span class="p">{</span>
-    <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Caius Durling&quot;</span><span class="p">,</span>
-    <span class="ss">nickname</span><span class="p">:</span> <span class="s2">&quot;caius&quot;</span><span class="p">,</span>
+    <span class="nb">name</span><span class="p">:</span> <span class="s2">&#34;Caius Durling&#34;</span><span class="p">,</span>
+    <span class="ss">nickname</span><span class="p">:</span> <span class="s2">&#34;caius&#34;</span><span class="p">,</span>
   <span class="p">},</span>
-<span class="p">}</span>
-</code></pre></div>
-
+<span class="p">}</span></code></pre></div>
 <p>Lets say we want to extract the name and nickname fields from <code>details[:info]</code> hash into their own local variables (or instance variables within a class, more likely.) We should probably handle the case of <code>details[:info]</code> not being a hash, and try not to read from it if that's the case - so we might end up with something like the following:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="nb">name</span> <span class="o">=</span> <span class="n">details</span><span class="o">[</span><span class="ss">:info</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">details</span><span class="o">[</span><span class="ss">:info</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">name</span> <span class="o">=</span> <span class="n">details</span><span class="o">[</span><span class="ss">:info</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">details</span><span class="o">[</span><span class="ss">:info</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span>
 <span class="n">nickname</span> <span class="o">=</span> <span class="n">details</span><span class="o">[</span><span class="ss">:info</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">details</span><span class="o">[</span><span class="ss">:info</span><span class="o">][</span><span class="ss">:nickname</span><span class="o">]</span>
 
-<span class="nb">name</span> <span class="c1"># =&gt; &quot;Caius Durling&quot;</span>
-<span class="n">nickname</span> <span class="c1"># =&gt; &quot;caius&quot;</span>
-</code></pre></div>
-
+<span class="nb">name</span> <span class="c1"># =&gt; &#34;Caius Durling&#34;</span>
+<span class="n">nickname</span> <span class="c1"># =&gt; &#34;caius&#34;</span></code></pre></div>
 <p>And then in the spirit of <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRYing</a> up our code, we see there's duplication in both lines in checking <code>details[:info]</code> exists (not actually that it's a hash, but hey ho, we rely on upstream to send us <code>nil</code> or a hash.) So we reduce it down using an if statement and give ourselves slightly less to type at the same time.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">if</span> <span class="p">((</span> <span class="n">info</span> <span class="o">=</span> <span class="n">details</span><span class="o">[</span><span class="ss">:info</span><span class="o">]</span> <span class="p">))</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">if</span> <span class="p">((</span> <span class="n">info</span> <span class="o">=</span> <span class="n">details</span><span class="o">[</span><span class="ss">:info</span><span class="o">]</span> <span class="p">))</span>
   <span class="nb">name</span> <span class="o">=</span> <span class="n">info</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
   <span class="n">nickname</span> <span class="o">=</span> <span class="n">info</span><span class="o">[</span><span class="ss">:nickname</span><span class="o">]</span>
 <span class="k">end</span>
 
-<span class="nb">name</span> <span class="c1"># =&gt; &quot;Caius Durling&quot;</span>
-<span class="n">nickname</span> <span class="c1"># =&gt; &quot;caius&quot;</span>
-</code></pre></div>
-
+<span class="nb">name</span> <span class="c1"># =&gt; &#34;Caius Durling&#34;</span>
+<span class="n">nickname</span> <span class="c1"># =&gt; &#34;caius&#34;</span></code></pre></div>
 <h3 id="returning-two-values-conditionally">Returning two values conditionally</h3>
 
 <p>Sometimes a method will end with a ternary, where depending on a condition it'll either return one or another value. If this conditional returns true, then the first value is returned. Otherwise it returns the second value. You could quite easily write it out as an if/else longer-form block too.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">my_method</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">my_method</span>
   <span class="vi">@blah</span> <span class="o">==</span> <span class="n">foo</span> <span class="p">?</span> <span class="ss">:foo_matches</span> <span class="p">:</span> <span class="ss">:no_match</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p>My brain finds picking the logic in this apart slightly harder mentally, than if I drop a <a href="http://en.wikipedia.org/wiki/Return_early">return early</a> bomb on the method. Then it reads more akin to how I'd think through the logic. Return the first value if this conditional returns true. Otherwise the method returns this second value. I think the second value being on a completely separate line helps me make this mental distinction quicker too.</p>
 
 <p>So I'd write it this way:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">my_method</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">my_method</span>
   <span class="k">return</span> <span class="ss">:foo_matches</span> <span class="k">if</span> <span class="vi">@blah</span> <span class="o">==</span> <span class="n">foo</span>
   <span class="ss">:no_match</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <h3 id="returning-nil-or-a-value-conditionally">Returning nil or a value conditionally</h3>
 
 <p>Following on from the last snippet, but taking advantage of the ruby runtime a bit more, is when you're wanting to return a value if a conditional is true, or otherwise false. The easy way is to just write <code>nil</code> in the ternary:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">my_method</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">my_method</span>
   <span class="vi">@foo</span> <span class="o">==</span> <span class="ss">:bar</span> <span class="p">?</span> <span class="ss">:foo_matches</span> <span class="p">:</span> <span class="kp">nil</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p>However, we know ruby returns the result of the last expression in the method. And that if a single line conditional isn't met, it returns nil from the expression. Combining that, we can rewrite the previous example into this:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">my_method</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">my_method</span>
   <span class="ss">:foo_matches</span> <span class="k">if</span> <span class="vi">@foo</span> <span class="o">==</span> <span class="ss">:bar</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p>And it will still return nil in the case that <code>@foo</code> doesn't match <code>:bar</code>.</p>
 
 <h3 id="returning-a-boolean">Returning a boolean</h3>
 
 <p>Sometimes you have a method that returns the result of a conditional, but it's written to return true/false in a conditional instead.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">my_method</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">my_method</span>
   <span class="vi">@foo</span> <span class="o">==</span> <span class="ss">:bar</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p>The really easy refactor here is to just remove the ternary and leave the conditional.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">my_method</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">my_method</span>
   <span class="vi">@foo</span> <span class="o">==</span> <span class="ss">:bar</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p>And of course if you were returning <code>false</code> when the conditional evaluates to <code>true</code>, you can either negate the comparison (use <code>!=</code> in that example), or negate the entire conditional result by prepending <code>!</code> to the line.</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/ruby">ruby</a> and <a class="button is-link" href="/tag/tech">tech</a>
diff --git i/public/the-shell-meme/index.html w/public/the-shell-meme/index.html
index 8c6ab86..e18ab5e 100644
--- i/public/the-shell-meme/index.html
+++ w/public/the-shell-meme/index.html
@@ -23,10 +23,8 @@
   </header><p>I ran across <a href="http://lstoll.net/2008/04/shell-meme/">The Shell Meme</a> on <a href="http://lstoll.net/">Lincoln Stoll's</a> blog, and figured I'd, uh, <em>borrow</em> it.</p>
 
 <p>Run this command in a new shell:</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span><span class="nb">history</span> <span class="p">|</span> awk <span class="s1">&#39;{ a[$2]++ } END { for(i in a){printf &quot;%5d\t%s\n &quot;,a[i],i} }&#39;</span> <span class="p">|</span> <span class="se">\</span>
-  sort -rn <span class="p">|</span> head
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">history</span> <span class="p">|</span> awk <span class="s1">&#39;{ a[$2]++ } END { for(i in a){printf &#34;%5d\t%s\n &#34;,a[i],i} }&#39;</span> <span class="p">|</span> <span class="se">\
+</span><span class="se"></span>  sort -rn <span class="p">|</span> head</code></pre></div>
 <p>I get this as the output</p>
 
 <pre><code>379    git
diff --git i/public/to_param-and-keyword-slugs/index.html w/public/to_param-and-keyword-slugs/index.html
index 95d9087..37a5847 100644
--- i/public/to_param-and-keyword-slugs/index.html
+++ w/public/to_param-and-keyword-slugs/index.html
@@ -23,12 +23,10 @@
   </header><p>Imagine you've got a blogging app and it's currently generating URL paths like <code>posts/10</code> for individual posts. You decide the path should contain the post title (in some form) to make your URLs friendlier when someone reads them. I know I certainly prefer to read <a href="http://caiustheory.com/abusing-ruby-19-and-json-for-fun">http://caiustheory.com/abusing-ruby-19-and-json-for-fun</a> vs <a href="http://caiustheory.com/?id=70">http://caiustheory.com/?id=70</a>. <em>(That's a fun blog post if you're into (ab)using ruby occasionally!)</em></p>
 
 <p>Now you know <em>all</em> about how to change the URL path that rails generatesâ€”just define <code>to_param</code> in your app. Something simple that generates a slug consisting of hyphens and lowercase alphanumerical characters. For example:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="c1"># 70-abusing-ruby-1-9-json-for-fun</span>
-<span class="k">def</span> <span class="nf">to_param</span>
-  <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\W/</span><span class="p">,</span> <span class="s2">&quot;-&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">squeeze</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">downcase</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="c1"># 70-abusing-ruby-1-9-json-for-fun</span>
+<span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">to_param</span>
+  <span class="s2">&#34;</span><span class="si">#{</span><span class="nb">id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\W/</span><span class="p">,</span> <span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">squeeze</span><span class="p">(</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">downcase</span>
+<span class="k">end</span></code></pre></div>
 <p>*<strong>NB</strong>: You might want to go the route of storing the slug against the post record in the database and thus generating it before saving the record. In which case the rest of this post is sort of moot and you just need to search on that column. If not, then read on!*</p>
 
 <p>Now we're generating a nice human-readable URL we need to change the way we find the post in the controller's show action. Up until now it's been a simple <code>@post = Post.find(params[:id])</code> to grab the record out the database. Problem now is <code>params[:id]</code> is <code>&quot;70-abusing-ruby-1-9-json-for-fun&quot;</code>, rather than just <code>&quot;70&quot;</code>. A quick check in the <a href="http://ruby-doc.org/core/classes/String.html#M001149">String#to_i</a> docs reveals it &quot;Returns the result of interpreting leading characters in str as an integer base base (between 2 and 36).&quot; Basically it extracts the first number it comes across and returns it.</p>
@@ -40,16 +38,14 @@
 <p>All we want to do is render the content if the id param matches the slug of the post exactly, and return a 404 page if it doesn't. We already know the id param (<code>params[:id]</code>) and have pulled the Post object out of the database and stored it in an instance variable (<code>@post</code>). The <code>@post</code> knows how to generate it's own slug, using <code>#to_param</code>.</p>
 
 <p>So we end up with something like the following in our posts controller, which does all the above and correctly returns a 404 if someone enters an invalid slug (even if it starts with a valid post id):</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">def</span> <span class="nf">show</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">show</span>
   <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">].</span><span class="n">to_i</span><span class="p">)</span>
   <span class="n">render_404</span> <span class="o">&amp;&amp;</span> <span class="k">return</span> <span class="k">unless</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span> <span class="o">==</span> <span class="vi">@post</span><span class="o">.</span><span class="n">to_param</span>
 <span class="k">end</span>
 
-<span class="k">def</span> <span class="nf">render_404</span>
-  <span class="n">render</span> <span class="ss">:file</span> <span class="o">=&gt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span> <span class="o">+</span> <span class="s2">&quot;public/404.html&quot;</span><span class="p">,</span> <span class="ss">:status</span> <span class="o">=&gt;</span> <span class="ss">:not_found</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">render_404</span>
+  <span class="n">render</span> <span class="ss">:file</span> <span class="o">=&gt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span> <span class="o">+</span> <span class="s2">&#34;public/404.html&#34;</span><span class="p">,</span> <span class="ss">:status</span> <span class="o">=&gt;</span> <span class="ss">:not_found</span>
+<span class="k">end</span></code></pre></div>
 <p>And going to an invalid path like <code>/posts/70-ruby-19-sucks-and-python-rules-4eva</code> just renders the default rails 404 page with a 404 HTTP status. (If you want the id to appear at the end of the path, alter <code>to_param</code> accordingly and do something like <code>params[:id].match(/\d+$/)</code> to extract the Post's id to search on.)</p>
 
 <p>Hey presto, we've implemented human readable slugs that are tamper-proof (without storing them in the database.)</p>
diff --git i/public/use-readline-with-default-ruby-on-os-x/index.html w/public/use-readline-with-default-ruby-on-os-x/index.html
index 1867258..45df369 100644
--- i/public/use-readline-with-default-ruby-on-os-x/index.html
+++ w/public/use-readline-with-default-ruby-on-os-x/index.html
@@ -23,19 +23,17 @@
   </header><p>OS X Lion comes with ruby 1.8.7-p249 installed, although it's compiled against libedit rather than libreadline. Whilst libedit is a mostly-compatible replacement for libreadline, I find there's a couple of settings I'm used to that don't work in libedit. (Like <code>history-beginning-search-backward</code>.)</p>
 
 <p>Luckily you can grab the source of ruby and compile just the readline extension, and move it into the right place for it to just work. Here's what's been working for me:</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span><span class="c1"># Install readline using homebrew</span>
-brew install readline
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># Install readline using homebrew
+</span><span class="c1"></span>brew install readline
 
-<span class="c1"># Download the ruby source and check out 1.8.7-p249</span>
-mkdir ~/tmp <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ~/tmp
+<span class="c1"># Download the ruby source and check out 1.8.7-p249
+</span><span class="c1"></span>mkdir ~/tmp <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ~/tmp
 git clone git://github.com/ruby/ruby
 <span class="nb">cd</span> ruby
 git checkout v1_8_7_249
 <span class="nb">cd</span> ext/readline
 ruby extconf.rb --with-readline-dir<span class="o">=</span><span class="k">$(</span>brew --prefix readline<span class="k">)</span> --disable-libedit
-make
-</code></pre></div>
-
+make</code></pre></div>
 <p>Now you should have <code>readline.bundle</code> in the current directory, and it should be compiled against your homebrew-installed readline library, rather than libedit that comes with the system. We can quickly double-check that by using <code>otool</code> to check what the binary is linked against.</p>
 
 <pre><code>$ otool -L readline.bundle
@@ -47,18 +45,14 @@
 </code></pre>
 
 <p>And in the output you should see a line listing &quot;libreadline&quot;, and no lines listing &quot;libedit&quot;. Which that shows, we've compiled it properly then. Now the bundle is built we need to move it into the right place so it's loaded when ruby is invoked.</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span><span class="nv">RL_PATH</span><span class="o">=</span><span class="s2">&quot;/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/universal-darwin11.0&quot;</span>
-<span class="c1"># Back up the original bundle, just in cases</span>
-sudo mv <span class="s2">&quot;</span><span class="nv">$RL_PATH</span><span class="s2">/readline.bundle&quot;</span> <span class="s2">&quot;</span><span class="nv">$RL_PATH</span><span class="s2">/readline.bundle.libedit&quot;</span>
-sudo mv readline.bundle <span class="s2">&quot;</span><span class="nv">$RL_PATH</span><span class="s2">/readline.bundle&quot;</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">RL_PATH</span><span class="o">=</span><span class="s2">&#34;/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/universal-darwin11.0&#34;</span>
+<span class="c1"># Back up the original bundle, just in cases
+</span><span class="c1"></span>sudo mv <span class="s2">&#34;</span><span class="nv">$RL_PATH</span><span class="s2">/readline.bundle&#34;</span> <span class="s2">&#34;</span><span class="nv">$RL_PATH</span><span class="s2">/readline.bundle.libedit&#34;</span>
+sudo mv readline.bundle <span class="s2">&#34;</span><span class="nv">$RL_PATH</span><span class="s2">/readline.bundle&#34;</span></code></pre></div>
 <p>And that's it. You've got a proper compiled-against-readline installed ruby 1.8.7-p249 on 10.7 now.</p>
 
 <p>One gotcha I ran into was needing to pass the same arguments to rvm when installing any other version of 1.8.7 on the same machine. Simple enough, just need to remember to do it though.</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span><span class="nv">CC</span><span class="o">=</span>gcc-4.2 rvm install <span class="m">1</span>.8.7-p357 -C --with-readline-dir<span class="o">=</span><span class="k">$(</span>brew --prefix readline<span class="k">)</span> --disable-libedit
-</code></pre></div>
-<footer><p class="tags">
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">CC</span><span class="o">=</span>gcc-4.2 rvm install <span class="m">1</span>.8.7-p357 -C --with-readline-dir<span class="o">=</span><span class="k">$(</span>brew --prefix readline<span class="k">)</span> --disable-libedit</code></pre></div><footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/apple">apple</a>, <a class="button is-link" href="/tag/cli">cli</a>, <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/fix">fix</a>, <a class="button is-link" href="/tag/installing">installing</a>, <a class="button is-link" href="/tag/os-x">os x</a>, <a class="button is-link" href="/tag/ruby">ruby</a>, <a class="button is-link" href="/tag/tech">tech</a> and <a class="button is-link" href="/tag/terminal">terminal</a>
 </p>
 <p class="license">
diff --git i/public/validating-data-with-regular-expressions-in-ruby/index.html w/public/validating-data-with-regular-expressions-in-ruby/index.html
index 2a28ebb..46d7fee 100644
--- i/public/validating-data-with-regular-expressions-in-ruby/index.html
+++ w/public/validating-data-with-regular-expressions-in-ruby/index.html
@@ -33,21 +33,13 @@
 <h2 id="testing-our-expectations">Testing our expectations</h2>
 
 <p>Lets say we want to validate the string as a username for our app. A username is 5 characters long and consists only of lowercase letters.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="n">regex</span> <span class="o">=</span> <span class="sr">/^[a-z]{5}$/</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">regex</span> <span class="o">=</span> <span class="sr">/^[a-z]{5}$/</span></code></pre></div>
 <p>First we make sure it matches the data we want it to:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="s2">&quot;caius&quot;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">regex</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="s2">&#34;caius&#34;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">regex</span><span class="p">)</span> <span class="c1"># =&gt; true</span></code></pre></div>
 <p>Excellent, that validated. Now we'll try a shorter string, which we expect to fail.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="s2">&quot;cai&quot;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">regex</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="s2">&#34;cai&#34;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">regex</span><span class="p">)</span> <span class="c1"># =&gt; false</span></code></pre></div>
 <p>Once more, it behaves how we expected it to. The shorter string was rejected as we wanted it to be. Now, what happens if we test a string with a newline character in it? We'll make sure the data before the <code>\n</code> is valid, and then add some more data after the newline.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="s2">&quot;caius</span><span class="se">\n</span><span class="s2">foo&quot;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">regex</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="s2">&#34;caius</span><span class="se">\n</span><span class="s2">foo&#34;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">regex</span><span class="p">)</span> <span class="c1"># =&gt; true</span></code></pre></div>
 <p>Uh oh! That validated and would've been saved as a username?!</p>
 
 <p>Lets have a look at exactly what's happening there, the <code>$</code> matches the <code>\n</code> character, so the regex is only matching the first 5 characters of the string, and just ignores anything after the <code>\n</code>. As it turns out, this is exactly what we've asked the regex to match, but we didn't want this behaviour.</p>
@@ -55,9 +47,7 @@ <h2 id="testing-our-expectations">Testing our expectations</h2>
 <p>Now you might be thinking, &quot;So what? someone can have a username with a newline in it.&quot; For starters this will probably display weirdly anywhere you use their username, but more importantly it opens your application to an injection attack. Suppose they took advantage of this by setting their username to include some javascript on the page which stole your login cookie and sent it to them. You view their account in the admin section and oh no! They can login as your admin account and do what they want.</p>
 
 <p>Simple example of this is just having it output an alert dialog. <em>(This is actually the code I'll use to test an application as its not malicious, but blindingly obvious if the javascript is executed or not.)</em></p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="s2">&quot;caius</span><span class="se">\n</span><span class="s2">&lt;script&gt;alert(&#39;hello&#39;)&lt;/script&gt;&quot;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">regex</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="s2">&#34;caius</span><span class="se">\n</span><span class="s2">&lt;script&gt;alert(&#39;hello&#39;)&lt;/script&gt;&#34;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">regex</span><span class="p">)</span> <span class="c1"># =&gt; true</span></code></pre></div>
 <p>Ok, so that was the result we were expecting this time, although it's still not the outcome we wanted. Anytime their username is viewed (providing you aren't escaping the data to HTML entities) you'll see the following:</p>
 
 <p><img src="http://caius.name/images/qs/javascript-alert-dialog.png" alt="javascript alert dialog" /></p>
@@ -67,36 +57,26 @@ <h2 id="the-solution">The Solution</h2>
 <p>Having realised from our testing above that ^$ matches the beginning/end of a <em>line</em> in ruby not the beginning and end of a <em>string</em>, I hear you cry, &quot;How do we make sure we're matching the entire string?!&quot;</p>
 
 <p>The answer is pretty simple. Just swap out <code>^$</code> for <code>\A\z</code>. Lets go ahead and try this with the same data as we have above, but with the modified regular expression.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="n">new_regex</span> <span class="o">=</span> <span class="sr">/\A[a-z]{5}\z/</span>
-<span class="s2">&quot;caius&quot;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">new_regex</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="n">new_regex</span> <span class="o">=</span> <span class="sr">/\A[a-z]{5}\z/</span>
+<span class="s2">&#34;caius&#34;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">new_regex</span><span class="p">)</span> <span class="c1"># =&gt; true</span></code></pre></div>
 <p>That's a good start, the valid string still matches.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="s2">&quot;cai&quot;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">new_regex</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="s2">&#34;cai&#34;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">new_regex</span><span class="p">)</span> <span class="c1"># =&gt; false</span></code></pre></div>
 <p>Looks like it's going well, invalid string is invalid.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="s2">&quot;caius</span><span class="se">\n</span><span class="s2">foo&quot;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">new_regex</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="s2">&#34;caius</span><span class="se">\n</span><span class="s2">foo&#34;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">new_regex</span><span class="p">)</span> <span class="c1"># =&gt; false</span></code></pre></div>
 <p>Oh Excellent! It's validating this one correctly now.</p>
 
 <p>And just for consistency, lets test it with a more likely attack string.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="s2">&quot;caius</span><span class="se">\n</span><span class="s2">&lt;script&gt;alert(&#39;hello&#39;)&lt;/script&gt;&quot;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">new_regex</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="s2">&#34;caius</span><span class="se">\n</span><span class="s2">&lt;script&gt;alert(&#39;hello&#39;)&lt;/script&gt;&#34;</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">new_regex</span><span class="p">)</span> <span class="c1"># =&gt; false</span></code></pre></div>
 <p>Fantastic! We've fixed the security hole in our validation of the user's username.</p>
 
 <hr />
 
 <p>If you want to actually run the code above you'll need the following at the start of the ruby script to patch the validate method into String.</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="k">class</span> <span class="nc">String</span>
-  <span class="k">def</span> <span class="nf">validate</span> <span class="n">regex</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">String</span>
+  <span class="k">def</span> <span class="nc"></span><span class="o"></span><span class="nf">validate</span> <span class="n">regex</span>
     <span class="o">!</span><span class="nb">self</span><span class="o">[</span><span class="n">regex</span><span class="o">].</span><span class="n">nil?</span>
   <span class="k">end</span>
-<span class="k">end</span>
-</code></pre></div>
-
+<span class="k">end</span></code></pre></div>
 <p><strong><em>Update:</em></strong> I had <code>\Z</code> in the <code>new_regex</code> rather than the <code>\z</code> it should've been. Thanks <a href="http://ciaranwal.sh/">CiarÃ¡n</a>.</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/bug">bug</a>, <a class="button is-link" href="/tag/code">code</a>, <a class="button is-link" href="/tag/fix">fix</a>, <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/programming">programming</a>, <a class="button is-link" href="/tag/rails">rails</a>, <a class="button is-link" href="/tag/ruby">ruby</a>, <a class="button is-link" href="/tag/security">security</a> and <a class="button is-link" href="/tag/tech">tech</a>
diff --git i/public/why-do-i-love-ruby/index.html w/public/why-do-i-love-ruby/index.html
index 82ea24d..48aeb09 100644
--- i/public/why-do-i-love-ruby/index.html
+++ w/public/why-do-i-love-ruby/index.html
@@ -29,41 +29,33 @@
 </blockquote>
 
 <p>Me being a show off jumped straight into <a href="http://macromates.com/">TextMate</a> and banged out some code in real time to show her.  First up, a quick little one-liner of Ruby code to output a String:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span>
-<span class="c1"># =&gt; &quot;Hello World&quot;</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="s2">&#34;Hello World&#34;</span>
+<span class="c1"># =&gt; &#34;Hello World&#34;</span></code></pre></div>
 <p>So she goes, &quot;Sure, but whats so brilliant about that?&quot; So I just decide to reverse the string, have it output in reverse order:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span><span class="o">.</span><span class="n">reverse</span>
-<span class="c1"># =&gt; &quot;dlroW olleH&quot;</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="s2">&#34;Hello World&#34;</span><span class="o">.</span><span class="n">reverse</span>
+<span class="c1"># =&gt; &#34;dlroW olleH&#34;</span></code></pre></div>
 <p>Then the next question comes, &quot;So what makes that so much easier than in other languages?&quot; Well now I was thinking on the spot about which other language I can bang out a quick example in without having to look up too much information.  PHP seems the logical choice, being the language I know best behind Ruby.</p>
 
 <p>Thinking about how to do it in PHP, I can't think of a function to reverse the content of a string, but I know that <code>array_reverse()</code> exists, so I just split it into an array and reverse that array.  Only problem is I can't remember how to split a string by <code>&quot;&quot;</code>, I don't think <code>explode( &quot;&quot;, $var )</code> does the job.  So I quickly jump in and write the following code to test my concern.</p>
-<div class="highlight"><pre><code class="language-php" data-lang="php"><span></span><span class="cp">&lt;?php</span>
-  <span class="nv">$a</span> <span class="o">=</span> <span class="s2">&quot;Hello World&quot;</span>
-  <span class="nv">$b</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nv">$a</span> <span class="p">);</span>
-  <span class="nv">$c</span> <span class="o">=</span> <span class="nb">array_reverse</span><span class="p">(</span> <span class="nv">$b</span> <span class="p">);</span>
-  <span class="k">echo</span> <span class="nb">implode</span><span class="p">(</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nv">$c</span> <span class="p">);</span>
-<span class="cp">?&gt;</span><span class="x"></span>
-<span class="x"># =&gt; ERROR</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
+  <span class="nv">$a</span> <span class="o">=</span> <span class="s2">&#34;Hello World&#34;</span>
+  <span class="nv">$b</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="nv">$a</span> <span class="p">);</span>
+  <span class="nv">$c</span> <span class="o">=</span> <span class="nx">array_reverse</span><span class="p">(</span> <span class="nv">$b</span> <span class="p">);</span>
+  <span class="k">echo</span> <span class="nx">implode</span><span class="p">(</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="nv">$c</span> <span class="p">);</span>
+<span class="cp">?&gt;</span><span class="x">
+</span><span class="x"># =&gt; ERROR</span></code></pre></div>
 <p>The reason for the error is because I've missed a semi colon off the end of line 2, to this I get the response, &quot;well thats certainly not as nice as ruby.&quot; Just because one little character is missing!</p>
 
 <p>So I fix the semi colon and run it again, now I get an error complaining about explode not being able to split by a missing delimiter (the empty string - <code>&quot;&quot;</code>)  So I go hunting through the <a href="http://php.net/">php.net</a> docs and find <code>str_split()</code>, which does exactly what I want it to.</p>
 
 <p>In replacing <code>explode()</code> with <code>str_split()</code> and running it via the <code>php</code> command line binary, I realise that I haven't got any <code>\n</code> (newlines) at the end of it, so it doesn't display nicely in the terminal.  I thus update the script to the following and show her the result:</p>
-<div class="highlight"><pre><code class="language-php" data-lang="php"><span></span><span class="cp">&lt;?php</span>
-  <span class="nv">$a</span> <span class="o">=</span> <span class="s2">&quot;Hello World&quot;</span><span class="p">;</span>
-  <span class="nv">$b</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nv">$a</span> <span class="p">);</span>
-  <span class="nv">$c</span> <span class="o">=</span> <span class="nb">array_reverse</span><span class="p">(</span> <span class="nv">$b</span> <span class="p">);</span>
-  <span class="k">echo</span> <span class="nb">implode</span><span class="p">(</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nv">$c</span> <span class="p">)</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
-<span class="cp">?&gt;</span><span class="x"></span>
-<span class="x"># =&gt; &quot;dlroW olleH&quot;</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
+  <span class="nv">$a</span> <span class="o">=</span> <span class="s2">&#34;Hello World&#34;</span><span class="p">;</span>
+  <span class="nv">$b</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="nv">$a</span> <span class="p">);</span>
+  <span class="nv">$c</span> <span class="o">=</span> <span class="nx">array_reverse</span><span class="p">(</span> <span class="nv">$b</span> <span class="p">);</span>
+  <span class="k">echo</span> <span class="nx">implode</span><span class="p">(</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="nv">$c</span> <span class="p">)</span><span class="o">.</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
+<span class="cp">?&gt;</span><span class="x">
+</span><span class="x"># =&gt; &#34;dlroW olleH&#34;</span></code></pre></div>
 <p>And so she goes away seeing why I prefer Ruby to other languages for <em>most</em> programming I do. There are things Ruby fails at (and don't get me started on why rails isn't going to replace php!) and other places where it succeeds very well.</p>
 
 <p>But each to their own, and my own favourite is Ruby!</p>
@@ -71,15 +63,11 @@
 <h3 id="update">Update</h3>
 
 <p>As pointed out in the comments, if I had looked a bit further I would've found <code>strrev()</code> which does the same as the <code>reverse</code> method in Ruby.  So in fact the final code would be:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span><span class="o">.</span><span class="n">reverse</span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="s2">&#34;Hello World&#34;</span><span class="o">.</span><span class="n">reverse</span></code></pre></div>
 <p>vs</p>
-<div class="highlight"><pre><code class="language-php" data-lang="php"><span></span><span class="cp">&lt;?php</span>
-  <span class="k">echo</span> <span class="nb">strrev</span><span class="p">(</span> <span class="s2">&quot;Hello World&quot;</span> <span class="p">);</span>
-<span class="cp">?&gt;</span><span class="x"></span>
-</code></pre></div>
-
+<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
+  <span class="k">echo</span> <span class="nx">strrev</span><span class="p">(</span> <span class="s2">&#34;Hello World&#34;</span> <span class="p">);</span>
+<span class="cp">?&gt;</span></code></pre></div>
 <p>So it turns out this was a bad way to show why I prefer Ruby to PHP code wise to mother, think I might have to just bite the bullet and write about why I prefer <code>object.method</code> to <code>method( object )</code>!</p>
 <footer><p class="tags">
   <strong>Tags:</strong> <a class="button is-link" href="/tag/geek">geek</a>, <a class="button is-link" href="/tag/mother">mother</a>, <a class="button is-link" href="/tag/php">php</a>, <a class="button is-link" href="/tag/programming">programming</a>, <a class="button is-link" href="/tag/ruby">ruby</a> and <a class="button is-link" href="/tag/tech">tech</a>
diff --git i/public/why-i-love-data/index.html w/public/why-i-love-data/index.html
index d64cc56..94124a9 100644
--- i/public/why-i-love-data/index.html
+++ w/public/why-i-love-data/index.html
@@ -27,53 +27,45 @@
 <p>How can we use this, and why indeed do I love this fickle constant? I mostly use it for quick scripts where I need to process text data, rather than piping to STDIN.</p>
 
 <p>Given a list of URLs that I want to open in my web browser and look at, I could do the following for instance:</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="no">DATA</span><span class="o">.</span><span class="n">each_line</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:chomp</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
-  <span class="sb">`open &quot;</span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="sb">&quot;`</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="no">DATA</span><span class="o">.</span><span class="n">each_line</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:chomp</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
+  <span class="sb">`open &#34;</span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="sb">&#34;`</span>
 <span class="k">end</span>
 
-<span class="cp">__END__</span>
-<span class="cp">http://google.com/</span>
-<span class="cp">http://yahoo.com/</span>
-</code></pre></div>
-
+<span class="cp">__END__
+</span><span class="cp">http://google.com/
+</span><span class="cp">http://yahoo.com/</span></code></pre></div>
 <p>which upon running (on a mac) would open all the URLs listed in DATA in my default web browser. (For bonus points, use <a href="https://github.com/copiousfreetime/launchy#readme">Launchy</a> for cross-platform compatibility.) Really handy &amp; quick/simple when you've got 500+ URLs to open at once to go through. (I once had a job that required me to do this daily. Fun.)</p>
 
 <p>Or given a bunch of CSV data that you just want one column for, you could reach for <code>cut</code> or <code>awk</code> in the terminal, but ruby has a really good CSV library which I trust and know how to use already. Why not just use that &amp; <code>DATA</code> to pull out the field you want?</p>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="nb">require</span> <span class="s2">&quot;csv&quot;</span>
+<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">&#34;csv&#34;</span>
 
 <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">DATA</span><span class="p">,</span> <span class="ss">headers</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
-  <span class="nb">puts</span> <span class="n">row</span><span class="o">[</span><span class="s2">&quot;kName&quot;</span><span class="o">]</span>
+  <span class="nb">puts</span> <span class="n">row</span><span class="o">[</span><span class="s2">&#34;kName&#34;</span><span class="o">]</span>
 <span class="k">end</span>
 
-<span class="cp">__END__</span>
-<span class="cp">kId,kName,kURL</span>
-<span class="cp">1,Google UK,http://google.co.uk</span>
-<span class="cp">2,&quot;Yahoo, UK&quot;,http://yahoo.co.uk</span>
-</code></pre></div>
-<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span></span><span class="c1"># &gt;&gt; Google UK</span>
-<span class="c1"># &gt;&gt; Yahoo, UK</span>
-</code></pre></div>
-
+<span class="cp">__END__
+</span><span class="cp">kId,kName,kURL
+</span><span class="cp">1,Google UK,http://google.co.uk
+</span><span class="cp">2,&#34;Yahoo, UK&#34;,http://yahoo.co.uk</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="c1"># &gt;&gt; Google UK</span>
+<span class="c1"># &gt;&gt; Yahoo, UK</span></code></pre></div>
 <p>I find when the data I want to munge is already in my clipboard, and I can run ruby scripts directly from text editors without having to save a file, it saves having to write the data out to a file, have ruby read it back in, etc just to do something with the data. I can just write the script reading from <code>DATA</code>, paste the data in and run it. Which also lets me run it iteratively and build up a slightly more complex script that I don't want to keep. Then do what I need with the output and close the file without saving it.</p>
 
 <p><span id="fn1">*</span> technically DATA is an IO handler to read <code>__FILE__</code>, which has been wound forward to the start of the first line after <code>__END__</code> in the file. And it only exists for the first ruby file to be invoked by the interpreter.</p>
-<div class="highlight"><pre><code class="language-shell" data-lang="shell"><span></span>cat &gt; tmp/data.rb <span class="s">&lt;&lt;RUBY</span>
-<span class="s">p DATA.read</span>
-<span class="s">__END__</span>
-<span class="s">data.rb</span>
-<span class="s">RUBY</span>
+<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">cat &gt; tmp/data.rb <span class="s">&lt;&lt;RUBY
+</span><span class="s">p DATA.read
+</span><span class="s">__END__
+</span><span class="s">data.rb
+</span><span class="s">RUBY</span>
 
 ruby tmp/data.rb
-<span class="c1"># =&gt; &quot;data.rb\n&quot;</span>
-
-cat &gt; tmp/data-require.rb <span class="s">&lt;&lt;RUBY</span>
-<span class="s">require &quot;./tmp/data&quot;</span>
-<span class="s">RUBY</span>
+<span class="c1"># =&gt; &#34;data.rb\n&#34;
+</span><span class="c1"></span>
+cat &gt; tmp/data-require.rb <span class="s">&lt;&lt;RUBY
+</span><span class="s">require &#34;./tmp/data&#34;
+</span><span class="s">RUBY</span>
 
 ruby tmp/data-require.rb
-<span class="c1"># =&gt; /Users/caius/tmp/data.rb:1:in `&lt;top (required)&gt;&#39;: uninitialized constant DATA (NameError)</span>
-</code></pre></div>
-
+# <span class="o">=</span>&gt; /Users/caius/tmp/data.rb:1:in <span class="sb">`</span>&lt;top <span class="o">(</span>required<span class="o">)</span>&gt;<span class="err">&#39;</span>: uninitialized constant DATA <span class="o">(</span>NameError<span class="o">)</span></code></pre></div>
 <p>And because it's a file handle pointing at the current file, you can rewind it and read the entire ruby script into itselfâ€¦</p>
 
 <pre><code>$ ruby tmp/readself.rb 

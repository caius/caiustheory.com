#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can't match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. "/about/" for the file
#   "content/about.html"). To select all children, grandchildren, â€¦ of an
#   item, use the pattern "/about/*/"; "/about/*" will also select the parent,
#   because "*" matches zero or more characters.

preprocess do
  generate_blog_pages
end

compile "/posts/*", :rep => :text do
  layout "post_text"
end

compile "/posts/*" do
  filter :kramdown
  layout "post"
  layout "default"
end

compile "/sitemap/" do
  filter :erb
end

compile "/feed/" do
  filter :erb
end

compile "*" do
  if item[:extension] == "css"
    # don't filter stylesheets
  elsif item.binary?
    # don't filter binary items
  else
    filter :erb
    layout "default"
  end
end

module H
  module_function
  def post_identifier_components(identifier)
    /([0-9]+)\-([0-9]+)\-([0-9]+)\-([^\/]+)/.match(identifier).captures
  end
end

route "/posts/*", :rep => :text do
  y, m, d, slug = H.post_identifier_components(item.identifier)
  "/#{slug}.text"
end

route "/posts/*" do
  y, m, d, slug = H.post_identifier_components(item.identifier)
  "/#{slug}.html"
end


route "*" do
  if item.binary? || %w(css xml).include?(item[:extension])
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + "." + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + "index.html"
  end
end

layout "*", :erb
